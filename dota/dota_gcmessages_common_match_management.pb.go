// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_gcmessages_common_match_management.proto

package dota

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ELaneSelection int32

const (
	ELaneSelection_k_ELaneSelection_SAFELANE     ELaneSelection = 0
	ELaneSelection_k_ELaneSelection_OFFLANE      ELaneSelection = 1
	ELaneSelection_k_ELaneSelection_MIDLANE      ELaneSelection = 2
	ELaneSelection_k_ELaneSelection_SUPPORT_SOFT ELaneSelection = 3
	ELaneSelection_k_ELaneSelection_SUPPORT_HARD ELaneSelection = 4
)

var ELaneSelection_name = map[int32]string{
	0: "k_ELaneSelection_SAFELANE",
	1: "k_ELaneSelection_OFFLANE",
	2: "k_ELaneSelection_MIDLANE",
	3: "k_ELaneSelection_SUPPORT_SOFT",
	4: "k_ELaneSelection_SUPPORT_HARD",
}

var ELaneSelection_value = map[string]int32{
	"k_ELaneSelection_SAFELANE":     0,
	"k_ELaneSelection_OFFLANE":      1,
	"k_ELaneSelection_MIDLANE":      2,
	"k_ELaneSelection_SUPPORT_SOFT": 3,
	"k_ELaneSelection_SUPPORT_HARD": 4,
}

func (x ELaneSelection) Enum() *ELaneSelection {
	p := new(ELaneSelection)
	*p = x
	return p
}

func (x ELaneSelection) String() string {
	return proto.EnumName(ELaneSelection_name, int32(x))
}

func (x *ELaneSelection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELaneSelection_value, data, "ELaneSelection")
	if err != nil {
		return err
	}
	*x = ELaneSelection(value)
	return nil
}

func (ELaneSelection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{0}
}

type ELaneSelectionFlags int32

const (
	ELaneSelectionFlags_k_ELaneSelectionFlags_None         ELaneSelectionFlags = 0
	ELaneSelectionFlags_k_ELaneSelectionFlags_SAFELANE     ELaneSelectionFlags = 1
	ELaneSelectionFlags_k_ELaneSelectionFlags_OFFLANE      ELaneSelectionFlags = 2
	ELaneSelectionFlags_k_ELaneSelectionFlags_MIDLANE      ELaneSelectionFlags = 4
	ELaneSelectionFlags_k_ELaneSelectionFlags_CORE         ELaneSelectionFlags = 7
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT_SOFT ELaneSelectionFlags = 8
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT_HARD ELaneSelectionFlags = 16
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT      ELaneSelectionFlags = 24
	ELaneSelectionFlags_k_ELaneSelectionFlags_ALL          ELaneSelectionFlags = 31
)

var ELaneSelectionFlags_name = map[int32]string{
	0:  "k_ELaneSelectionFlags_None",
	1:  "k_ELaneSelectionFlags_SAFELANE",
	2:  "k_ELaneSelectionFlags_OFFLANE",
	4:  "k_ELaneSelectionFlags_MIDLANE",
	7:  "k_ELaneSelectionFlags_CORE",
	8:  "k_ELaneSelectionFlags_SUPPORT_SOFT",
	16: "k_ELaneSelectionFlags_SUPPORT_HARD",
	24: "k_ELaneSelectionFlags_SUPPORT",
	31: "k_ELaneSelectionFlags_ALL",
}

var ELaneSelectionFlags_value = map[string]int32{
	"k_ELaneSelectionFlags_None":         0,
	"k_ELaneSelectionFlags_SAFELANE":     1,
	"k_ELaneSelectionFlags_OFFLANE":      2,
	"k_ELaneSelectionFlags_MIDLANE":      4,
	"k_ELaneSelectionFlags_CORE":         7,
	"k_ELaneSelectionFlags_SUPPORT_SOFT": 8,
	"k_ELaneSelectionFlags_SUPPORT_HARD": 16,
	"k_ELaneSelectionFlags_SUPPORT":      24,
	"k_ELaneSelectionFlags_ALL":          31,
}

func (x ELaneSelectionFlags) Enum() *ELaneSelectionFlags {
	p := new(ELaneSelectionFlags)
	*p = x
	return p
}

func (x ELaneSelectionFlags) String() string {
	return proto.EnumName(ELaneSelectionFlags_name, int32(x))
}

func (x *ELaneSelectionFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELaneSelectionFlags_value, data, "ELaneSelectionFlags")
	if err != nil {
		return err
	}
	*x = ELaneSelectionFlags(value)
	return nil
}

func (ELaneSelectionFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{1}
}

type EPartyMatchmakingFlags int32

const (
	EPartyMatchmakingFlags_k_EPartyMatchmakingFlags_None            EPartyMatchmakingFlags = 0
	EPartyMatchmakingFlags_k_EPartyMatchmakingFlags_LargeRankSpread EPartyMatchmakingFlags = 1
)

var EPartyMatchmakingFlags_name = map[int32]string{
	0: "k_EPartyMatchmakingFlags_None",
	1: "k_EPartyMatchmakingFlags_LargeRankSpread",
}

var EPartyMatchmakingFlags_value = map[string]int32{
	"k_EPartyMatchmakingFlags_None":            0,
	"k_EPartyMatchmakingFlags_LargeRankSpread": 1,
}

func (x EPartyMatchmakingFlags) Enum() *EPartyMatchmakingFlags {
	p := new(EPartyMatchmakingFlags)
	*p = x
	return p
}

func (x EPartyMatchmakingFlags) String() string {
	return proto.EnumName(EPartyMatchmakingFlags_name, int32(x))
}

func (x *EPartyMatchmakingFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EPartyMatchmakingFlags_value, data, "EPartyMatchmakingFlags")
	if err != nil {
		return err
	}
	*x = EPartyMatchmakingFlags(value)
	return nil
}

func (EPartyMatchmakingFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{2}
}

type EHighPriorityMMState int32

const (
	EHighPriorityMMState_k_EHighPriorityMM_Unknown          EHighPriorityMMState = 0
	EHighPriorityMMState_k_EHighPriorityMM_MissingMMData    EHighPriorityMMState = 1
	EHighPriorityMMState_k_EHighPriorityMM_ResourceMissing  EHighPriorityMMState = 2
	EHighPriorityMMState_k_EHighPriorityMM_ManuallyDisabled EHighPriorityMMState = 3
	EHighPriorityMMState_k_EHighPriorityMM_Min_Enabled      EHighPriorityMMState = 64
	EHighPriorityMMState_k_EHighPriorityMM_AllRolesSelected EHighPriorityMMState = 65
	EHighPriorityMMState_k_EHighPriorityMM_UsingResource    EHighPriorityMMState = 66
	EHighPriorityMMState_k_EHighPriorityMM_FiveStack        EHighPriorityMMState = 67
	EHighPriorityMMState_k_EHighPriorityMM_HighDemand       EHighPriorityMMState = 68
)

var EHighPriorityMMState_name = map[int32]string{
	0:  "k_EHighPriorityMM_Unknown",
	1:  "k_EHighPriorityMM_MissingMMData",
	2:  "k_EHighPriorityMM_ResourceMissing",
	3:  "k_EHighPriorityMM_ManuallyDisabled",
	64: "k_EHighPriorityMM_Min_Enabled",
	65: "k_EHighPriorityMM_AllRolesSelected",
	66: "k_EHighPriorityMM_UsingResource",
	67: "k_EHighPriorityMM_FiveStack",
	68: "k_EHighPriorityMM_HighDemand",
}

var EHighPriorityMMState_value = map[string]int32{
	"k_EHighPriorityMM_Unknown":          0,
	"k_EHighPriorityMM_MissingMMData":    1,
	"k_EHighPriorityMM_ResourceMissing":  2,
	"k_EHighPriorityMM_ManuallyDisabled": 3,
	"k_EHighPriorityMM_Min_Enabled":      64,
	"k_EHighPriorityMM_AllRolesSelected": 65,
	"k_EHighPriorityMM_UsingResource":    66,
	"k_EHighPriorityMM_FiveStack":        67,
	"k_EHighPriorityMM_HighDemand":       68,
}

func (x EHighPriorityMMState) Enum() *EHighPriorityMMState {
	p := new(EHighPriorityMMState)
	*p = x
	return p
}

func (x EHighPriorityMMState) String() string {
	return proto.EnumName(EHighPriorityMMState_name, int32(x))
}

func (x *EHighPriorityMMState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EHighPriorityMMState_value, data, "EHighPriorityMMState")
	if err != nil {
		return err
	}
	*x = EHighPriorityMMState(value)
	return nil
}

func (EHighPriorityMMState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{3}
}

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
)

var LobbyDotaTVDelay_name = map[int32]string{
	0: "LobbyDotaTV_10",
	1: "LobbyDotaTV_120",
	2: "LobbyDotaTV_300",
}

var LobbyDotaTVDelay_value = map[string]int32{
	"LobbyDotaTV_10":  0,
	"LobbyDotaTV_120": 1,
	"LobbyDotaTV_300": 2,
}

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}

func (x LobbyDotaTVDelay) String() string {
	return proto.EnumName(LobbyDotaTVDelay_name, int32(x))
}

func (x *LobbyDotaTVDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaTVDelay_value, data, "LobbyDotaTVDelay")
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(value)
	return nil
}

func (LobbyDotaTVDelay) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{4}
}

type LobbyDotaPauseSetting int32

const (
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited LobbyDotaPauseSetting = 0
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Limited   LobbyDotaPauseSetting = 1
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Disabled  LobbyDotaPauseSetting = 2
)

var LobbyDotaPauseSetting_name = map[int32]string{
	0: "LobbyDotaPauseSetting_Unlimited",
	1: "LobbyDotaPauseSetting_Limited",
	2: "LobbyDotaPauseSetting_Disabled",
}

var LobbyDotaPauseSetting_value = map[string]int32{
	"LobbyDotaPauseSetting_Unlimited": 0,
	"LobbyDotaPauseSetting_Limited":   1,
	"LobbyDotaPauseSetting_Disabled":  2,
}

func (x LobbyDotaPauseSetting) Enum() *LobbyDotaPauseSetting {
	p := new(LobbyDotaPauseSetting)
	*p = x
	return p
}

func (x LobbyDotaPauseSetting) String() string {
	return proto.EnumName(LobbyDotaPauseSetting_name, int32(x))
}

func (x *LobbyDotaPauseSetting) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaPauseSetting_value, data, "LobbyDotaPauseSetting")
	if err != nil {
		return err
	}
	*x = LobbyDotaPauseSetting(value)
	return nil
}

func (LobbyDotaPauseSetting) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{5}
}

type EReadyCheckStatus int32

const (
	EReadyCheckStatus_k_EReadyCheckStatus_Unknown  EReadyCheckStatus = 0
	EReadyCheckStatus_k_EReadyCheckStatus_NotReady EReadyCheckStatus = 1
	EReadyCheckStatus_k_EReadyCheckStatus_Ready    EReadyCheckStatus = 2
)

var EReadyCheckStatus_name = map[int32]string{
	0: "k_EReadyCheckStatus_Unknown",
	1: "k_EReadyCheckStatus_NotReady",
	2: "k_EReadyCheckStatus_Ready",
}

var EReadyCheckStatus_value = map[string]int32{
	"k_EReadyCheckStatus_Unknown":  0,
	"k_EReadyCheckStatus_NotReady": 1,
	"k_EReadyCheckStatus_Ready":    2,
}

func (x EReadyCheckStatus) Enum() *EReadyCheckStatus {
	p := new(EReadyCheckStatus)
	*p = x
	return p
}

func (x EReadyCheckStatus) String() string {
	return proto.EnumName(EReadyCheckStatus_name, int32(x))
}

func (x *EReadyCheckStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EReadyCheckStatus_value, data, "EReadyCheckStatus")
	if err != nil {
		return err
	}
	*x = EReadyCheckStatus(value)
	return nil
}

func (EReadyCheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{6}
}

type EReadyCheckRequestResult int32

const (
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_Success           EReadyCheckRequestResult = 0
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_AlreadyInProgress EReadyCheckRequestResult = 1
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_NotInParty        EReadyCheckRequestResult = 2
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_SendError         EReadyCheckRequestResult = 3
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_UnknownError      EReadyCheckRequestResult = 4
)

var EReadyCheckRequestResult_name = map[int32]string{
	0: "k_EReadyCheckRequestResult_Success",
	1: "k_EReadyCheckRequestResult_AlreadyInProgress",
	2: "k_EReadyCheckRequestResult_NotInParty",
	3: "k_EReadyCheckRequestResult_SendError",
	4: "k_EReadyCheckRequestResult_UnknownError",
}

var EReadyCheckRequestResult_value = map[string]int32{
	"k_EReadyCheckRequestResult_Success":           0,
	"k_EReadyCheckRequestResult_AlreadyInProgress": 1,
	"k_EReadyCheckRequestResult_NotInParty":        2,
	"k_EReadyCheckRequestResult_SendError":         3,
	"k_EReadyCheckRequestResult_UnknownError":      4,
}

func (x EReadyCheckRequestResult) Enum() *EReadyCheckRequestResult {
	p := new(EReadyCheckRequestResult)
	*p = x
	return p
}

func (x EReadyCheckRequestResult) String() string {
	return proto.EnumName(EReadyCheckRequestResult_name, int32(x))
}

func (x *EReadyCheckRequestResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EReadyCheckRequestResult_value, data, "EReadyCheckRequestResult")
	if err != nil {
		return err
	}
	*x = EReadyCheckRequestResult(value)
	return nil
}

func (EReadyCheckRequestResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{7}
}

type EMatchBehaviorScoreVariance int32

const (
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Invalid EMatchBehaviorScoreVariance = 0
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Low     EMatchBehaviorScoreVariance = 1
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Medium  EMatchBehaviorScoreVariance = 2
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_High    EMatchBehaviorScoreVariance = 3
)

var EMatchBehaviorScoreVariance_name = map[int32]string{
	0: "k_EMatchBehaviorScoreVariance_Invalid",
	1: "k_EMatchBehaviorScoreVariance_Low",
	2: "k_EMatchBehaviorScoreVariance_Medium",
	3: "k_EMatchBehaviorScoreVariance_High",
}

var EMatchBehaviorScoreVariance_value = map[string]int32{
	"k_EMatchBehaviorScoreVariance_Invalid": 0,
	"k_EMatchBehaviorScoreVariance_Low":     1,
	"k_EMatchBehaviorScoreVariance_Medium":  2,
	"k_EMatchBehaviorScoreVariance_High":    3,
}

func (x EMatchBehaviorScoreVariance) Enum() *EMatchBehaviorScoreVariance {
	p := new(EMatchBehaviorScoreVariance)
	*p = x
	return p
}

func (x EMatchBehaviorScoreVariance) String() string {
	return proto.EnumName(EMatchBehaviorScoreVariance_name, int32(x))
}

func (x *EMatchBehaviorScoreVariance) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EMatchBehaviorScoreVariance_value, data, "EMatchBehaviorScoreVariance")
	if err != nil {
		return err
	}
	*x = EMatchBehaviorScoreVariance(value)
	return nil
}

func (EMatchBehaviorScoreVariance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{8}
}

type CSODOTAParty_State int32

const (
	CSODOTAParty_UI            CSODOTAParty_State = 0
	CSODOTAParty_FINDING_MATCH CSODOTAParty_State = 1
	CSODOTAParty_IN_MATCH      CSODOTAParty_State = 2
)

var CSODOTAParty_State_name = map[int32]string{
	0: "UI",
	1: "FINDING_MATCH",
	2: "IN_MATCH",
}

var CSODOTAParty_State_value = map[string]int32{
	"UI":            0,
	"FINDING_MATCH": 1,
	"IN_MATCH":      2,
}

func (x CSODOTAParty_State) Enum() *CSODOTAParty_State {
	p := new(CSODOTAParty_State)
	*p = x
	return p
}

func (x CSODOTAParty_State) String() string {
	return proto.EnumName(CSODOTAParty_State_name, int32(x))
}

func (x *CSODOTAParty_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTAParty_State_value, data, "CSODOTAParty_State")
	if err != nil {
		return err
	}
	*x = CSODOTAParty_State(value)
	return nil
}

func (CSODOTAParty_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{1, 0}
}

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

var CSODOTALobby_State_name = map[int32]string{
	0: "UI",
	4: "READYUP",
	1: "SERVERSETUP",
	2: "RUN",
	3: "POSTGAME",
	5: "NOTREADY",
	6: "SERVERASSIGN",
}

var CSODOTALobby_State_value = map[string]int32{
	"UI":           0,
	"READYUP":      4,
	"SERVERSETUP":  1,
	"RUN":          2,
	"POSTGAME":     3,
	"NOTREADY":     5,
	"SERVERASSIGN": 6,
}

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}

func (x CSODOTALobby_State) String() string {
	return proto.EnumName(CSODOTALobby_State_name, int32(x))
}

func (x *CSODOTALobby_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_State_value, data, "CSODOTALobby_State")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(value)
	return nil
}

func (CSODOTALobby_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{9, 0}
}

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID                 CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH            CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE                CSODOTALobby_LobbyType = 1
	CSODOTALobby_COOP_BOT_MATCH          CSODOTALobby_LobbyType = 4
	CSODOTALobby_LEGACY_TEAM_MATCH       CSODOTALobby_LobbyType = 5
	CSODOTALobby_LEGACY_SOLO_QUEUE_MATCH CSODOTALobby_LobbyType = 6
	CSODOTALobby_COMPETITIVE_MATCH       CSODOTALobby_LobbyType = 7
	CSODOTALobby_CASUAL_1V1_MATCH        CSODOTALobby_LobbyType = 8
	CSODOTALobby_WEEKEND_TOURNEY         CSODOTALobby_LobbyType = 9
	CSODOTALobby_LOCAL_BOT_MATCH         CSODOTALobby_LobbyType = 10
	CSODOTALobby_SPECTATOR               CSODOTALobby_LobbyType = 11
	CSODOTALobby_EVENT_MATCH             CSODOTALobby_LobbyType = 12
)

var CSODOTALobby_LobbyType_name = map[int32]string{
	-1: "INVALID",
	0:  "CASUAL_MATCH",
	1:  "PRACTICE",
	4:  "COOP_BOT_MATCH",
	5:  "LEGACY_TEAM_MATCH",
	6:  "LEGACY_SOLO_QUEUE_MATCH",
	7:  "COMPETITIVE_MATCH",
	8:  "CASUAL_1V1_MATCH",
	9:  "WEEKEND_TOURNEY",
	10: "LOCAL_BOT_MATCH",
	11: "SPECTATOR",
	12: "EVENT_MATCH",
}

var CSODOTALobby_LobbyType_value = map[string]int32{
	"INVALID":                 -1,
	"CASUAL_MATCH":            0,
	"PRACTICE":                1,
	"COOP_BOT_MATCH":          4,
	"LEGACY_TEAM_MATCH":       5,
	"LEGACY_SOLO_QUEUE_MATCH": 6,
	"COMPETITIVE_MATCH":       7,
	"CASUAL_1V1_MATCH":        8,
	"WEEKEND_TOURNEY":         9,
	"LOCAL_BOT_MATCH":         10,
	"SPECTATOR":               11,
	"EVENT_MATCH":             12,
}

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}

func (x CSODOTALobby_LobbyType) String() string {
	return proto.EnumName(CSODOTALobby_LobbyType_name, int32(x))
}

func (x *CSODOTALobby_LobbyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_LobbyType_value, data, "CSODOTALobby_LobbyType")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(value)
	return nil
}

func (CSODOTALobby_LobbyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{9, 1}
}

type CSODOTAPartyMember struct {
	PartnerType             *PartnerAccountType `protobuf:"varint,1,opt,name=partner_type,json=partnerType,enum=dota.PartnerAccountType,def=0" json:"partner_type,omitempty"`
	IsCoach                 *bool               `protobuf:"varint,2,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
	RegionPingCodes         []uint32            `protobuf:"varint,4,rep,packed,name=region_ping_codes,json=regionPingCodes" json:"region_ping_codes,omitempty"`
	RegionPingTimes         []uint32            `protobuf:"varint,5,rep,packed,name=region_ping_times,json=regionPingTimes" json:"region_ping_times,omitempty"`
	RegionPingFailedBitmask *uint32             `protobuf:"varint,6,opt,name=region_ping_failed_bitmask,json=regionPingFailedBitmask" json:"region_ping_failed_bitmask,omitempty"`
	IsPlusSubscriber        *bool               `protobuf:"varint,10,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	TourneySkillLevel       *uint32             `protobuf:"varint,7,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBuyin            *uint32             `protobuf:"varint,8,opt,name=tourney_buyin,json=tourneyBuyin" json:"tourney_buyin,omitempty"`
	TourneyPreventUntil     *uint32             `protobuf:"varint,9,opt,name=tourney_prevent_until,json=tourneyPreventUntil" json:"tourney_prevent_until,omitempty"`
	MmDataValid             *bool               `protobuf:"varint,13,opt,name=mm_data_valid,json=mmDataValid" json:"mm_data_valid,omitempty"`
	LaneSelectionFlags      *uint32             `protobuf:"varint,11,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	HighPriorityDisabled    *bool               `protobuf:"varint,14,opt,name=high_priority_disabled,json=highPriorityDisabled" json:"high_priority_disabled,omitempty"`
	HasHpResource           *bool               `protobuf:"varint,15,opt,name=has_hp_resource,json=hasHpResource" json:"has_hp_resource,omitempty"`
	JoinedFromPartyfinder   *bool               `protobuf:"varint,12,opt,name=joined_from_partyfinder,json=joinedFromPartyfinder" json:"joined_from_partyfinder,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}            `json:"-"`
	XXX_unrecognized        []byte              `json:"-"`
	XXX_sizecache           int32               `json:"-"`
}

func (m *CSODOTAPartyMember) Reset()         { *m = CSODOTAPartyMember{} }
func (m *CSODOTAPartyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyMember) ProtoMessage()    {}
func (*CSODOTAPartyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{0}
}

func (m *CSODOTAPartyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAPartyMember.Unmarshal(m, b)
}
func (m *CSODOTAPartyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAPartyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTAPartyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAPartyMember.Merge(m, src)
}
func (m *CSODOTAPartyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTAPartyMember.Size(m)
}
func (m *CSODOTAPartyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAPartyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAPartyMember proto.InternalMessageInfo

const Default_CSODOTAPartyMember_PartnerType PartnerAccountType = PartnerAccountType_PARTNER_NONE

func (m *CSODOTAPartyMember) GetPartnerType() PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTAPartyMember_PartnerType
}

func (m *CSODOTAPartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

func (m *CSODOTAPartyMember) GetRegionPingCodes() []uint32 {
	if m != nil {
		return m.RegionPingCodes
	}
	return nil
}

func (m *CSODOTAPartyMember) GetRegionPingTimes() []uint32 {
	if m != nil {
		return m.RegionPingTimes
	}
	return nil
}

func (m *CSODOTAPartyMember) GetRegionPingFailedBitmask() uint32 {
	if m != nil && m.RegionPingFailedBitmask != nil {
		return *m.RegionPingFailedBitmask
	}
	return 0
}

func (m *CSODOTAPartyMember) GetIsPlusSubscriber() bool {
	if m != nil && m.IsPlusSubscriber != nil {
		return *m.IsPlusSubscriber
	}
	return false
}

func (m *CSODOTAPartyMember) GetTourneySkillLevel() uint32 {
	if m != nil && m.TourneySkillLevel != nil {
		return *m.TourneySkillLevel
	}
	return 0
}

func (m *CSODOTAPartyMember) GetTourneyBuyin() uint32 {
	if m != nil && m.TourneyBuyin != nil {
		return *m.TourneyBuyin
	}
	return 0
}

func (m *CSODOTAPartyMember) GetTourneyPreventUntil() uint32 {
	if m != nil && m.TourneyPreventUntil != nil {
		return *m.TourneyPreventUntil
	}
	return 0
}

func (m *CSODOTAPartyMember) GetMmDataValid() bool {
	if m != nil && m.MmDataValid != nil {
		return *m.MmDataValid
	}
	return false
}

func (m *CSODOTAPartyMember) GetLaneSelectionFlags() uint32 {
	if m != nil && m.LaneSelectionFlags != nil {
		return *m.LaneSelectionFlags
	}
	return 0
}

func (m *CSODOTAPartyMember) GetHighPriorityDisabled() bool {
	if m != nil && m.HighPriorityDisabled != nil {
		return *m.HighPriorityDisabled
	}
	return false
}

func (m *CSODOTAPartyMember) GetHasHpResource() bool {
	if m != nil && m.HasHpResource != nil {
		return *m.HasHpResource
	}
	return false
}

func (m *CSODOTAPartyMember) GetJoinedFromPartyfinder() bool {
	if m != nil && m.JoinedFromPartyfinder != nil {
		return *m.JoinedFromPartyfinder
	}
	return false
}

type CSODOTAParty struct {
	PartyId                         *uint64                     `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	LeaderId                        *uint64                     `protobuf:"fixed64,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	MemberIds                       []uint64                    `protobuf:"fixed64,3,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	GameModes                       *uint32                     `protobuf:"varint,4,opt,name=game_modes,json=gameModes" json:"game_modes,omitempty"`
	State                           *CSODOTAParty_State         `protobuf:"varint,6,opt,name=state,enum=dota.CSODOTAParty_State,def=0" json:"state,omitempty"`
	EffectiveStartedMatchmakingTime *uint32                     `protobuf:"varint,7,opt,name=effective_started_matchmaking_time,json=effectiveStartedMatchmakingTime" json:"effective_started_matchmaking_time,omitempty"`
	RawStartedMatchmakingTime       *uint32                     `protobuf:"varint,32,opt,name=raw_started_matchmaking_time,json=rawStartedMatchmakingTime" json:"raw_started_matchmaking_time,omitempty"`
	AttemptStartTime                *uint32                     `protobuf:"varint,33,opt,name=attempt_start_time,json=attemptStartTime" json:"attempt_start_time,omitempty"`
	AttemptNum                      *uint32                     `protobuf:"varint,34,opt,name=attempt_num,json=attemptNum" json:"attempt_num,omitempty"`
	Matchgroups                     *uint32                     `protobuf:"varint,11,opt,name=matchgroups" json:"matchgroups,omitempty"`
	LowPriorityAccountId            *uint32                     `protobuf:"varint,19,opt,name=low_priority_account_id,json=lowPriorityAccountId" json:"low_priority_account_id,omitempty"`
	MatchType                       *MatchType                  `protobuf:"varint,21,opt,name=match_type,json=matchType,enum=dota.MatchType,def=0" json:"match_type,omitempty"`
	BotDifficulty                   *DOTABotDifficulty          `protobuf:"varint,22,opt,name=bot_difficulty,json=botDifficulty,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	TeamId                          *uint32                     `protobuf:"varint,23,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName                        *string                     `protobuf:"bytes,51,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamUiLogo                      *uint64                     `protobuf:"varint,52,opt,name=team_ui_logo,json=teamUiLogo" json:"team_ui_logo,omitempty"`
	TeamBaseLogo                    *uint64                     `protobuf:"varint,53,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	MatchDisabledUntilDate          *uint32                     `protobuf:"varint,24,opt,name=match_disabled_until_date,json=matchDisabledUntilDate" json:"match_disabled_until_date,omitempty"`
	MatchDisabledAccountId          *uint32                     `protobuf:"varint,25,opt,name=match_disabled_account_id,json=matchDisabledAccountId" json:"match_disabled_account_id,omitempty"`
	MatchmakingMaxRangeMinutes      *uint32                     `protobuf:"varint,26,opt,name=matchmaking_max_range_minutes,json=matchmakingMaxRangeMinutes" json:"matchmaking_max_range_minutes,omitempty"`
	Matchlanguages                  *uint32                     `protobuf:"varint,27,opt,name=matchlanguages" json:"matchlanguages,omitempty"`
	Members                         []*CSODOTAPartyMember       `protobuf:"bytes,29,rep,name=members" json:"members,omitempty"`
	OpenGuildId                     *uint32                     `protobuf:"varint,30,opt,name=open_guild_id,json=openGuildId" json:"open_guild_id,omitempty"`
	CommonGuilds                    []uint32                    `protobuf:"varint,31,rep,name=common_guilds,json=commonGuilds" json:"common_guilds,omitempty"`
	LowPriorityGamesRemaining       *uint32                     `protobuf:"varint,35,opt,name=low_priority_games_remaining,json=lowPriorityGamesRemaining" json:"low_priority_games_remaining,omitempty"`
	OpenForJoinRequests             *bool                       `protobuf:"varint,40,opt,name=open_for_join_requests,json=openForJoinRequests" json:"open_for_join_requests,omitempty"`
	SentInvites                     []*CSODOTAPartyInvite       `protobuf:"bytes,41,rep,name=sent_invites,json=sentInvites" json:"sent_invites,omitempty"`
	RecvInvites                     []*CSODOTAPartyInvite       `protobuf:"bytes,42,rep,name=recv_invites,json=recvInvites" json:"recv_invites,omitempty"`
	AccountFlags                    *uint32                     `protobuf:"varint,43,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	RegionSelectFlags               *uint32                     `protobuf:"varint,44,opt,name=region_select_flags,json=regionSelectFlags" json:"region_select_flags,omitempty"`
	ExclusiveTournamentId           *uint32                     `protobuf:"varint,45,opt,name=exclusive_tournament_id,json=exclusiveTournamentId" json:"exclusive_tournament_id,omitempty"`
	TourneyDivisionId               *uint32                     `protobuf:"varint,47,opt,name=tourney_division_id,json=tourneyDivisionId" json:"tourney_division_id,omitempty"`
	TourneyScheduleTime             *uint32                     `protobuf:"varint,48,opt,name=tourney_schedule_time,json=tourneyScheduleTime" json:"tourney_schedule_time,omitempty"`
	TourneySkillLevel               *uint32                     `protobuf:"varint,49,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBracketRound             *uint32                     `protobuf:"varint,50,opt,name=tourney_bracket_round,json=tourneyBracketRound" json:"tourney_bracket_round,omitempty"`
	TourneyQueueDeadlineTime        *uint32                     `protobuf:"varint,54,opt,name=tourney_queue_deadline_time,json=tourneyQueueDeadlineTime" json:"tourney_queue_deadline_time,omitempty"`
	TourneyQueueDeadlineState       *ETourneyQueueDeadlineState `protobuf:"varint,55,opt,name=tourney_queue_deadline_state,json=tourneyQueueDeadlineState,enum=dota.ETourneyQueueDeadlineState,def=0" json:"tourney_queue_deadline_state,omitempty"`
	PartyBuilderSlotsToFill         *uint32                     `protobuf:"varint,56,opt,name=party_builder_slots_to_fill,json=partyBuilderSlotsToFill" json:"party_builder_slots_to_fill,omitempty"`
	PartyBuilderMatchGroups         *uint32                     `protobuf:"varint,57,opt,name=party_builder_match_groups,json=partyBuilderMatchGroups" json:"party_builder_match_groups,omitempty"`
	PartyBuilderStartTime           *uint32                     `protobuf:"varint,58,opt,name=party_builder_start_time,json=partyBuilderStartTime" json:"party_builder_start_time,omitempty"`
	SoloQueue                       *bool                       `protobuf:"varint,59,opt,name=solo_queue,json=soloQueue" json:"solo_queue,omitempty"`
	BotScriptIndex                  *uint32                     `protobuf:"varint,60,opt,name=bot_script_index,json=botScriptIndex" json:"bot_script_index,omitempty"`
	SteamClanAccountId              *uint32                     `protobuf:"varint,61,opt,name=steam_clan_account_id,json=steamClanAccountId" json:"steam_clan_account_id,omitempty"`
	ReadyCheck                      *CMsgReadyCheckStatus       `protobuf:"bytes,62,opt,name=ready_check,json=readyCheck" json:"ready_check,omitempty"`
	CustomGameDisabledUntilDate     *uint32                     `protobuf:"varint,63,opt,name=custom_game_disabled_until_date,json=customGameDisabledUntilDate" json:"custom_game_disabled_until_date,omitempty"`
	CustomGameDisabledAccountId     *uint32                     `protobuf:"varint,64,opt,name=custom_game_disabled_account_id,json=customGameDisabledAccountId" json:"custom_game_disabled_account_id,omitempty"`
	IsChallengeMatch                *bool                       `protobuf:"varint,65,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	PartySearchBeaconActive         *bool                       `protobuf:"varint,66,opt,name=party_search_beacon_active,json=partySearchBeaconActive" json:"party_search_beacon_active,omitempty"`
	MatchmakingFlags                *uint32                     `protobuf:"varint,67,opt,name=matchmaking_flags,json=matchmakingFlags" json:"matchmaking_flags,omitempty"`
	HighPriorityState               *EHighPriorityMMState       `protobuf:"varint,68,opt,name=high_priority_state,json=highPriorityState,enum=dota.EHighPriorityMMState,def=0" json:"high_priority_state,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}                    `json:"-"`
	XXX_unrecognized                []byte                      `json:"-"`
	XXX_sizecache                   int32                       `json:"-"`
}

func (m *CSODOTAParty) Reset()         { *m = CSODOTAParty{} }
func (m *CSODOTAParty) String() string { return proto.CompactTextString(m) }
func (*CSODOTAParty) ProtoMessage()    {}
func (*CSODOTAParty) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{1}
}

func (m *CSODOTAParty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAParty.Unmarshal(m, b)
}
func (m *CSODOTAParty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAParty.Marshal(b, m, deterministic)
}
func (m *CSODOTAParty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAParty.Merge(m, src)
}
func (m *CSODOTAParty) XXX_Size() int {
	return xxx_messageInfo_CSODOTAParty.Size(m)
}
func (m *CSODOTAParty) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAParty.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAParty proto.InternalMessageInfo

const Default_CSODOTAParty_State CSODOTAParty_State = CSODOTAParty_UI
const Default_CSODOTAParty_MatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CSODOTAParty_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
const Default_CSODOTAParty_TourneyQueueDeadlineState ETourneyQueueDeadlineState = ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Normal
const Default_CSODOTAParty_HighPriorityState EHighPriorityMMState = EHighPriorityMMState_k_EHighPriorityMM_Unknown

func (m *CSODOTAParty) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CSODOTAParty) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTAParty) GetMemberIds() []uint64 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

func (m *CSODOTAParty) GetGameModes() uint32 {
	if m != nil && m.GameModes != nil {
		return *m.GameModes
	}
	return 0
}

func (m *CSODOTAParty) GetState() CSODOTAParty_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTAParty_State
}

func (m *CSODOTAParty) GetEffectiveStartedMatchmakingTime() uint32 {
	if m != nil && m.EffectiveStartedMatchmakingTime != nil {
		return *m.EffectiveStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetRawStartedMatchmakingTime() uint32 {
	if m != nil && m.RawStartedMatchmakingTime != nil {
		return *m.RawStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptStartTime() uint32 {
	if m != nil && m.AttemptStartTime != nil {
		return *m.AttemptStartTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptNum() uint32 {
	if m != nil && m.AttemptNum != nil {
		return *m.AttemptNum
	}
	return 0
}

func (m *CSODOTAParty) GetMatchgroups() uint32 {
	if m != nil && m.Matchgroups != nil {
		return *m.Matchgroups
	}
	return 0
}

func (m *CSODOTAParty) GetLowPriorityAccountId() uint32 {
	if m != nil && m.LowPriorityAccountId != nil {
		return *m.LowPriorityAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return Default_CSODOTAParty_MatchType
}

func (m *CSODOTAParty) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CSODOTAParty_BotDifficulty
}

func (m *CSODOTAParty) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAParty) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CSODOTAParty) GetTeamUiLogo() uint64 {
	if m != nil && m.TeamUiLogo != nil {
		return *m.TeamUiLogo
	}
	return 0
}

func (m *CSODOTAParty) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledUntilDate() uint32 {
	if m != nil && m.MatchDisabledUntilDate != nil {
		return *m.MatchDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledAccountId() uint32 {
	if m != nil && m.MatchDisabledAccountId != nil {
		return *m.MatchDisabledAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchmakingMaxRangeMinutes() uint32 {
	if m != nil && m.MatchmakingMaxRangeMinutes != nil {
		return *m.MatchmakingMaxRangeMinutes
	}
	return 0
}

func (m *CSODOTAParty) GetMatchlanguages() uint32 {
	if m != nil && m.Matchlanguages != nil {
		return *m.Matchlanguages
	}
	return 0
}

func (m *CSODOTAParty) GetMembers() []*CSODOTAPartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAParty) GetOpenGuildId() uint32 {
	if m != nil && m.OpenGuildId != nil {
		return *m.OpenGuildId
	}
	return 0
}

func (m *CSODOTAParty) GetCommonGuilds() []uint32 {
	if m != nil {
		return m.CommonGuilds
	}
	return nil
}

func (m *CSODOTAParty) GetLowPriorityGamesRemaining() uint32 {
	if m != nil && m.LowPriorityGamesRemaining != nil {
		return *m.LowPriorityGamesRemaining
	}
	return 0
}

func (m *CSODOTAParty) GetOpenForJoinRequests() bool {
	if m != nil && m.OpenForJoinRequests != nil {
		return *m.OpenForJoinRequests
	}
	return false
}

func (m *CSODOTAParty) GetSentInvites() []*CSODOTAPartyInvite {
	if m != nil {
		return m.SentInvites
	}
	return nil
}

func (m *CSODOTAParty) GetRecvInvites() []*CSODOTAPartyInvite {
	if m != nil {
		return m.RecvInvites
	}
	return nil
}

func (m *CSODOTAParty) GetAccountFlags() uint32 {
	if m != nil && m.AccountFlags != nil {
		return *m.AccountFlags
	}
	return 0
}

func (m *CSODOTAParty) GetRegionSelectFlags() uint32 {
	if m != nil && m.RegionSelectFlags != nil {
		return *m.RegionSelectFlags
	}
	return 0
}

func (m *CSODOTAParty) GetExclusiveTournamentId() uint32 {
	if m != nil && m.ExclusiveTournamentId != nil {
		return *m.ExclusiveTournamentId
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyDivisionId() uint32 {
	if m != nil && m.TourneyDivisionId != nil {
		return *m.TourneyDivisionId
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyScheduleTime() uint32 {
	if m != nil && m.TourneyScheduleTime != nil {
		return *m.TourneyScheduleTime
	}
	return 0
}

func (m *CSODOTAParty) GetTourneySkillLevel() uint32 {
	if m != nil && m.TourneySkillLevel != nil {
		return *m.TourneySkillLevel
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyBracketRound() uint32 {
	if m != nil && m.TourneyBracketRound != nil {
		return *m.TourneyBracketRound
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyQueueDeadlineTime() uint32 {
	if m != nil && m.TourneyQueueDeadlineTime != nil {
		return *m.TourneyQueueDeadlineTime
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyQueueDeadlineState() ETourneyQueueDeadlineState {
	if m != nil && m.TourneyQueueDeadlineState != nil {
		return *m.TourneyQueueDeadlineState
	}
	return Default_CSODOTAParty_TourneyQueueDeadlineState
}

func (m *CSODOTAParty) GetPartyBuilderSlotsToFill() uint32 {
	if m != nil && m.PartyBuilderSlotsToFill != nil {
		return *m.PartyBuilderSlotsToFill
	}
	return 0
}

func (m *CSODOTAParty) GetPartyBuilderMatchGroups() uint32 {
	if m != nil && m.PartyBuilderMatchGroups != nil {
		return *m.PartyBuilderMatchGroups
	}
	return 0
}

func (m *CSODOTAParty) GetPartyBuilderStartTime() uint32 {
	if m != nil && m.PartyBuilderStartTime != nil {
		return *m.PartyBuilderStartTime
	}
	return 0
}

func (m *CSODOTAParty) GetSoloQueue() bool {
	if m != nil && m.SoloQueue != nil {
		return *m.SoloQueue
	}
	return false
}

func (m *CSODOTAParty) GetBotScriptIndex() uint32 {
	if m != nil && m.BotScriptIndex != nil {
		return *m.BotScriptIndex
	}
	return 0
}

func (m *CSODOTAParty) GetSteamClanAccountId() uint32 {
	if m != nil && m.SteamClanAccountId != nil {
		return *m.SteamClanAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetReadyCheck() *CMsgReadyCheckStatus {
	if m != nil {
		return m.ReadyCheck
	}
	return nil
}

func (m *CSODOTAParty) GetCustomGameDisabledUntilDate() uint32 {
	if m != nil && m.CustomGameDisabledUntilDate != nil {
		return *m.CustomGameDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAParty) GetCustomGameDisabledAccountId() uint32 {
	if m != nil && m.CustomGameDisabledAccountId != nil {
		return *m.CustomGameDisabledAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetIsChallengeMatch() bool {
	if m != nil && m.IsChallengeMatch != nil {
		return *m.IsChallengeMatch
	}
	return false
}

func (m *CSODOTAParty) GetPartySearchBeaconActive() bool {
	if m != nil && m.PartySearchBeaconActive != nil {
		return *m.PartySearchBeaconActive
	}
	return false
}

func (m *CSODOTAParty) GetMatchmakingFlags() uint32 {
	if m != nil && m.MatchmakingFlags != nil {
		return *m.MatchmakingFlags
	}
	return 0
}

func (m *CSODOTAParty) GetHighPriorityState() EHighPriorityMMState {
	if m != nil && m.HighPriorityState != nil {
		return *m.HighPriorityState
	}
	return Default_CSODOTAParty_HighPriorityState
}

type CSODOTAPartyInvite struct {
	GroupId              *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId             *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName           *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members              []*CSODOTAPartyInvite_PartyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	TeamId               *uint32                           `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	LowPriorityStatus    *bool                             `protobuf:"varint,6,opt,name=low_priority_status,json=lowPriorityStatus" json:"low_priority_status,omitempty"`
	AsCoach              *bool                             `protobuf:"varint,7,opt,name=as_coach,json=asCoach" json:"as_coach,omitempty"`
	InviteGid            *uint64                           `protobuf:"fixed64,8,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CSODOTAPartyInvite) Reset()         { *m = CSODOTAPartyInvite{} }
func (m *CSODOTAPartyInvite) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite) ProtoMessage()    {}
func (*CSODOTAPartyInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{2}
}

func (m *CSODOTAPartyInvite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAPartyInvite.Unmarshal(m, b)
}
func (m *CSODOTAPartyInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAPartyInvite.Marshal(b, m, deterministic)
}
func (m *CSODOTAPartyInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAPartyInvite.Merge(m, src)
}
func (m *CSODOTAPartyInvite) XXX_Size() int {
	return xxx_messageInfo_CSODOTAPartyInvite.Size(m)
}
func (m *CSODOTAPartyInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAPartyInvite.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAPartyInvite proto.InternalMessageInfo

func (m *CSODOTAPartyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTAPartyInvite) GetMembers() []*CSODOTAPartyInvite_PartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAPartyInvite) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetLowPriorityStatus() bool {
	if m != nil && m.LowPriorityStatus != nil {
		return *m.LowPriorityStatus
	}
	return false
}

func (m *CSODOTAPartyInvite) GetAsCoach() bool {
	if m != nil && m.AsCoach != nil {
		return *m.AsCoach
	}
	return false
}

func (m *CSODOTAPartyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

type CSODOTAPartyInvite_PartyMember struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId              *uint64  `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	IsCoach              *bool    `protobuf:"varint,4,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTAPartyInvite_PartyMember) Reset()         { *m = CSODOTAPartyInvite_PartyMember{} }
func (m *CSODOTAPartyInvite_PartyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite_PartyMember) ProtoMessage()    {}
func (*CSODOTAPartyInvite_PartyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{2, 0}
}

func (m *CSODOTAPartyInvite_PartyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAPartyInvite_PartyMember.Unmarshal(m, b)
}
func (m *CSODOTAPartyInvite_PartyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAPartyInvite_PartyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTAPartyInvite_PartyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAPartyInvite_PartyMember.Merge(m, src)
}
func (m *CSODOTAPartyInvite_PartyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTAPartyInvite_PartyMember.Size(m)
}
func (m *CSODOTAPartyInvite_PartyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAPartyInvite_PartyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAPartyInvite_PartyMember proto.InternalMessageInfo

func (m *CSODOTAPartyInvite_PartyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTAPartyInvite_PartyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CSODOTAPartyInvite_PartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

type CSODOTALobbyInvite struct {
	GroupId              *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId             *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName           *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members              []*CSODOTALobbyInvite_LobbyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	CustomGameId         *uint64                           `protobuf:"varint,5,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	InviteGid            *uint64                           `protobuf:"fixed64,6,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	CustomGameCrc        *uint64                           `protobuf:"fixed64,7,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp  *uint32                           `protobuf:"fixed32,8,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CSODOTALobbyInvite) Reset()         { *m = CSODOTALobbyInvite{} }
func (m *CSODOTALobbyInvite) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite) ProtoMessage()    {}
func (*CSODOTALobbyInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{3}
}

func (m *CSODOTALobbyInvite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobbyInvite.Unmarshal(m, b)
}
func (m *CSODOTALobbyInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobbyInvite.Marshal(b, m, deterministic)
}
func (m *CSODOTALobbyInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobbyInvite.Merge(m, src)
}
func (m *CSODOTALobbyInvite) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobbyInvite.Size(m)
}
func (m *CSODOTALobbyInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobbyInvite.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobbyInvite proto.InternalMessageInfo

func (m *CSODOTALobbyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTALobbyInvite) GetMembers() []*CSODOTALobbyInvite_LobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobbyInvite) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

type CSODOTALobbyInvite_LobbyMember struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId              *uint64  `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTALobbyInvite_LobbyMember) Reset()         { *m = CSODOTALobbyInvite_LobbyMember{} }
func (m *CSODOTALobbyInvite_LobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite_LobbyMember) ProtoMessage()    {}
func (*CSODOTALobbyInvite_LobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{3, 0}
}

func (m *CSODOTALobbyInvite_LobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Unmarshal(m, b)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Merge(m, src)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Size(m)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobbyInvite_LobbyMember proto.InternalMessageInfo

func (m *CSODOTALobbyInvite_LobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTALobbyInvite_LobbyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

type CMsgLeaverState struct {
	LobbyState           *uint32         `protobuf:"varint,1,opt,name=lobby_state,json=lobbyState" json:"lobby_state,omitempty"`
	GameState            *DOTA_GameState `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=dota.DOTA_GameState,def=0" json:"game_state,omitempty"`
	LeaverDetected       *bool           `protobuf:"varint,3,opt,name=leaver_detected,json=leaverDetected" json:"leaver_detected,omitempty"`
	FirstBloodHappened   *bool           `protobuf:"varint,4,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	DiscardMatchResults  *bool           `protobuf:"varint,5,opt,name=discard_match_results,json=discardMatchResults" json:"discard_match_results,omitempty"`
	MassDisconnect       *bool           `protobuf:"varint,6,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CMsgLeaverState) Reset()         { *m = CMsgLeaverState{} }
func (m *CMsgLeaverState) String() string { return proto.CompactTextString(m) }
func (*CMsgLeaverState) ProtoMessage()    {}
func (*CMsgLeaverState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{4}
}

func (m *CMsgLeaverState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLeaverState.Unmarshal(m, b)
}
func (m *CMsgLeaverState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLeaverState.Marshal(b, m, deterministic)
}
func (m *CMsgLeaverState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLeaverState.Merge(m, src)
}
func (m *CMsgLeaverState) XXX_Size() int {
	return xxx_messageInfo_CMsgLeaverState.Size(m)
}
func (m *CMsgLeaverState) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLeaverState.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLeaverState proto.InternalMessageInfo

const Default_CMsgLeaverState_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT

func (m *CMsgLeaverState) GetLobbyState() uint32 {
	if m != nil && m.LobbyState != nil {
		return *m.LobbyState
	}
	return 0
}

func (m *CMsgLeaverState) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CMsgLeaverState_GameState
}

func (m *CMsgLeaverState) GetLeaverDetected() bool {
	if m != nil && m.LeaverDetected != nil {
		return *m.LeaverDetected
	}
	return false
}

func (m *CMsgLeaverState) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CMsgLeaverState) GetDiscardMatchResults() bool {
	if m != nil && m.DiscardMatchResults != nil {
		return *m.DiscardMatchResults
	}
	return false
}

func (m *CMsgLeaverState) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

type CDOTALobbyMember struct {
	Id                     *uint64                                     `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId                 *uint32                                     `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Team                   *DOTA_GC_TEAM                               `protobuf:"varint,3,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name                   *string                                     `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Slot                   *uint32                                     `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	PartyId                *uint64                                     `protobuf:"varint,12,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	MetaLevel              *uint32                                     `protobuf:"varint,13,opt,name=meta_level,json=metaLevel" json:"meta_level,omitempty"`
	MetaXp                 *uint32                                     `protobuf:"varint,14,opt,name=meta_xp,json=metaXp" json:"meta_xp,omitempty"`
	MetaXpAwarded          *uint32                                     `protobuf:"varint,15,opt,name=meta_xp_awarded,json=metaXpAwarded" json:"meta_xp_awarded,omitempty"`
	LeaverStatus           *DOTALeaverStatusT                          `protobuf:"varint,16,opt,name=leaver_status,json=leaverStatus,enum=dota.DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions          *uint32                                     `protobuf:"varint,28,opt,name=leaver_actions,json=leaverActions" json:"leaver_actions,omitempty"`
	Channel                *uint32                                     `protobuf:"varint,17,opt,name=channel,def=6" json:"channel,omitempty"`
	PrizeDefIndex          *uint32                                     `protobuf:"varint,18,opt,name=prize_def_index,json=prizeDefIndex" json:"prize_def_index,omitempty"`
	DisabledHeroId         []uint32                                    `protobuf:"varint,20,rep,name=disabled_hero_id,json=disabledHeroId" json:"disabled_hero_id,omitempty"`
	PartnerAccountType     *PartnerAccountType                         `protobuf:"varint,21,opt,name=partner_account_type,json=partnerAccountType,enum=dota.PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	EnabledHeroId          []uint32                                    `protobuf:"varint,22,rep,name=enabled_hero_id,json=enabledHeroId" json:"enabled_hero_id,omitempty"`
	CoachTeam              *DOTA_GC_TEAM                               `protobuf:"varint,23,opt,name=coach_team,json=coachTeam,enum=dota.DOTA_GC_TEAM,def=5" json:"coach_team,omitempty"`
	CoachRating            *uint32                                     `protobuf:"varint,42,opt,name=coach_rating,json=coachRating" json:"coach_rating,omitempty"`
	PwrdCyberCafeId        *uint32                                     `protobuf:"varint,24,opt,name=pwrd_cyber_cafe_id,json=pwrdCyberCafeId" json:"pwrd_cyber_cafe_id,omitempty"`
	PwrdCyberCafeName      *string                                     `protobuf:"bytes,25,opt,name=pwrd_cyber_cafe_name,json=pwrdCyberCafeName" json:"pwrd_cyber_cafe_name,omitempty"`
	DisabledRandomHeroId   []uint32                                    `protobuf:"varint,26,rep,packed,name=disabled_random_hero_id,json=disabledRandomHeroId" json:"disabled_random_hero_id,omitempty"`
	DisabledRandomHeroBits []uint32                                    `protobuf:"fixed32,41,rep,name=disabled_random_hero_bits,json=disabledRandomHeroBits" json:"disabled_random_hero_bits,omitempty"`
	XpBonuses              []*CDOTALobbyMember_CDOTALobbyMemberXPBonus `protobuf:"bytes,27,rep,name=xp_bonuses,json=xpBonuses" json:"xp_bonuses,omitempty"`
	RankChange             *int32                                      `protobuf:"zigzag32,29,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	Cameraman              *bool                                       `protobuf:"varint,30,opt,name=cameraman" json:"cameraman,omitempty"`
	CustomGameProductIds   []uint32                                    `protobuf:"varint,31,rep,name=custom_game_product_ids,json=customGameProductIds" json:"custom_game_product_ids,omitempty"`
	LobbyMvpVoteAccountId  *uint32                                     `protobuf:"varint,32,opt,name=lobby_mvp_vote_account_id,json=lobbyMvpVoteAccountId" json:"lobby_mvp_vote_account_id,omitempty"`
	SearchMatchType        *MatchType                                  `protobuf:"varint,33,opt,name=search_match_type,json=searchMatchType,enum=dota.MatchType,def=0" json:"search_match_type,omitempty"`
	FavoriteTeamPacked     *uint64                                     `protobuf:"varint,35,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	IsPlusSubscriber       *bool                                       `protobuf:"varint,36,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	RankTierUpdated        *bool                                       `protobuf:"varint,37,opt,name=rank_tier_updated,json=rankTierUpdated" json:"rank_tier_updated,omitempty"`
	LaneSelectionFlags     *uint32                                     `protobuf:"varint,38,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	CanEarnRewards         *bool                                       `protobuf:"varint,39,opt,name=can_earn_rewards,json=canEarnRewards" json:"can_earn_rewards,omitempty"`
	LiveSpectatorTeam      *DOTA_GC_TEAM                               `protobuf:"varint,40,opt,name=live_spectator_team,json=liveSpectatorTeam,enum=dota.DOTA_GC_TEAM,def=5" json:"live_spectator_team,omitempty"`
	WasMvpLastGame         *bool                                       `protobuf:"varint,43,opt,name=was_mvp_last_game,json=wasMvpLastGame" json:"was_mvp_last_game,omitempty"`
	PendingAwards          []*CMsgPendingEventAward                    `protobuf:"bytes,44,rep,name=pending_awards,json=pendingAwards" json:"pending_awards,omitempty"`
	PendingAwardsOnVictory []*CMsgPendingEventAward                    `protobuf:"bytes,45,rep,name=pending_awards_on_victory,json=pendingAwardsOnVictory" json:"pending_awards_on_victory,omitempty"`
	RankMmrBoostType       *EDOTAMMRBoostType                          `protobuf:"varint,46,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=dota.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	QueuePointAdjustment   *int32                                      `protobuf:"zigzag32,47,opt,name=queue_point_adjustment,json=queuePointAdjustment" json:"queue_point_adjustment,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                    `json:"-"`
	XXX_unrecognized       []byte                                      `json:"-"`
	XXX_sizecache          int32                                       `json:"-"`
}

func (m *CDOTALobbyMember) Reset()         { *m = CDOTALobbyMember{} }
func (m *CDOTALobbyMember) String() string { return proto.CompactTextString(m) }
func (*CDOTALobbyMember) ProtoMessage()    {}
func (*CDOTALobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{5}
}

func (m *CDOTALobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTALobbyMember.Unmarshal(m, b)
}
func (m *CDOTALobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTALobbyMember.Marshal(b, m, deterministic)
}
func (m *CDOTALobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTALobbyMember.Merge(m, src)
}
func (m *CDOTALobbyMember) XXX_Size() int {
	return xxx_messageInfo_CDOTALobbyMember.Size(m)
}
func (m *CDOTALobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTALobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTALobbyMember proto.InternalMessageInfo

const Default_CDOTALobbyMember_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CDOTALobbyMember_LeaverStatus DOTALeaverStatusT = DOTALeaverStatusT_DOTA_LEAVER_NONE
const Default_CDOTALobbyMember_Channel uint32 = 6
const Default_CDOTALobbyMember_PartnerAccountType PartnerAccountType = PartnerAccountType_PARTNER_NONE
const Default_CDOTALobbyMember_CoachTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
const Default_CDOTALobbyMember_SearchMatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CDOTALobbyMember_LiveSpectatorTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
const Default_CDOTALobbyMember_RankMmrBoostType EDOTAMMRBoostType = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None

func (m *CDOTALobbyMember) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CDOTALobbyMember) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CDOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CDOTALobbyMember_Team
}

func (m *CDOTALobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CDOTALobbyMember) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CDOTALobbyMember) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaLevel() uint32 {
	if m != nil && m.MetaLevel != nil {
		return *m.MetaLevel
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaXp() uint32 {
	if m != nil && m.MetaXp != nil {
		return *m.MetaXp
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaXpAwarded() uint32 {
	if m != nil && m.MetaXpAwarded != nil {
		return *m.MetaXpAwarded
	}
	return 0
}

func (m *CDOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if m != nil && m.LeaverStatus != nil {
		return *m.LeaverStatus
	}
	return Default_CDOTALobbyMember_LeaverStatus
}

func (m *CDOTALobbyMember) GetLeaverActions() uint32 {
	if m != nil && m.LeaverActions != nil {
		return *m.LeaverActions
	}
	return 0
}

func (m *CDOTALobbyMember) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return Default_CDOTALobbyMember_Channel
}

func (m *CDOTALobbyMember) GetPrizeDefIndex() uint32 {
	if m != nil && m.PrizeDefIndex != nil {
		return *m.PrizeDefIndex
	}
	return 0
}

func (m *CDOTALobbyMember) GetDisabledHeroId() []uint32 {
	if m != nil {
		return m.DisabledHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetPartnerAccountType() PartnerAccountType {
	if m != nil && m.PartnerAccountType != nil {
		return *m.PartnerAccountType
	}
	return Default_CDOTALobbyMember_PartnerAccountType
}

func (m *CDOTALobbyMember) GetEnabledHeroId() []uint32 {
	if m != nil {
		return m.EnabledHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if m != nil && m.CoachTeam != nil {
		return *m.CoachTeam
	}
	return Default_CDOTALobbyMember_CoachTeam
}

func (m *CDOTALobbyMember) GetCoachRating() uint32 {
	if m != nil && m.CoachRating != nil {
		return *m.CoachRating
	}
	return 0
}

func (m *CDOTALobbyMember) GetPwrdCyberCafeId() uint32 {
	if m != nil && m.PwrdCyberCafeId != nil {
		return *m.PwrdCyberCafeId
	}
	return 0
}

func (m *CDOTALobbyMember) GetPwrdCyberCafeName() string {
	if m != nil && m.PwrdCyberCafeName != nil {
		return *m.PwrdCyberCafeName
	}
	return ""
}

func (m *CDOTALobbyMember) GetDisabledRandomHeroId() []uint32 {
	if m != nil {
		return m.DisabledRandomHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetDisabledRandomHeroBits() []uint32 {
	if m != nil {
		return m.DisabledRandomHeroBits
	}
	return nil
}

func (m *CDOTALobbyMember) GetXpBonuses() []*CDOTALobbyMember_CDOTALobbyMemberXPBonus {
	if m != nil {
		return m.XpBonuses
	}
	return nil
}

func (m *CDOTALobbyMember) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CDOTALobbyMember) GetCameraman() bool {
	if m != nil && m.Cameraman != nil {
		return *m.Cameraman
	}
	return false
}

func (m *CDOTALobbyMember) GetCustomGameProductIds() []uint32 {
	if m != nil {
		return m.CustomGameProductIds
	}
	return nil
}

func (m *CDOTALobbyMember) GetLobbyMvpVoteAccountId() uint32 {
	if m != nil && m.LobbyMvpVoteAccountId != nil {
		return *m.LobbyMvpVoteAccountId
	}
	return 0
}

func (m *CDOTALobbyMember) GetSearchMatchType() MatchType {
	if m != nil && m.SearchMatchType != nil {
		return *m.SearchMatchType
	}
	return Default_CDOTALobbyMember_SearchMatchType
}

func (m *CDOTALobbyMember) GetFavoriteTeamPacked() uint64 {
	if m != nil && m.FavoriteTeamPacked != nil {
		return *m.FavoriteTeamPacked
	}
	return 0
}

func (m *CDOTALobbyMember) GetIsPlusSubscriber() bool {
	if m != nil && m.IsPlusSubscriber != nil {
		return *m.IsPlusSubscriber
	}
	return false
}

func (m *CDOTALobbyMember) GetRankTierUpdated() bool {
	if m != nil && m.RankTierUpdated != nil {
		return *m.RankTierUpdated
	}
	return false
}

func (m *CDOTALobbyMember) GetLaneSelectionFlags() uint32 {
	if m != nil && m.LaneSelectionFlags != nil {
		return *m.LaneSelectionFlags
	}
	return 0
}

func (m *CDOTALobbyMember) GetCanEarnRewards() bool {
	if m != nil && m.CanEarnRewards != nil {
		return *m.CanEarnRewards
	}
	return false
}

func (m *CDOTALobbyMember) GetLiveSpectatorTeam() DOTA_GC_TEAM {
	if m != nil && m.LiveSpectatorTeam != nil {
		return *m.LiveSpectatorTeam
	}
	return Default_CDOTALobbyMember_LiveSpectatorTeam
}

func (m *CDOTALobbyMember) GetWasMvpLastGame() bool {
	if m != nil && m.WasMvpLastGame != nil {
		return *m.WasMvpLastGame
	}
	return false
}

func (m *CDOTALobbyMember) GetPendingAwards() []*CMsgPendingEventAward {
	if m != nil {
		return m.PendingAwards
	}
	return nil
}

func (m *CDOTALobbyMember) GetPendingAwardsOnVictory() []*CMsgPendingEventAward {
	if m != nil {
		return m.PendingAwardsOnVictory
	}
	return nil
}

func (m *CDOTALobbyMember) GetRankMmrBoostType() EDOTAMMRBoostType {
	if m != nil && m.RankMmrBoostType != nil {
		return *m.RankMmrBoostType
	}
	return Default_CDOTALobbyMember_RankMmrBoostType
}

func (m *CDOTALobbyMember) GetQueuePointAdjustment() int32 {
	if m != nil && m.QueuePointAdjustment != nil {
		return *m.QueuePointAdjustment
	}
	return 0
}

type CDOTALobbyMember_CDOTALobbyMemberXPBonus struct {
	Type                 *uint32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	XpBonus              *float32 `protobuf:"fixed32,2,opt,name=xp_bonus,json=xpBonus" json:"xp_bonus,omitempty"`
	SourceKey            *uint64  `protobuf:"varint,3,opt,name=source_key,json=sourceKey" json:"source_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) Reset() {
	*m = CDOTALobbyMember_CDOTALobbyMemberXPBonus{}
}
func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) String() string { return proto.CompactTextString(m) }
func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) ProtoMessage()    {}
func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{5, 0}
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTALobbyMember_CDOTALobbyMemberXPBonus.Unmarshal(m, b)
}
func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTALobbyMember_CDOTALobbyMemberXPBonus.Marshal(b, m, deterministic)
}
func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTALobbyMember_CDOTALobbyMemberXPBonus.Merge(m, src)
}
func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) XXX_Size() int {
	return xxx_messageInfo_CDOTALobbyMember_CDOTALobbyMemberXPBonus.Size(m)
}
func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTALobbyMember_CDOTALobbyMemberXPBonus.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTALobbyMember_CDOTALobbyMemberXPBonus proto.InternalMessageInfo

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetXpBonus() float32 {
	if m != nil && m.XpBonus != nil {
		return *m.XpBonus
	}
	return 0
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetSourceKey() uint64 {
	if m != nil && m.SourceKey != nil {
		return *m.SourceKey
	}
	return 0
}

type CLobbyTeamDetails struct {
	TeamName                   *string  `protobuf:"bytes,1,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag                    *string  `protobuf:"bytes,3,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamId                     *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamLogo                   *uint64  `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamBaseLogo               *uint64  `protobuf:"varint,6,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamBannerLogo             *uint64  `protobuf:"varint,7,opt,name=team_banner_logo,json=teamBannerLogo" json:"team_banner_logo,omitempty"`
	TeamComplete               *bool    `protobuf:"varint,8,opt,name=team_complete,json=teamComplete" json:"team_complete,omitempty"`
	TeamLogoUrl                *string  `protobuf:"bytes,20,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	GuildName                  *string  `protobuf:"bytes,9,opt,name=guild_name,json=guildName" json:"guild_name,omitempty"`
	GuildTag                   *string  `protobuf:"bytes,10,opt,name=guild_tag,json=guildTag" json:"guild_tag,omitempty"`
	GuildId                    *uint32  `protobuf:"varint,11,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildLogo                  *uint64  `protobuf:"varint,12,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildBaseLogo              *uint64  `protobuf:"varint,13,opt,name=guild_base_logo,json=guildBaseLogo" json:"guild_base_logo,omitempty"`
	GuildBannerLogo            *uint64  `protobuf:"varint,14,opt,name=guild_banner_logo,json=guildBannerLogo" json:"guild_banner_logo,omitempty"`
	Rank                       *uint32  `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange                 *int32   `protobuf:"zigzag32,16,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	IsHomeTeam                 *bool    `protobuf:"varint,17,opt,name=is_home_team,json=isHomeTeam" json:"is_home_team,omitempty"`
	IsChallengeMatch           *bool    `protobuf:"varint,18,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	ChallengeMatchTokenAccount *uint64  `protobuf:"varint,19,opt,name=challenge_match_token_account,json=challengeMatchTokenAccount" json:"challenge_match_token_account,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *CLobbyTeamDetails) Reset()         { *m = CLobbyTeamDetails{} }
func (m *CLobbyTeamDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyTeamDetails) ProtoMessage()    {}
func (*CLobbyTeamDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{6}
}

func (m *CLobbyTeamDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyTeamDetails.Unmarshal(m, b)
}
func (m *CLobbyTeamDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyTeamDetails.Marshal(b, m, deterministic)
}
func (m *CLobbyTeamDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyTeamDetails.Merge(m, src)
}
func (m *CLobbyTeamDetails) XXX_Size() int {
	return xxx_messageInfo_CLobbyTeamDetails.Size(m)
}
func (m *CLobbyTeamDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyTeamDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyTeamDetails proto.InternalMessageInfo

func (m *CLobbyTeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if m != nil && m.TeamBannerLogo != nil {
		return *m.TeamBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamComplete() bool {
	if m != nil && m.TeamComplete != nil {
		return *m.TeamComplete
	}
	return false
}

func (m *CLobbyTeamDetails) GetTeamLogoUrl() string {
	if m != nil && m.TeamLogoUrl != nil {
		return *m.TeamLogoUrl
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildName() string {
	if m != nil && m.GuildName != nil {
		return *m.GuildName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildTag() string {
	if m != nil && m.GuildTag != nil {
		return *m.GuildTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildBaseLogo() uint64 {
	if m != nil && m.GuildBaseLogo != nil {
		return *m.GuildBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildBannerLogo() uint64 {
	if m != nil && m.GuildBannerLogo != nil {
		return *m.GuildBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CLobbyTeamDetails) GetIsHomeTeam() bool {
	if m != nil && m.IsHomeTeam != nil {
		return *m.IsHomeTeam
	}
	return false
}

func (m *CLobbyTeamDetails) GetIsChallengeMatch() bool {
	if m != nil && m.IsChallengeMatch != nil {
		return *m.IsChallengeMatch
	}
	return false
}

func (m *CLobbyTeamDetails) GetChallengeMatchTokenAccount() uint64 {
	if m != nil && m.ChallengeMatchTokenAccount != nil {
		return *m.ChallengeMatchTokenAccount
	}
	return 0
}

type CLobbyTimedRewardDetails struct {
	ItemDefIndex         *uint32  `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	IsSupplyCrate        *bool    `protobuf:"varint,3,opt,name=is_supply_crate,json=isSupplyCrate" json:"is_supply_crate,omitempty"`
	IsTimedDrop          *bool    `protobuf:"varint,4,opt,name=is_timed_drop,json=isTimedDrop" json:"is_timed_drop,omitempty"`
	AccountId            *uint32  `protobuf:"varint,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Origin               *uint32  `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLobbyTimedRewardDetails) Reset()         { *m = CLobbyTimedRewardDetails{} }
func (m *CLobbyTimedRewardDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyTimedRewardDetails) ProtoMessage()    {}
func (*CLobbyTimedRewardDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{7}
}

func (m *CLobbyTimedRewardDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Unmarshal(m, b)
}
func (m *CLobbyTimedRewardDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Marshal(b, m, deterministic)
}
func (m *CLobbyTimedRewardDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyTimedRewardDetails.Merge(m, src)
}
func (m *CLobbyTimedRewardDetails) XXX_Size() int {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Size(m)
}
func (m *CLobbyTimedRewardDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyTimedRewardDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyTimedRewardDetails proto.InternalMessageInfo

func (m *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if m != nil && m.ItemDefIndex != nil {
		return *m.ItemDefIndex
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if m != nil && m.IsSupplyCrate != nil {
		return *m.IsSupplyCrate
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if m != nil && m.IsTimedDrop != nil {
		return *m.IsTimedDrop
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetOrigin() uint32 {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	ChannelId            *uint32  `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CountryCode          *string  `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description          *string  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode         *string  `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLobbyBroadcastChannelInfo) Reset()         { *m = CLobbyBroadcastChannelInfo{} }
func (m *CLobbyBroadcastChannelInfo) String() string { return proto.CompactTextString(m) }
func (*CLobbyBroadcastChannelInfo) ProtoMessage()    {}
func (*CLobbyBroadcastChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{8}
}

func (m *CLobbyBroadcastChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Unmarshal(m, b)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Marshal(b, m, deterministic)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyBroadcastChannelInfo.Merge(m, src)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Size() int {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Size(m)
}
func (m *CLobbyBroadcastChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyBroadcastChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyBroadcastChannelInfo proto.InternalMessageInfo

func (m *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetLanguageCode() string {
	if m != nil && m.LanguageCode != nil {
		return *m.LanguageCode
	}
	return ""
}

type CSODOTALobby struct {
	LobbyId                                    *uint64                       `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Members                                    []*CDOTALobbyMember           `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	LeftMembers                                []*CDOTALobbyMember           `protobuf:"bytes,7,rep,name=left_members,json=leftMembers" json:"left_members,omitempty"`
	LeaderId                                   *uint64                       `protobuf:"fixed64,11,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	ServerId                                   *uint64                       `protobuf:"fixed64,6,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"`
	GameMode                                   *uint32                       `protobuf:"varint,3,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PendingInvites                             []uint64                      `protobuf:"fixed64,10,rep,name=pending_invites,json=pendingInvites" json:"pending_invites,omitempty"`
	State                                      *CSODOTALobby_State           `protobuf:"varint,4,opt,name=state,enum=dota.CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect                                    *string                       `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType                                  *CSODOTALobby_LobbyType       `protobuf:"varint,12,opt,name=lobby_type,json=lobbyType,enum=dota.CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats                                *bool                         `protobuf:"varint,13,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots                               *bool                         `protobuf:"varint,14,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	IntroMode                                  *bool                         `protobuf:"varint,15,opt,name=intro_mode,json=introMode" json:"intro_mode,omitempty"`
	GameName                                   *string                       `protobuf:"bytes,16,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails                                []*CLobbyTeamDetails          `protobuf:"bytes,17,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	TutorialLesson                             *uint32                       `protobuf:"varint,18,opt,name=tutorial_lesson,json=tutorialLesson" json:"tutorial_lesson,omitempty"`
	TournamentId                               *uint32                       `protobuf:"varint,19,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId                           *uint32                       `protobuf:"varint,20,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	ServerRegion                               *uint32                       `protobuf:"varint,21,opt,name=server_region,json=serverRegion,def=0" json:"server_region,omitempty"`
	GameState                                  *DOTA_GameState               `protobuf:"varint,22,opt,name=game_state,json=gameState,enum=dota.DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators                              *uint32                       `protobuf:"varint,23,opt,name=num_spectators,json=numSpectators" json:"num_spectators,omitempty"`
	Matchgroup                                 *uint32                       `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick                                     *DOTA_CM_PICK                 `protobuf:"varint,28,opt,name=cm_pick,json=cmPick,enum=dota.DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId                                    *uint64                       `protobuf:"varint,30,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AllowSpectating                            *bool                         `protobuf:"varint,31,opt,name=allow_spectating,json=allowSpectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficultyRadiant                       *DOTABotDifficulty            `protobuf:"varint,36,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=dota.DOTABotDifficulty,def=3" json:"bot_difficulty_radiant,omitempty"`
	GameVersion                                *DOTAGameVersion              `protobuf:"varint,37,opt,name=game_version,json=gameVersion,enum=dota.DOTAGameVersion,def=0" json:"game_version,omitempty"`
	TimedRewardDetails                         []*CLobbyTimedRewardDetails   `protobuf:"bytes,38,rep,name=timed_reward_details,json=timedRewardDetails" json:"timed_reward_details,omitempty"`
	PassKey                                    *string                       `protobuf:"bytes,39,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                                   *uint32                       `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant                        *uint32                       `protobuf:"varint,43,opt,name=penalty_level_radiant,json=penaltyLevelRadiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire                           *uint32                       `protobuf:"varint,44,opt,name=penalty_level_dire,json=penaltyLevelDire,def=0" json:"penalty_level_dire,omitempty"`
	LoadGameId                                 *uint32                       `protobuf:"varint,45,opt,name=load_game_id,json=loadGameId" json:"load_game_id,omitempty"`
	SeriesType                                 *uint32                       `protobuf:"varint,46,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins                          *uint32                       `protobuf:"varint,47,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins                             *uint32                       `protobuf:"varint,48,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	LootGenerated                              *uint32                       `protobuf:"varint,49,opt,name=loot_generated,json=lootGenerated" json:"loot_generated,omitempty"`
	LootAwarded                                *uint32                       `protobuf:"varint,50,opt,name=loot_awarded,json=lootAwarded" json:"loot_awarded,omitempty"`
	Allchat                                    *bool                         `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                                *LobbyDotaTVDelay             `protobuf:"varint,53,opt,name=dota_tv_delay,json=dotaTvDelay,enum=dota.LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode                             *string                       `protobuf:"bytes,54,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName                              *string                       `protobuf:"bytes,55,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty                           *uint32                       `protobuf:"varint,56,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	Lan                                        *bool                         `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo                       []*CLobbyBroadcastChannelInfo `protobuf:"bytes,58,rep,name=broadcast_channel_info,json=broadcastChannelInfo" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid                       *uint32                       `protobuf:"varint,59,opt,name=first_leaver_accountid,json=firstLeaverAccountid" json:"first_leaver_accountid,omitempty"`
	SeriesId                                   *uint32                       `protobuf:"varint,60,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	LowPriority                                *bool                         `protobuf:"varint,61,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	ExtraMessages                              []*CSODOTALobby_CExtraMsg     `protobuf:"bytes,62,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	SaveGame                                   *CDOTASaveGame                `protobuf:"bytes,63,opt,name=save_game,json=saveGame" json:"save_game,omitempty"`
	FirstBloodHappened                         *bool                         `protobuf:"varint,65,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	MatchOutcome                               *EMatchOutcome                `protobuf:"varint,70,opt,name=match_outcome,json=matchOutcome,enum=dota.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	MassDisconnect                             *bool                         `protobuf:"varint,67,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	CustomGameId                               *uint64                       `protobuf:"varint,68,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers                           *uint32                       `protobuf:"varint,71,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers                           *uint32                       `protobuf:"varint,72,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	PartnerType                                *PartnerAccountType           `protobuf:"varint,73,opt,name=partner_type,json=partnerType,enum=dota.PartnerAccountType,def=0" json:"partner_type,omitempty"`
	Visibility                                 *DOTALobbyVisibility          `protobuf:"varint,75,opt,name=visibility,enum=dota.DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc                              *uint64                       `protobuf:"fixed64,76,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameAutoCreatedLobby                 *bool                         `protobuf:"varint,77,opt,name=custom_game_auto_created_lobby,json=customGameAutoCreatedLobby" json:"custom_game_auto_created_lobby,omitempty"`
	CustomGameTimestamp                        *uint32                       `protobuf:"fixed32,80,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousSeriesMatches                      []uint64                      `protobuf:"varint,81,rep,name=previous_series_matches,json=previousSeriesMatches" json:"previous_series_matches,omitempty"`
	PreviousMatchOverride                      *uint64                       `protobuf:"varint,82,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	CustomGameUsesAccountRecords               *bool                         `protobuf:"varint,83,opt,name=custom_game_uses_account_records,json=customGameUsesAccountRecords" json:"custom_game_uses_account_records,omitempty"`
	GameStartTime                              *uint32                       `protobuf:"varint,87,opt,name=game_start_time,json=gameStartTime" json:"game_start_time,omitempty"`
	PauseSetting                               *LobbyDotaPauseSetting        `protobuf:"varint,88,opt,name=pause_setting,json=pauseSetting,enum=dota.LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	LobbyMvpAccountId                          *uint32                       `protobuf:"varint,89,opt,name=lobby_mvp_account_id,json=lobbyMvpAccountId" json:"lobby_mvp_account_id,omitempty"`
	WeekendTourneyDivisionId                   *uint32                       `protobuf:"varint,90,opt,name=weekend_tourney_division_id,json=weekendTourneyDivisionId" json:"weekend_tourney_division_id,omitempty"`
	WeekendTourneySkillLevel                   *uint32                       `protobuf:"varint,91,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound                 *uint32                       `protobuf:"varint,92,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	BotDifficultyDire                          *DOTABotDifficulty            `protobuf:"varint,93,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=dota.DOTABotDifficulty,def=3" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                                 *uint64                       `protobuf:"varint,94,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                                    *uint64                       `protobuf:"varint,95,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	EventProgressionEnabled                    []EEvent                      `protobuf:"varint,96,rep,name=event_progression_enabled,json=eventProgressionEnabled,enum=dota.EEvent" json:"event_progression_enabled,omitempty"`
	SelectionPriorityRules                     *DOTASelectionPriorityRules   `protobuf:"varint,97,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=dota.DOTASelectionPriorityRules,def=0" json:"selection_priority_rules,omitempty"`
	SeriesPreviousSelectionPriorityTeamId      *uint32                       `protobuf:"varint,98,opt,name=series_previous_selection_priority_team_id,json=seriesPreviousSelectionPriorityTeamId" json:"series_previous_selection_priority_team_id,omitempty"`
	SeriesCurrentSelectionPriorityTeamId       *uint32                       `protobuf:"varint,99,opt,name=series_current_selection_priority_team_id,json=seriesCurrentSelectionPriorityTeamId" json:"series_current_selection_priority_team_id,omitempty"`
	SeriesCurrentPriorityTeamChoice            *DOTASelectionPriorityChoice  `protobuf:"varint,100,opt,name=series_current_priority_team_choice,json=seriesCurrentPriorityTeamChoice,enum=dota.DOTASelectionPriorityChoice,def=0" json:"series_current_priority_team_choice,omitempty"`
	SeriesCurrentNonPriorityTeamChoice         *DOTASelectionPriorityChoice  `protobuf:"varint,101,opt,name=series_current_non_priority_team_choice,json=seriesCurrentNonPriorityTeamChoice,enum=dota.DOTASelectionPriorityChoice,def=0" json:"series_current_non_priority_team_choice,omitempty"`
	SeriesCurrentSelectionPriorityUsedCoinToss *bool                         `protobuf:"varint,102,opt,name=series_current_selection_priority_used_coin_toss,json=seriesCurrentSelectionPriorityUsedCoinToss" json:"series_current_selection_priority_used_coin_toss,omitempty"`
	CurrentPrimaryEvent                        *EEvent                       `protobuf:"varint,103,opt,name=current_primary_event,json=currentPrimaryEvent,enum=dota.EEvent,def=0" json:"current_primary_event,omitempty"`
	LowpriDeprecated                           *bool                         `protobuf:"varint,104,opt,name=lowpri_deprecated,json=lowpriDeprecated" json:"lowpri_deprecated,omitempty"`
	EmergencyDisabledHeroIds                   []uint32                      `protobuf:"varint,105,rep,name=emergency_disabled_hero_ids,json=emergencyDisabledHeroIds" json:"emergency_disabled_hero_ids,omitempty"`
	CustomGamePrivateKey                       *uint64                       `protobuf:"fixed64,106,opt,name=custom_game_private_key,json=customGamePrivateKey" json:"custom_game_private_key,omitempty"`
	CustomGamePenalties                        *bool                         `protobuf:"varint,107,opt,name=custom_game_penalties,json=customGamePenalties" json:"custom_game_penalties,omitempty"`
	Mutations                                  []uint32                      `protobuf:"varint,108,rep,name=mutations" json:"mutations,omitempty"`
	LanHostPingLocation                        *string                       `protobuf:"bytes,109,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	LeagueNodeId                               *uint32                       `protobuf:"varint,110,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	MatchDuration                              *uint32                       `protobuf:"varint,111,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	CustomGameBrowseable                       *bool                         `protobuf:"varint,112,opt,name=custom_game_browseable,json=customGameBrowseable" json:"custom_game_browseable,omitempty"`
	LeaguePhase                                *uint32                       `protobuf:"varint,113,opt,name=league_phase,json=leaguePhase" json:"league_phase,omitempty"`
	RecordDetailedStats                        *bool                         `protobuf:"varint,114,opt,name=record_detailed_stats,json=recordDetailedStats" json:"record_detailed_stats,omitempty"`
	IsAllstarGame                              *bool                         `protobuf:"varint,115,opt,name=is_allstar_game,json=isAllstarGame" json:"is_allstar_game,omitempty"`
	XXX_NoUnkeyedLiteral                       struct{}                      `json:"-"`
	XXX_unrecognized                           []byte                        `json:"-"`
	XXX_sizecache                              int32                         `json:"-"`
}

func (m *CSODOTALobby) Reset()         { *m = CSODOTALobby{} }
func (m *CSODOTALobby) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobby) ProtoMessage()    {}
func (*CSODOTALobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{9}
}

func (m *CSODOTALobby) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobby.Unmarshal(m, b)
}
func (m *CSODOTALobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobby.Marshal(b, m, deterministic)
}
func (m *CSODOTALobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobby.Merge(m, src)
}
func (m *CSODOTALobby) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobby.Size(m)
}
func (m *CSODOTALobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobby.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobby proto.InternalMessageInfo

const Default_CSODOTALobby_ServerId uint64 = 0
const Default_CSODOTALobby_State CSODOTALobby_State = CSODOTALobby_UI
const Default_CSODOTALobby_LobbyType CSODOTALobby_LobbyType = CSODOTALobby_INVALID
const Default_CSODOTALobby_ServerRegion uint32 = 0
const Default_CSODOTALobby_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
const Default_CSODOTALobby_CmPick DOTA_CM_PICK = DOTA_CM_PICK_DOTA_CM_RANDOM
const Default_CSODOTALobby_AllowSpectating bool = true
const Default_CSODOTALobby_BotDifficultyRadiant DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_GameVersion DOTAGameVersion = DOTAGameVersion_GAME_VERSION_CURRENT
const Default_CSODOTALobby_PenaltyLevelRadiant uint32 = 0
const Default_CSODOTALobby_PenaltyLevelDire uint32 = 0
const Default_CSODOTALobby_Allchat bool = false
const Default_CSODOTALobby_DotaTvDelay LobbyDotaTVDelay = LobbyDotaTVDelay_LobbyDotaTV_10
const Default_CSODOTALobby_MatchOutcome EMatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
const Default_CSODOTALobby_PartnerType PartnerAccountType = PartnerAccountType_PARTNER_NONE
const Default_CSODOTALobby_Visibility DOTALobbyVisibility = DOTALobbyVisibility_DOTALobbyVisibility_Public
const Default_CSODOTALobby_PauseSetting LobbyDotaPauseSetting = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
const Default_CSODOTALobby_BotDifficultyDire DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_SelectionPriorityRules DOTASelectionPriorityRules = DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual
const Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice DOTASelectionPriorityChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
const Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice DOTASelectionPriorityChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
const Default_CSODOTALobby_CurrentPrimaryEvent EEvent = EEvent_EVENT_ID_NONE

func (m *CSODOTALobby) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CSODOTALobby) GetMembers() []*CDOTALobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobby) GetLeftMembers() []*CDOTALobbyMember {
	if m != nil {
		return m.LeftMembers
	}
	return nil
}

func (m *CSODOTALobby) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTALobby) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (m *CSODOTALobby) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CSODOTALobby) GetPendingInvites() []uint64 {
	if m != nil {
		return m.PendingInvites
	}
	return nil
}

func (m *CSODOTALobby) GetState() CSODOTALobby_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTALobby_State
}

func (m *CSODOTALobby) GetConnect() string {
	if m != nil && m.Connect != nil {
		return *m.Connect
	}
	return ""
}

func (m *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (m *CSODOTALobby) GetAllowCheats() bool {
	if m != nil && m.AllowCheats != nil {
		return *m.AllowCheats
	}
	return false
}

func (m *CSODOTALobby) GetFillWithBots() bool {
	if m != nil && m.FillWithBots != nil {
		return *m.FillWithBots
	}
	return false
}

func (m *CSODOTALobby) GetIntroMode() bool {
	if m != nil && m.IntroMode != nil {
		return *m.IntroMode
	}
	return false
}

func (m *CSODOTALobby) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if m != nil {
		return m.TeamDetails
	}
	return nil
}

func (m *CSODOTALobby) GetTutorialLesson() uint32 {
	if m != nil && m.TutorialLesson != nil {
		return *m.TutorialLesson
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentGameId() uint32 {
	if m != nil && m.TournamentGameId != nil {
		return *m.TournamentGameId
	}
	return 0
}

func (m *CSODOTALobby) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (m *CSODOTALobby) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (m *CSODOTALobby) GetNumSpectators() uint32 {
	if m != nil && m.NumSpectators != nil {
		return *m.NumSpectators
	}
	return 0
}

func (m *CSODOTALobby) GetMatchgroup() uint32 {
	if m != nil && m.Matchgroup != nil {
		return *m.Matchgroup
	}
	return 0
}

func (m *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if m != nil && m.CmPick != nil {
		return *m.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (m *CSODOTALobby) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CSODOTALobby) GetAllowSpectating() bool {
	if m != nil && m.AllowSpectating != nil {
		return *m.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (m *CSODOTALobby) GetBotDifficultyRadiant() DOTABotDifficulty {
	if m != nil && m.BotDifficultyRadiant != nil {
		return *m.BotDifficultyRadiant
	}
	return Default_CSODOTALobby_BotDifficultyRadiant
}

func (m *CSODOTALobby) GetGameVersion() DOTAGameVersion {
	if m != nil && m.GameVersion != nil {
		return *m.GameVersion
	}
	return Default_CSODOTALobby_GameVersion
}

func (m *CSODOTALobby) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if m != nil {
		return m.TimedRewardDetails
	}
	return nil
}

func (m *CSODOTALobby) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CSODOTALobby) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if m != nil && m.PenaltyLevelRadiant != nil {
		return *m.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (m *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if m != nil && m.PenaltyLevelDire != nil {
		return *m.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (m *CSODOTALobby) GetLoadGameId() uint32 {
	if m != nil && m.LoadGameId != nil {
		return *m.LoadGameId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if m != nil && m.RadiantSeriesWins != nil {
		return *m.RadiantSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetDireSeriesWins() uint32 {
	if m != nil && m.DireSeriesWins != nil {
		return *m.DireSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetLootGenerated() uint32 {
	if m != nil && m.LootGenerated != nil {
		return *m.LootGenerated
	}
	return 0
}

func (m *CSODOTALobby) GetLootAwarded() uint32 {
	if m != nil && m.LootAwarded != nil {
		return *m.LootAwarded
	}
	return 0
}

func (m *CSODOTALobby) GetAllchat() bool {
	if m != nil && m.Allchat != nil {
		return *m.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (m *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if m != nil && m.DotaTvDelay != nil {
		return *m.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (m *CSODOTALobby) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CSODOTALobby) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CSODOTALobby) GetCustomDifficulty() uint32 {
	if m != nil && m.CustomDifficulty != nil {
		return *m.CustomDifficulty
	}
	return 0
}

func (m *CSODOTALobby) GetLan() bool {
	if m != nil && m.Lan != nil {
		return *m.Lan
	}
	return false
}

func (m *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if m != nil {
		return m.BroadcastChannelInfo
	}
	return nil
}

func (m *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if m != nil && m.FirstLeaverAccountid != nil {
		return *m.FirstLeaverAccountid
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CSODOTALobby) GetLowPriority() bool {
	if m != nil && m.LowPriority != nil {
		return *m.LowPriority
	}
	return false
}

func (m *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if m != nil {
		return m.ExtraMessages
	}
	return nil
}

func (m *CSODOTALobby) GetSaveGame() *CDOTASaveGame {
	if m != nil {
		return m.SaveGame
	}
	return nil
}

func (m *CSODOTALobby) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CSODOTALobby) GetMatchOutcome() EMatchOutcome {
	if m != nil && m.MatchOutcome != nil {
		return *m.MatchOutcome
	}
	return Default_CSODOTALobby_MatchOutcome
}

func (m *CSODOTALobby) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMinPlayers() uint32 {
	if m != nil && m.CustomMinPlayers != nil {
		return *m.CustomMinPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMaxPlayers() uint32 {
	if m != nil && m.CustomMaxPlayers != nil {
		return *m.CustomMaxPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetPartnerType() PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTALobby_PartnerType
}

func (m *CSODOTALobby) GetVisibility() DOTALobbyVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_CSODOTALobby_Visibility
}

func (m *CSODOTALobby) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameAutoCreatedLobby() bool {
	if m != nil && m.CustomGameAutoCreatedLobby != nil {
		return *m.CustomGameAutoCreatedLobby
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

func (m *CSODOTALobby) GetPreviousSeriesMatches() []uint64 {
	if m != nil {
		return m.PreviousSeriesMatches
	}
	return nil
}

func (m *CSODOTALobby) GetPreviousMatchOverride() uint64 {
	if m != nil && m.PreviousMatchOverride != nil {
		return *m.PreviousMatchOverride
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameUsesAccountRecords() bool {
	if m != nil && m.CustomGameUsesAccountRecords != nil {
		return *m.CustomGameUsesAccountRecords
	}
	return false
}

func (m *CSODOTALobby) GetGameStartTime() uint32 {
	if m != nil && m.GameStartTime != nil {
		return *m.GameStartTime
	}
	return 0
}

func (m *CSODOTALobby) GetPauseSetting() LobbyDotaPauseSetting {
	if m != nil && m.PauseSetting != nil {
		return *m.PauseSetting
	}
	return Default_CSODOTALobby_PauseSetting
}

func (m *CSODOTALobby) GetLobbyMvpAccountId() uint32 {
	if m != nil && m.LobbyMvpAccountId != nil {
		return *m.LobbyMvpAccountId
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneyDivisionId() uint32 {
	if m != nil && m.WeekendTourneyDivisionId != nil {
		return *m.WeekendTourneyDivisionId
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneySkillLevel() uint32 {
	if m != nil && m.WeekendTourneySkillLevel != nil {
		return *m.WeekendTourneySkillLevel
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneyBracketRound() uint32 {
	if m != nil && m.WeekendTourneyBracketRound != nil {
		return *m.WeekendTourneyBracketRound
	}
	return 0
}

func (m *CSODOTALobby) GetBotDifficultyDire() DOTABotDifficulty {
	if m != nil && m.BotDifficultyDire != nil {
		return *m.BotDifficultyDire
	}
	return Default_CSODOTALobby_BotDifficultyDire
}

func (m *CSODOTALobby) GetBotRadiant() uint64 {
	if m != nil && m.BotRadiant != nil {
		return *m.BotRadiant
	}
	return 0
}

func (m *CSODOTALobby) GetBotDire() uint64 {
	if m != nil && m.BotDire != nil {
		return *m.BotDire
	}
	return 0
}

func (m *CSODOTALobby) GetEventProgressionEnabled() []EEvent {
	if m != nil {
		return m.EventProgressionEnabled
	}
	return nil
}

func (m *CSODOTALobby) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if m != nil && m.SelectionPriorityRules != nil {
		return *m.SelectionPriorityRules
	}
	return Default_CSODOTALobby_SelectionPriorityRules
}

func (m *CSODOTALobby) GetSeriesPreviousSelectionPriorityTeamId() uint32 {
	if m != nil && m.SeriesPreviousSelectionPriorityTeamId != nil {
		return *m.SeriesPreviousSelectionPriorityTeamId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesCurrentSelectionPriorityTeamId() uint32 {
	if m != nil && m.SeriesCurrentSelectionPriorityTeamId != nil {
		return *m.SeriesCurrentSelectionPriorityTeamId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesCurrentPriorityTeamChoice() DOTASelectionPriorityChoice {
	if m != nil && m.SeriesCurrentPriorityTeamChoice != nil {
		return *m.SeriesCurrentPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice
}

func (m *CSODOTALobby) GetSeriesCurrentNonPriorityTeamChoice() DOTASelectionPriorityChoice {
	if m != nil && m.SeriesCurrentNonPriorityTeamChoice != nil {
		return *m.SeriesCurrentNonPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice
}

func (m *CSODOTALobby) GetSeriesCurrentSelectionPriorityUsedCoinToss() bool {
	if m != nil && m.SeriesCurrentSelectionPriorityUsedCoinToss != nil {
		return *m.SeriesCurrentSelectionPriorityUsedCoinToss
	}
	return false
}

func (m *CSODOTALobby) GetCurrentPrimaryEvent() EEvent {
	if m != nil && m.CurrentPrimaryEvent != nil {
		return *m.CurrentPrimaryEvent
	}
	return Default_CSODOTALobby_CurrentPrimaryEvent
}

func (m *CSODOTALobby) GetLowpriDeprecated() bool {
	if m != nil && m.LowpriDeprecated != nil {
		return *m.LowpriDeprecated
	}
	return false
}

func (m *CSODOTALobby) GetEmergencyDisabledHeroIds() []uint32 {
	if m != nil {
		return m.EmergencyDisabledHeroIds
	}
	return nil
}

func (m *CSODOTALobby) GetCustomGamePrivateKey() uint64 {
	if m != nil && m.CustomGamePrivateKey != nil {
		return *m.CustomGamePrivateKey
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGamePenalties() bool {
	if m != nil && m.CustomGamePenalties != nil {
		return *m.CustomGamePenalties
	}
	return false
}

func (m *CSODOTALobby) GetMutations() []uint32 {
	if m != nil {
		return m.Mutations
	}
	return nil
}

func (m *CSODOTALobby) GetLanHostPingLocation() string {
	if m != nil && m.LanHostPingLocation != nil {
		return *m.LanHostPingLocation
	}
	return ""
}

func (m *CSODOTALobby) GetLeagueNodeId() uint32 {
	if m != nil && m.LeagueNodeId != nil {
		return *m.LeagueNodeId
	}
	return 0
}

func (m *CSODOTALobby) GetMatchDuration() uint32 {
	if m != nil && m.MatchDuration != nil {
		return *m.MatchDuration
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameBrowseable() bool {
	if m != nil && m.CustomGameBrowseable != nil {
		return *m.CustomGameBrowseable
	}
	return false
}

func (m *CSODOTALobby) GetLeaguePhase() uint32 {
	if m != nil && m.LeaguePhase != nil {
		return *m.LeaguePhase
	}
	return 0
}

func (m *CSODOTALobby) GetRecordDetailedStats() bool {
	if m != nil && m.RecordDetailedStats != nil {
		return *m.RecordDetailedStats
	}
	return false
}

func (m *CSODOTALobby) GetIsAllstarGame() bool {
	if m != nil && m.IsAllstarGame != nil {
		return *m.IsAllstarGame
	}
	return false
}

type CSODOTALobby_CExtraMsg struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents             []byte   `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTALobby_CExtraMsg) Reset()         { *m = CSODOTALobby_CExtraMsg{} }
func (m *CSODOTALobby_CExtraMsg) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobby_CExtraMsg) ProtoMessage()    {}
func (*CSODOTALobby_CExtraMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{9, 0}
}

func (m *CSODOTALobby_CExtraMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Unmarshal(m, b)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Marshal(b, m, deterministic)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobby_CExtraMsg.Merge(m, src)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Size(m)
}
func (m *CSODOTALobby_CExtraMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobby_CExtraMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobby_CExtraMsg proto.InternalMessageInfo

func (m *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type CMsgLobbyPlaytestDetails struct {
	Json                 *string  `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyPlaytestDetails) Reset()         { *m = CMsgLobbyPlaytestDetails{} }
func (m *CMsgLobbyPlaytestDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyPlaytestDetails) ProtoMessage()    {}
func (*CMsgLobbyPlaytestDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{10}
}

func (m *CMsgLobbyPlaytestDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Unmarshal(m, b)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyPlaytestDetails.Merge(m, src)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Size(m)
}
func (m *CMsgLobbyPlaytestDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyPlaytestDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyPlaytestDetails proto.InternalMessageInfo

func (m *CMsgLobbyPlaytestDetails) GetJson() string {
	if m != nil && m.Json != nil {
		return *m.Json
	}
	return ""
}

type CMsgReadyCheckStatus struct {
	StartTimestamp       *uint32                             `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	FinishTimestamp      *uint32                             `protobuf:"varint,2,opt,name=finish_timestamp,json=finishTimestamp" json:"finish_timestamp,omitempty"`
	InitiatorAccountId   *uint32                             `protobuf:"varint,3,opt,name=initiator_account_id,json=initiatorAccountId" json:"initiator_account_id,omitempty"`
	ReadyMembers         []*CMsgReadyCheckStatus_ReadyMember `protobuf:"bytes,4,rep,name=ready_members,json=readyMembers" json:"ready_members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CMsgReadyCheckStatus) Reset()         { *m = CMsgReadyCheckStatus{} }
func (m *CMsgReadyCheckStatus) String() string { return proto.CompactTextString(m) }
func (*CMsgReadyCheckStatus) ProtoMessage()    {}
func (*CMsgReadyCheckStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{11}
}

func (m *CMsgReadyCheckStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgReadyCheckStatus.Unmarshal(m, b)
}
func (m *CMsgReadyCheckStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgReadyCheckStatus.Marshal(b, m, deterministic)
}
func (m *CMsgReadyCheckStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgReadyCheckStatus.Merge(m, src)
}
func (m *CMsgReadyCheckStatus) XXX_Size() int {
	return xxx_messageInfo_CMsgReadyCheckStatus.Size(m)
}
func (m *CMsgReadyCheckStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgReadyCheckStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgReadyCheckStatus proto.InternalMessageInfo

func (m *CMsgReadyCheckStatus) GetStartTimestamp() uint32 {
	if m != nil && m.StartTimestamp != nil {
		return *m.StartTimestamp
	}
	return 0
}

func (m *CMsgReadyCheckStatus) GetFinishTimestamp() uint32 {
	if m != nil && m.FinishTimestamp != nil {
		return *m.FinishTimestamp
	}
	return 0
}

func (m *CMsgReadyCheckStatus) GetInitiatorAccountId() uint32 {
	if m != nil && m.InitiatorAccountId != nil {
		return *m.InitiatorAccountId
	}
	return 0
}

func (m *CMsgReadyCheckStatus) GetReadyMembers() []*CMsgReadyCheckStatus_ReadyMember {
	if m != nil {
		return m.ReadyMembers
	}
	return nil
}

type CMsgReadyCheckStatus_ReadyMember struct {
	AccountId            *uint32            `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ReadyStatus          *EReadyCheckStatus `protobuf:"varint,2,opt,name=ready_status,json=readyStatus,enum=dota.EReadyCheckStatus,def=0" json:"ready_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CMsgReadyCheckStatus_ReadyMember) Reset()         { *m = CMsgReadyCheckStatus_ReadyMember{} }
func (m *CMsgReadyCheckStatus_ReadyMember) String() string { return proto.CompactTextString(m) }
func (*CMsgReadyCheckStatus_ReadyMember) ProtoMessage()    {}
func (*CMsgReadyCheckStatus_ReadyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{11, 0}
}

func (m *CMsgReadyCheckStatus_ReadyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.Unmarshal(m, b)
}
func (m *CMsgReadyCheckStatus_ReadyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.Marshal(b, m, deterministic)
}
func (m *CMsgReadyCheckStatus_ReadyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.Merge(m, src)
}
func (m *CMsgReadyCheckStatus_ReadyMember) XXX_Size() int {
	return xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.Size(m)
}
func (m *CMsgReadyCheckStatus_ReadyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember proto.InternalMessageInfo

const Default_CMsgReadyCheckStatus_ReadyMember_ReadyStatus EReadyCheckStatus = EReadyCheckStatus_k_EReadyCheckStatus_Unknown

func (m *CMsgReadyCheckStatus_ReadyMember) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgReadyCheckStatus_ReadyMember) GetReadyStatus() EReadyCheckStatus {
	if m != nil && m.ReadyStatus != nil {
		return *m.ReadyStatus
	}
	return Default_CMsgReadyCheckStatus_ReadyMember_ReadyStatus
}

type CMsgPartyReadyCheckRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgPartyReadyCheckRequest) Reset()         { *m = CMsgPartyReadyCheckRequest{} }
func (m *CMsgPartyReadyCheckRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgPartyReadyCheckRequest) ProtoMessage()    {}
func (*CMsgPartyReadyCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{12}
}

func (m *CMsgPartyReadyCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgPartyReadyCheckRequest.Unmarshal(m, b)
}
func (m *CMsgPartyReadyCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgPartyReadyCheckRequest.Marshal(b, m, deterministic)
}
func (m *CMsgPartyReadyCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgPartyReadyCheckRequest.Merge(m, src)
}
func (m *CMsgPartyReadyCheckRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgPartyReadyCheckRequest.Size(m)
}
func (m *CMsgPartyReadyCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgPartyReadyCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgPartyReadyCheckRequest proto.InternalMessageInfo

type CMsgPartyReadyCheckResponse struct {
	Result               *EReadyCheckRequestResult `protobuf:"varint,1,opt,name=result,enum=dota.EReadyCheckRequestResult,def=0" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CMsgPartyReadyCheckResponse) Reset()         { *m = CMsgPartyReadyCheckResponse{} }
func (m *CMsgPartyReadyCheckResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgPartyReadyCheckResponse) ProtoMessage()    {}
func (*CMsgPartyReadyCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{13}
}

func (m *CMsgPartyReadyCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgPartyReadyCheckResponse.Unmarshal(m, b)
}
func (m *CMsgPartyReadyCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgPartyReadyCheckResponse.Marshal(b, m, deterministic)
}
func (m *CMsgPartyReadyCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgPartyReadyCheckResponse.Merge(m, src)
}
func (m *CMsgPartyReadyCheckResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgPartyReadyCheckResponse.Size(m)
}
func (m *CMsgPartyReadyCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgPartyReadyCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgPartyReadyCheckResponse proto.InternalMessageInfo

const Default_CMsgPartyReadyCheckResponse_Result EReadyCheckRequestResult = EReadyCheckRequestResult_k_EReadyCheckRequestResult_Success

func (m *CMsgPartyReadyCheckResponse) GetResult() EReadyCheckRequestResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgPartyReadyCheckResponse_Result
}

type CMsgPartyReadyCheckAcknowledge struct {
	ReadyStatus          *EReadyCheckStatus `protobuf:"varint,1,opt,name=ready_status,json=readyStatus,enum=dota.EReadyCheckStatus,def=0" json:"ready_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CMsgPartyReadyCheckAcknowledge) Reset()         { *m = CMsgPartyReadyCheckAcknowledge{} }
func (m *CMsgPartyReadyCheckAcknowledge) String() string { return proto.CompactTextString(m) }
func (*CMsgPartyReadyCheckAcknowledge) ProtoMessage()    {}
func (*CMsgPartyReadyCheckAcknowledge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{14}
}

func (m *CMsgPartyReadyCheckAcknowledge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.Unmarshal(m, b)
}
func (m *CMsgPartyReadyCheckAcknowledge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.Marshal(b, m, deterministic)
}
func (m *CMsgPartyReadyCheckAcknowledge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.Merge(m, src)
}
func (m *CMsgPartyReadyCheckAcknowledge) XXX_Size() int {
	return xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.Size(m)
}
func (m *CMsgPartyReadyCheckAcknowledge) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgPartyReadyCheckAcknowledge proto.InternalMessageInfo

const Default_CMsgPartyReadyCheckAcknowledge_ReadyStatus EReadyCheckStatus = EReadyCheckStatus_k_EReadyCheckStatus_Unknown

func (m *CMsgPartyReadyCheckAcknowledge) GetReadyStatus() EReadyCheckStatus {
	if m != nil && m.ReadyStatus != nil {
		return *m.ReadyStatus
	}
	return Default_CMsgPartyReadyCheckAcknowledge_ReadyStatus
}

type CMsgLobbyEventGameDetails struct {
	KvData               []byte   `protobuf:"bytes,1,opt,name=kv_data,json=kvData" json:"kv_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyEventGameDetails) Reset()         { *m = CMsgLobbyEventGameDetails{} }
func (m *CMsgLobbyEventGameDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyEventGameDetails) ProtoMessage()    {}
func (*CMsgLobbyEventGameDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{15}
}

func (m *CMsgLobbyEventGameDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventGameDetails.Unmarshal(m, b)
}
func (m *CMsgLobbyEventGameDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventGameDetails.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyEventGameDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventGameDetails.Merge(m, src)
}
func (m *CMsgLobbyEventGameDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventGameDetails.Size(m)
}
func (m *CMsgLobbyEventGameDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventGameDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventGameDetails proto.InternalMessageInfo

func (m *CMsgLobbyEventGameDetails) GetKvData() []byte {
	if m != nil {
		return m.KvData
	}
	return nil
}

type CMsgMatchMatchmakingStats struct {
	AverageQueueTime      *uint32                      `protobuf:"varint,1,opt,name=average_queue_time,json=averageQueueTime" json:"average_queue_time,omitempty"`
	MaximumQueueTime      *uint32                      `protobuf:"varint,2,opt,name=maximum_queue_time,json=maximumQueueTime" json:"maximum_queue_time,omitempty"`
	BehaviorScoreVariance *EMatchBehaviorScoreVariance `protobuf:"varint,3,opt,name=behavior_score_variance,json=behaviorScoreVariance,enum=dota.EMatchBehaviorScoreVariance,def=0" json:"behavior_score_variance,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-"`
	XXX_unrecognized      []byte                       `json:"-"`
	XXX_sizecache         int32                        `json:"-"`
}

func (m *CMsgMatchMatchmakingStats) Reset()         { *m = CMsgMatchMatchmakingStats{} }
func (m *CMsgMatchMatchmakingStats) String() string { return proto.CompactTextString(m) }
func (*CMsgMatchMatchmakingStats) ProtoMessage()    {}
func (*CMsgMatchMatchmakingStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{16}
}

func (m *CMsgMatchMatchmakingStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgMatchMatchmakingStats.Unmarshal(m, b)
}
func (m *CMsgMatchMatchmakingStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgMatchMatchmakingStats.Marshal(b, m, deterministic)
}
func (m *CMsgMatchMatchmakingStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgMatchMatchmakingStats.Merge(m, src)
}
func (m *CMsgMatchMatchmakingStats) XXX_Size() int {
	return xxx_messageInfo_CMsgMatchMatchmakingStats.Size(m)
}
func (m *CMsgMatchMatchmakingStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgMatchMatchmakingStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgMatchMatchmakingStats proto.InternalMessageInfo

const Default_CMsgMatchMatchmakingStats_BehaviorScoreVariance EMatchBehaviorScoreVariance = EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Invalid

func (m *CMsgMatchMatchmakingStats) GetAverageQueueTime() uint32 {
	if m != nil && m.AverageQueueTime != nil {
		return *m.AverageQueueTime
	}
	return 0
}

func (m *CMsgMatchMatchmakingStats) GetMaximumQueueTime() uint32 {
	if m != nil && m.MaximumQueueTime != nil {
		return *m.MaximumQueueTime
	}
	return 0
}

func (m *CMsgMatchMatchmakingStats) GetBehaviorScoreVariance() EMatchBehaviorScoreVariance {
	if m != nil && m.BehaviorScoreVariance != nil {
		return *m.BehaviorScoreVariance
	}
	return Default_CMsgMatchMatchmakingStats_BehaviorScoreVariance
}

func init() {
	proto.RegisterEnum("dota.ELaneSelection", ELaneSelection_name, ELaneSelection_value)
	proto.RegisterEnum("dota.ELaneSelectionFlags", ELaneSelectionFlags_name, ELaneSelectionFlags_value)
	proto.RegisterEnum("dota.EPartyMatchmakingFlags", EPartyMatchmakingFlags_name, EPartyMatchmakingFlags_value)
	proto.RegisterEnum("dota.EHighPriorityMMState", EHighPriorityMMState_name, EHighPriorityMMState_value)
	proto.RegisterEnum("dota.LobbyDotaTVDelay", LobbyDotaTVDelay_name, LobbyDotaTVDelay_value)
	proto.RegisterEnum("dota.LobbyDotaPauseSetting", LobbyDotaPauseSetting_name, LobbyDotaPauseSetting_value)
	proto.RegisterEnum("dota.EReadyCheckStatus", EReadyCheckStatus_name, EReadyCheckStatus_value)
	proto.RegisterEnum("dota.EReadyCheckRequestResult", EReadyCheckRequestResult_name, EReadyCheckRequestResult_value)
	proto.RegisterEnum("dota.EMatchBehaviorScoreVariance", EMatchBehaviorScoreVariance_name, EMatchBehaviorScoreVariance_value)
	proto.RegisterEnum("dota.CSODOTAParty_State", CSODOTAParty_State_name, CSODOTAParty_State_value)
	proto.RegisterEnum("dota.CSODOTALobby_State", CSODOTALobby_State_name, CSODOTALobby_State_value)
	proto.RegisterEnum("dota.CSODOTALobby_LobbyType", CSODOTALobby_LobbyType_name, CSODOTALobby_LobbyType_value)
	proto.RegisterType((*CSODOTAPartyMember)(nil), "dota.CSODOTAPartyMember")
	proto.RegisterType((*CSODOTAParty)(nil), "dota.CSODOTAParty")
	proto.RegisterType((*CSODOTAPartyInvite)(nil), "dota.CSODOTAPartyInvite")
	proto.RegisterType((*CSODOTAPartyInvite_PartyMember)(nil), "dota.CSODOTAPartyInvite.PartyMember")
	proto.RegisterType((*CSODOTALobbyInvite)(nil), "dota.CSODOTALobbyInvite")
	proto.RegisterType((*CSODOTALobbyInvite_LobbyMember)(nil), "dota.CSODOTALobbyInvite.LobbyMember")
	proto.RegisterType((*CMsgLeaverState)(nil), "dota.CMsgLeaverState")
	proto.RegisterType((*CDOTALobbyMember)(nil), "dota.CDOTALobbyMember")
	proto.RegisterType((*CDOTALobbyMember_CDOTALobbyMemberXPBonus)(nil), "dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus")
	proto.RegisterType((*CLobbyTeamDetails)(nil), "dota.CLobbyTeamDetails")
	proto.RegisterType((*CLobbyTimedRewardDetails)(nil), "dota.CLobbyTimedRewardDetails")
	proto.RegisterType((*CLobbyBroadcastChannelInfo)(nil), "dota.CLobbyBroadcastChannelInfo")
	proto.RegisterType((*CSODOTALobby)(nil), "dota.CSODOTALobby")
	proto.RegisterType((*CSODOTALobby_CExtraMsg)(nil), "dota.CSODOTALobby.CExtraMsg")
	proto.RegisterType((*CMsgLobbyPlaytestDetails)(nil), "dota.CMsgLobbyPlaytestDetails")
	proto.RegisterType((*CMsgReadyCheckStatus)(nil), "dota.CMsgReadyCheckStatus")
	proto.RegisterType((*CMsgReadyCheckStatus_ReadyMember)(nil), "dota.CMsgReadyCheckStatus.ReadyMember")
	proto.RegisterType((*CMsgPartyReadyCheckRequest)(nil), "dota.CMsgPartyReadyCheckRequest")
	proto.RegisterType((*CMsgPartyReadyCheckResponse)(nil), "dota.CMsgPartyReadyCheckResponse")
	proto.RegisterType((*CMsgPartyReadyCheckAcknowledge)(nil), "dota.CMsgPartyReadyCheckAcknowledge")
	proto.RegisterType((*CMsgLobbyEventGameDetails)(nil), "dota.CMsgLobbyEventGameDetails")
	proto.RegisterType((*CMsgMatchMatchmakingStats)(nil), "dota.CMsgMatchMatchmakingStats")
}

func init() {
	proto.RegisterFile("dota_gcmessages_common_match_management.proto", fileDescriptor_3efdba6b0593baab)
}

var fileDescriptor_3efdba6b0593baab = []byte{
	// 6295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7b, 0xcd, 0x77, 0x1b, 0x47,
	0x76, 0xaf, 0x40, 0x51, 0xfc, 0x28, 0x02, 0x64, 0xb3, 0x48, 0x91, 0x4d, 0xea, 0x8b, 0xa6, 0x2c,
	0x99, 0x96, 0x65, 0x5a, 0x96, 0xbf, 0xc6, 0xf4, 0x8c, 0x67, 0x40, 0x00, 0x94, 0x30, 0x26, 0x40,
	0xb8, 0x01, 0x52, 0xd6, 0xbc, 0x79, 0xaf, 0xa6, 0xd0, 0x5d, 0x04, 0xdb, 0xec, 0x0f, 0x4c, 0x57,
	0x03, 0x14, 0xdf, 0xe6, 0xf9, 0x9c, 0x77, 0xe6, 0x6d, 0xdf, 0x39, 0x59, 0x64, 0x97, 0x4d, 0x4e,
	0x92, 0x55, 0x36, 0xd9, 0xce, 0x2e, 0x27, 0x7f, 0x41, 0xf6, 0xf9, 0x27, 0xb2, 0xc9, 0x22, 0x9b,
	0xe4, 0xd4, 0xbd, 0xd5, 0x8d, 0xc6, 0x97, 0x3c, 0x33, 0x99, 0x45, 0xb4, 0x11, 0xfa, 0xde, 0x5f,
	0xdd, 0xae, 0xae, 0xba, 0x75, 0x3f, 0x8b, 0xe4, 0x43, 0x27, 0x8c, 0x39, 0xeb, 0xd8, 0xbe, 0x90,
	0x92, 0x77, 0x84, 0x64, 0x76, 0xe8, 0xfb, 0x61, 0xc0, 0x7c, 0x1e, 0xdb, 0x17, 0xcc, 0xe7, 0x01,
	0xef, 0x08, 0x5f, 0x04, 0xf1, 0x7e, 0x37, 0x0a, 0xe3, 0x90, 0xce, 0x2a, 0xf8, 0xf6, 0x9a, 0x8c,
	0x05, 0xf7, 0x93, 0x21, 0xc8, 0xda, 0xde, 0xe8, 0xd8, 0xd2, 0xb9, 0xcc, 0x88, 0xd2, 0xf4, 0x4d,
	0x78, 0x83, 0xbc, 0xe0, 0x91, 0x70, 0x98, 0x08, 0x7a, 0xbe, 0x66, 0xec, 0xfe, 0xfe, 0x16, 0xa1,
	0xa5, 0xe6, 0x49, 0xf9, 0xa4, 0x55, 0x6c, 0xf0, 0x28, 0xbe, 0xae, 0x09, 0xbf, 0x2d, 0x22, 0x5a,
	0x25, 0xf9, 0x2e, 0x8f, 0xe2, 0x40, 0x44, 0x2c, 0xbe, 0xee, 0x0a, 0x33, 0xb7, 0x93, 0xdb, 0x5b,
	0x7e, 0x6e, 0xee, 0x2b, 0x31, 0xfb, 0x0d, 0xe4, 0x14, 0x6d, 0x3b, 0xec, 0x05, 0x71, 0xeb, 0xba,
	0x2b, 0x0e, 0xf2, 0x8d, 0xa2, 0xd5, 0xaa, 0x57, 0x2c, 0x56, 0x3f, 0xa9, 0x57, 0xac, 0x25, 0x3d,
	0x56, 0xb1, 0xe8, 0x16, 0x59, 0x70, 0xd5, 0x17, 0x71, 0xfb, 0xc2, 0x9c, 0xd9, 0xc9, 0xed, 0x2d,
	0x58, 0xf3, 0xae, 0x2c, 0xa9, 0x47, 0xba, 0x4f, 0x56, 0x23, 0xd1, 0x71, 0xc3, 0x80, 0x75, 0xdd,
	0xa0, 0xc3, 0xec, 0xd0, 0x11, 0xd2, 0x9c, 0xdd, 0xb9, 0xb9, 0x57, 0x38, 0x9c, 0x31, 0x72, 0xd6,
	0x0a, 0x32, 0x1b, 0x6e, 0xd0, 0x29, 0x29, 0xd6, 0x28, 0x3e, 0x76, 0x7d, 0x21, 0xcd, 0x5b, 0x93,
	0xf0, 0x2d, 0xc5, 0xa2, 0x5f, 0x91, 0xed, 0x2c, 0xfe, 0x9c, 0xbb, 0x9e, 0x70, 0x58, 0xdb, 0x8d,
	0x7d, 0x2e, 0x2f, 0xcd, 0xb9, 0x9d, 0xdc, 0x5e, 0xc1, 0xda, 0x1c, 0x0c, 0x3a, 0x02, 0xfe, 0x21,
	0xb2, 0xe9, 0x53, 0x42, 0x5d, 0xc9, 0xba, 0x5e, 0x4f, 0x32, 0xd9, 0x6b, 0x4b, 0x3b, 0x72, 0xdb,
	0x22, 0x32, 0x09, 0x7c, 0x81, 0xe1, 0xca, 0x86, 0xd7, 0x93, 0xcd, 0x94, 0x4e, 0xf7, 0xc9, 0x5a,
	0x1c, 0xf6, 0xa2, 0x40, 0x5c, 0x33, 0x79, 0xe9, 0x7a, 0x1e, 0xf3, 0x44, 0x5f, 0x78, 0xe6, 0x3c,
	0xbc, 0x63, 0x55, 0xb3, 0x9a, 0x8a, 0x73, 0xac, 0x18, 0xf4, 0x21, 0x29, 0x24, 0xf8, 0x76, 0xef,
	0xda, 0x0d, 0xcc, 0x05, 0x40, 0xe6, 0x35, 0xf1, 0x50, 0xd1, 0xe8, 0x73, 0x72, 0x3b, 0x01, 0x75,
	0x23, 0xd1, 0x17, 0x41, 0xcc, 0x7a, 0x41, 0xec, 0x7a, 0xe6, 0x22, 0x80, 0x93, 0x37, 0x36, 0x90,
	0x77, 0xaa, 0x58, 0x74, 0x97, 0x14, 0x7c, 0x9f, 0x39, 0x3c, 0xe6, 0xac, 0xcf, 0x3d, 0xd7, 0x31,
	0x0b, 0x30, 0xe3, 0x25, 0xdf, 0x2f, 0xf3, 0x98, 0x9f, 0x29, 0x12, 0x7d, 0x46, 0xd6, 0x3d, 0x1e,
	0x08, 0x26, 0x85, 0x27, 0xec, 0x58, 0xad, 0xcf, 0xb9, 0xc7, 0x3b, 0xd2, 0x5c, 0x02, 0xb1, 0x54,
	0xf1, 0x9a, 0x09, 0xeb, 0x48, 0x71, 0xe8, 0xa7, 0x64, 0xe3, 0xc2, 0xed, 0x5c, 0xb0, 0x6e, 0xe4,
	0x86, 0x91, 0x1b, 0x5f, 0x33, 0xc7, 0x95, 0xbc, 0xed, 0x09, 0xc7, 0x5c, 0x06, 0xf1, 0xeb, 0x8a,
	0xdb, 0xd0, 0xcc, 0xb2, 0xe6, 0xd1, 0xc7, 0x64, 0xe5, 0x82, 0x4b, 0x76, 0xd1, 0x65, 0x91, 0x90,
	0x61, 0x2f, 0xb2, 0x85, 0xb9, 0x02, 0xf0, 0xc2, 0x05, 0x97, 0x2f, 0xbb, 0x96, 0x26, 0xd2, 0xcf,
	0xc9, 0xe6, 0xf7, 0xa1, 0x1b, 0x08, 0x87, 0x9d, 0x47, 0xa1, 0xcf, 0x94, 0xf6, 0x5c, 0x9f, 0xbb,
	0x81, 0x23, 0x22, 0x33, 0x0f, 0xf8, 0xdb, 0xc8, 0x3e, 0x8a, 0x42, 0xbf, 0x31, 0x60, 0xee, 0xfe,
	0xf5, 0x6d, 0x92, 0xcf, 0x2a, 0x2f, 0x7d, 0x40, 0x16, 0x60, 0x30, 0x73, 0x1d, 0x50, 0xd9, 0xd9,
	0xc3, 0xd9, 0x1f, 0xfe, 0xee, 0x5e, 0xce, 0x9a, 0x07, 0x6a, 0xd5, 0xa1, 0x77, 0xc8, 0xa2, 0x27,
	0xb8, 0x23, 0x22, 0x85, 0x50, 0xda, 0x38, 0x67, 0x2d, 0x20, 0xa1, 0xea, 0xd0, 0x7b, 0x84, 0xf8,
	0xa0, 0xfe, 0xcc, 0x75, 0xa4, 0x79, 0x73, 0xe7, 0xe6, 0xde, 0x9c, 0xb5, 0x88, 0x94, 0xaa, 0x23,
	0x15, 0xbb, 0xc3, 0x7d, 0xc1, 0x7c, 0xad, 0xa6, 0x6a, 0xad, 0x16, 0x15, 0xa5, 0x06, 0xca, 0xf9,
	0x9c, 0xdc, 0x92, 0x31, 0x8f, 0x05, 0xe8, 0x55, 0x7a, 0x56, 0xb2, 0xd3, 0xdb, 0x6f, 0x2a, 0xfe,
	0xc1, 0xcc, 0x69, 0xd5, 0x42, 0x28, 0xfd, 0x86, 0xec, 0x8a, 0xf3, 0x73, 0xb5, 0xd0, 0x7d, 0xc1,
	0x64, 0xcc, 0xa3, 0x58, 0x38, 0x78, 0xea, 0x7d, 0x7e, 0x99, 0xa8, 0xb8, 0x56, 0xa2, 0x07, 0x29,
	0xb2, 0x89, 0xc0, 0xda, 0x00, 0xa7, 0xd4, 0x9d, 0xfe, 0x9c, 0xdc, 0x8d, 0xf8, 0xd5, 0x74, 0x31,
	0x3b, 0x20, 0x66, 0x2b, 0xe2, 0x57, 0x53, 0x04, 0x3c, 0x25, 0x94, 0xc7, 0xb1, 0xf0, 0xbb, 0x31,
	0x0a, 0xc1, 0x61, 0xef, 0xc0, 0x30, 0x43, 0x73, 0x60, 0x28, 0xa0, 0x1f, 0x90, 0xa5, 0x04, 0x1d,
	0xf4, 0x7c, 0x73, 0x17, 0x60, 0x44, 0x93, 0xea, 0x3d, 0x9f, 0xee, 0x90, 0x25, 0x98, 0x43, 0x27,
	0x0a, 0x7b, 0xdd, 0x44, 0xb9, 0xb2, 0x24, 0xfa, 0x19, 0xd9, 0xf4, 0xc2, 0xab, 0x81, 0x52, 0x71,
	0xb4, 0x28, 0x6a, 0x6f, 0xd6, 0x00, 0xbd, 0xee, 0x85, 0x57, 0x89, 0x56, 0x69, 0x73, 0x53, 0x75,
	0x68, 0x91, 0x10, 0xb4, 0x8c, 0x60, 0x9a, 0x6e, 0xc3, 0x72, 0xaf, 0xe0, 0x72, 0xc3, 0x27, 0x81,
	0x45, 0x5a, 0xad, 0x15, 0x5b, 0xa5, 0x97, 0xac, 0xf5, 0xba, 0x51, 0x61, 0xa5, 0x62, 0xf3, 0xb4,
	0x78, 0x6c, 0x2d, 0xfa, 0x09, 0x97, 0x9e, 0x91, 0xe5, 0x76, 0x18, 0x33, 0xc7, 0x3d, 0x3f, 0x77,
	0xed, 0x9e, 0x17, 0x5f, 0x9b, 0x1b, 0x20, 0x66, 0x13, 0xc5, 0xa8, 0x2d, 0x3b, 0x0c, 0xe3, 0x72,
	0xca, 0x3e, 0xd8, 0x38, 0x3c, 0x69, 0xb1, 0x72, 0xf5, 0xe8, 0xa8, 0x5a, 0x3a, 0x3d, 0x6e, 0xbd,
	0x66, 0x8d, 0x62, 0xb3, 0x59, 0x3d, 0xab, 0x58, 0x85, 0x76, 0x16, 0x46, 0x37, 0xc9, 0xbc, 0xb2,
	0xca, 0xea, 0x0b, 0x36, 0xe1, 0x0b, 0xe6, 0xd4, 0x23, 0x2a, 0x1e, 0x30, 0x02, 0xee, 0x0b, 0xf3,
	0x93, 0x9d, 0xdc, 0xde, 0xa2, 0xb5, 0xa0, 0x08, 0x75, 0xee, 0x0b, 0xba, 0x43, 0xf2, 0xc0, 0xec,
	0xb9, 0xcc, 0x0b, 0x3b, 0xa1, 0xf9, 0xa9, 0x52, 0x5d, 0x8b, 0x28, 0xda, 0xa9, 0x7b, 0x1c, 0x76,
	0x42, 0xfa, 0x2e, 0x59, 0x06, 0x44, 0x9b, 0x4b, 0x81, 0x98, 0xcf, 0x00, 0x03, 0xe3, 0x0e, 0xb9,
	0x14, 0x80, 0xfa, 0x92, 0x6c, 0xe1, 0xc2, 0x24, 0xa7, 0x13, 0xcd, 0x85, 0xb2, 0x06, 0xc2, 0x34,
	0x61, 0x3e, 0x1b, 0x00, 0x48, 0x4e, 0x28, 0x98, 0x8c, 0xb2, 0xd2, 0xc4, 0xf1, 0xa1, 0x99, 0xcd,
	0xd8, 0x9a, 0x30, 0x34, 0xbb, 0x1d, 0xf7, 0xb2, 0xba, 0xe6, 0xf3, 0x37, 0x2c, 0xe2, 0x41, 0x47,
	0x30, 0xdf, 0x0d, 0x7a, 0xb1, 0x90, 0xe6, 0x36, 0x0c, 0xdf, 0xce, 0x80, 0x6a, 0xfc, 0x8d, 0xa5,
	0x20, 0x35, 0x44, 0xd0, 0xc7, 0x64, 0x19, 0xb8, 0x1e, 0x0f, 0x3a, 0x3d, 0xe5, 0xb6, 0xcc, 0x3b,
	0x30, 0x66, 0x84, 0x4a, 0x9f, 0x93, 0x79, 0x3c, 0x8f, 0xd2, 0xbc, 0xb7, 0x73, 0x73, 0x6f, 0x69,
	0xd2, 0x29, 0x43, 0x0f, 0x66, 0x25, 0x40, 0x65, 0x10, 0xc3, 0xae, 0x08, 0x58, 0xa7, 0xe7, 0x7a,
	0x8e, 0xfa, 0x9a, 0xfb, 0xa8, 0x88, 0x8a, 0xf8, 0x42, 0xd1, 0xaa, 0x8e, 0xb2, 0xc6, 0xda, 0xe5,
	0x02, 0x4a, 0x9a, 0x0f, 0x94, 0x53, 0xb1, 0xf2, 0x48, 0x04, 0x94, 0x54, 0xe7, 0x6b, 0x48, 0x5b,
	0xd5, 0xd1, 0x97, 0x2c, 0x12, 0x3e, 0x77, 0x03, 0x37, 0xe8, 0x98, 0x0f, 0xf1, 0x7c, 0x65, 0x54,
	0xf6, 0x85, 0x42, 0x58, 0x09, 0x80, 0x7e, 0x42, 0x36, 0x60, 0x26, 0xe7, 0x61, 0xc4, 0x94, 0x41,
	0x63, 0x91, 0xf8, 0x6d, 0x4f, 0xc8, 0x58, 0x9a, 0x7b, 0x60, 0xe5, 0xd6, 0x14, 0xf7, 0x28, 0x8c,
	0x7e, 0x19, 0xba, 0x81, 0xa5, 0x59, 0xf4, 0x2b, 0x92, 0x97, 0xca, 0xf0, 0xbb, 0x41, 0xdf, 0x55,
	0x8b, 0xf9, 0xfe, 0xb4, 0xef, 0xae, 0x02, 0xc0, 0x5a, 0x52, 0x68, 0xfc, 0x0d, 0x83, 0x23, 0x61,
	0xf7, 0xd3, 0xc1, 0x4f, 0x7e, 0x6c, 0xb0, 0x42, 0x27, 0x83, 0x1f, 0x92, 0x42, 0xa2, 0x03, 0xe8,
	0x1e, 0x3e, 0x40, 0x17, 0xa5, 0x89, 0xe8, 0x18, 0xf6, 0xc9, 0x9a, 0x76, 0xb1, 0xe8, 0x4c, 0x34,
	0xf4, 0x29, 0xfa, 0x3d, 0x64, 0xa1, 0x2f, 0x41, 0xfc, 0xe7, 0x64, 0x53, 0xbc, 0xb1, 0xbd, 0x9e,
	0x54, 0x16, 0x0f, 0xfc, 0x17, 0xf7, 0x05, 0x6a, 0xd9, 0x87, 0x30, 0xe6, 0x76, 0xca, 0x6e, 0xa5,
	0xdc, 0xaa, 0x93, 0xf5, 0xaf, 0x8e, 0xdb, 0x77, 0xa5, 0x7a, 0xa3, 0xeb, 0x98, 0x1f, 0x0d, 0xf9,
	0xd7, 0xb2, 0xe6, 0x54, 0x9d, 0xac, 0xeb, 0x94, 0xf6, 0x85, 0x70, 0x7a, 0x9e, 0x40, 0x73, 0xf6,
	0x6c, 0xc8, 0x75, 0x36, 0x35, 0x0f, 0x2c, 0xda, 0x14, 0x1f, 0xfe, 0xf1, 0x34, 0x1f, 0x9e, 0x79,
	0x47, 0x3b, 0xe2, 0xf6, 0xa5, 0x88, 0x59, 0x14, 0xf6, 0x02, 0xc7, 0x7c, 0x3e, 0xf4, 0x8e, 0x43,
	0xe4, 0x59, 0x8a, 0x45, 0x7f, 0x46, 0xee, 0x24, 0x63, 0x7e, 0xdb, 0x13, 0x3d, 0xc1, 0x1c, 0xc1,
	0x1d, 0xcf, 0x0d, 0xf4, 0xec, 0x3e, 0x87, 0x91, 0xa6, 0x86, 0x7c, 0xab, 0x10, 0x65, 0x0d, 0x80,
	0x29, 0xfe, 0xbf, 0x1c, 0xb9, 0x3b, 0x65, 0x3c, 0x3a, 0x9f, 0x2f, 0xc0, 0x8c, 0xed, 0xe0, 0x0e,
	0x57, 0x5a, 0x13, 0xe4, 0xa0, 0x13, 0x7a, 0x78, 0xc9, 0xa6, 0x73, 0x59, 0x3d, 0x8c, 0x7c, 0xee,
	0x59, 0x5b, 0xf1, 0x34, 0x04, 0xfd, 0x29, 0xb9, 0x83, 0x9e, 0xb6, 0xad, 0x0e, 0x87, 0x88, 0x98,
	0xf4, 0xc2, 0x58, 0xb2, 0x38, 0x64, 0xe7, 0xae, 0xe7, 0x99, 0x3f, 0xc1, 0xd8, 0x0a, 0x20, 0x87,
	0x88, 0x68, 0x2a, 0x40, 0x2b, 0x3c, 0x72, 0x3d, 0x4f, 0x05, 0x66, 0xc3, 0xa3, 0xd1, 0xf6, 0x68,
	0x4f, 0xf1, 0xe5, 0xf8, 0x60, 0xb0, 0xeb, 0x2f, 0xd0, 0x6b, 0x7c, 0x41, 0xcc, 0x91, 0x57, 0x0f,
	0x9c, 0xd5, 0x01, 0xea, 0xd0, 0xd0, 0x7b, 0x53, 0x8f, 0x75, 0x8f, 0x10, 0x19, 0x7a, 0x21, 0x2e,
	0x9c, 0xf9, 0x15, 0x9c, 0xb9, 0x45, 0x45, 0x81, 0xef, 0xa3, 0x7b, 0xc4, 0x50, 0x3e, 0x41, 0x45,
	0x74, 0x5d, 0x75, 0xde, 0x1c, 0xf1, 0xc6, 0xfc, 0x29, 0x9a, 0xa1, 0x76, 0x18, 0x37, 0x81, 0x5c,
	0x55, 0x54, 0xfa, 0x31, 0xb9, 0x0d, 0xc1, 0x37, 0xb3, 0x3d, 0x1e, 0x64, 0x0d, 0xe5, 0xcf, 0x30,
	0x80, 0x02, 0x66, 0xc9, 0xe3, 0xc1, 0xc0, 0x48, 0x7e, 0x45, 0x96, 0x22, 0xc1, 0x9d, 0x6b, 0x66,
	0x5f, 0x08, 0xfb, 0xd2, 0xfc, 0x7a, 0x27, 0xb7, 0xb7, 0xf4, 0x7c, 0x5b, 0x1f, 0xc4, 0x9a, 0xec,
	0x58, 0x8a, 0x59, 0x52, 0x3c, 0xb5, 0xbe, 0x3d, 0x69, 0x91, 0x28, 0xa5, 0xd0, 0x32, 0x79, 0x60,
	0xf7, 0x64, 0x1c, 0xfa, 0x60, 0x73, 0x26, 0x5a, 0xf7, 0x9f, 0xc3, 0x9b, 0xef, 0x20, 0x4c, 0xd9,
	0x9d, 0x71, 0x13, 0x3f, 0x4d, 0x4a, 0x66, 0xfe, 0xbf, 0x98, 0x26, 0x65, 0xf0, 0x21, 0x18, 0x16,
	0xdb, 0x17, 0xdc, 0xf3, 0x04, 0x18, 0x79, 0xb5, 0x33, 0x66, 0x31, 0x09, 0x8b, 0x4b, 0x09, 0x03,
	0x76, 0x6c, 0xb0, 0xd1, 0x52, 0xf0, 0xc8, 0xbe, 0x60, 0x6d, 0xc1, 0xed, 0x50, 0x2d, 0x99, 0x8a,
	0x63, 0xcc, 0x43, 0x18, 0x85, 0x1b, 0xdd, 0x04, 0xc0, 0x21, 0xf0, 0x8b, 0xc0, 0xa6, 0x1f, 0x90,
	0xd5, 0xac, 0x63, 0x41, 0xcb, 0x52, 0xc2, 0x70, 0x24, 0xc3, 0x40, 0xc3, 0x22, 0xc8, 0xda, 0x70,
	0x84, 0x8a, 0xe7, 0xa1, 0x0c, 0xe7, 0x41, 0x2f, 0x74, 0xe5, 0x65, 0x26, 0x4a, 0xad, 0xd5, 0xf0,
	0x24, 0x6c, 0x5d, 0xb2, 0x11, 0x3a, 0x3b, 0x0d, 0x2e, 0x83, 0xf0, 0x2a, 0xb0, 0x56, 0xb3, 0x51,
	0x2d, 0xa0, 0x77, 0x9f, 0x91, 0x5b, 0x78, 0x00, 0xe6, 0xc8, 0xcc, 0x69, 0xd5, 0xb8, 0x41, 0x57,
	0x49, 0xe1, 0xa8, 0x5a, 0x2f, 0x57, 0xeb, 0x2f, 0x18, 0x44, 0x1c, 0x46, 0x8e, 0xe6, 0xc9, 0x42,
	0xb5, 0xae, 0x9f, 0x66, 0x76, 0xff, 0xff, 0xcd, 0xe1, 0x0c, 0x0b, 0xcd, 0xab, 0x0a, 0x55, 0x41,
	0xdd, 0xc7, 0x42, 0x55, 0xa0, 0x62, 0xc4, 0x20, 0x45, 0x30, 0x1c, 0xaa, 0x22, 0xa1, 0xea, 0xa8,
	0xe0, 0x4b, 0x33, 0x21, 0xa0, 0xb8, 0x09, 0x01, 0x05, 0x41, 0x12, 0x84, 0x14, 0x5f, 0x0f, 0x3c,
	0xe5, 0x2c, 0x18, 0xfd, 0x77, 0xa7, 0x19, 0xfd, 0xfd, 0x89, 0x5e, 0x33, 0x13, 0xc8, 0xdc, 0x1a,
	0x0a, 0x64, 0xf6, 0xc9, 0xda, 0x90, 0x17, 0x94, 0xa0, 0xae, 0x10, 0xf4, 0x2e, 0x58, 0xab, 0x19,
	0xe7, 0x87, 0x7a, 0xac, 0xd2, 0x3f, 0x9e, 0xa4, 0x7f, 0xf3, 0x98, 0xfe, 0x71, 0x9d, 0xfe, 0xdd,
	0x23, 0x04, 0x1d, 0x13, 0xeb, 0xb8, 0x0e, 0x24, 0x40, 0x73, 0xd6, 0x22, 0x52, 0x5e, 0xb8, 0xce,
	0xf6, 0x2b, 0xb2, 0x94, 0x4d, 0x49, 0x29, 0x99, 0x85, 0x6f, 0xcd, 0xc1, 0xb7, 0xc2, 0x6f, 0x25,
	0x5c, 0x26, 0xd3, 0xc4, 0x25, 0x9a, 0x97, 0x7a, 0x9e, 0xd9, 0xb4, 0x73, 0x76, 0x28, 0xed, 0xdc,
	0xfd, 0x8b, 0xc1, 0x8e, 0x1c, 0x87, 0xed, 0xf6, 0x7f, 0x8f, 0x1d, 0xc9, 0xcc, 0x64, 0x1f, 0x7e,
	0x8f, 0xee, 0xc8, 0xbb, 0x64, 0x39, 0x7b, 0x7c, 0xf5, 0xc6, 0xcc, 0x5a, 0xf9, 0xc1, 0x69, 0xc5,
	0x1c, 0x26, 0xb3, 0xa6, 0x73, 0x23, 0x6b, 0xaa, 0x32, 0xb2, 0xac, 0x10, 0x3b, 0xb2, 0x61, 0x53,
	0xe6, 0xac, 0xc2, 0x40, 0x4a, 0x29, 0xb2, 0x95, 0x6b, 0xcb, 0xe2, 0x20, 0xd3, 0x8e, 0xb9, 0xdf,
	0x85, 0x5d, 0x9a, 0xb7, 0xd6, 0x06, 0xe8, 0x56, 0xc2, 0xda, 0xfe, 0x29, 0x59, 0xca, 0x4c, 0xfc,
	0x8f, 0xdc, 0xaf, 0xdd, 0xdf, 0xcf, 0x90, 0x15, 0x65, 0x08, 0x8f, 0x05, 0xef, 0x83, 0xd1, 0x86,
	0x1d, 0x59, 0xf2, 0x94, 0x44, 0x7d, 0x96, 0x73, 0x98, 0x62, 0x00, 0x09, 0x01, 0x75, 0x9d, 0x92,
	0x21, 0x7f, 0x06, 0xce, 0xfa, 0xfa, 0x20, 0x84, 0x67, 0x6a, 0x82, 0xfa, 0x94, 0xe3, 0x73, 0xb1,
	0x56, 0xb1, 0x4e, 0x8f, 0x2b, 0x4d, 0xd6, 0x6c, 0x15, 0x5b, 0x15, 0x56, 0xad, 0x57, 0x5b, 0x98,
	0xc3, 0xa1, 0xbc, 0xf7, 0xc8, 0x8a, 0x07, 0xef, 0x67, 0x8e, 0x88, 0x85, 0x1d, 0x0b, 0x07, 0x36,
	0x72, 0xc1, 0x5a, 0x46, 0x72, 0x59, 0x53, 0x55, 0x06, 0x7d, 0xee, 0x46, 0x32, 0x66, 0x6d, 0x2f,
	0x0c, 0x1d, 0x76, 0xc1, 0xbb, 0x5d, 0x11, 0x08, 0x47, 0x6b, 0x1a, 0x05, 0xde, 0xa1, 0x62, 0xbd,
	0xd4, 0x1c, 0xb5, 0xa2, 0x8e, 0x2b, 0x6d, 0x1e, 0xe9, 0xcc, 0x4c, 0xa5, 0xc4, 0x3d, 0x2f, 0x96,
	0xb0, 0x8b, 0x0b, 0xd6, 0x9a, 0x66, 0x82, 0xd9, 0xb4, 0x90, 0xa5, 0xa6, 0xe3, 0x73, 0x29, 0x95,
	0xa9, 0xb6, 0xc3, 0x20, 0x10, 0x76, 0xac, 0xcf, 0xd9, 0xb2, 0x22, 0x97, 0x53, 0xea, 0xee, 0xdf,
	0x18, 0xc4, 0x28, 0xa5, 0x5a, 0xa4, 0x37, 0x60, 0x9d, 0xcc, 0x68, 0x4d, 0x9e, 0xd3, 0x9a, 0x3c,
	0xe3, 0x3a, 0xea, 0x60, 0x5f, 0x88, 0x28, 0x4c, 0x76, 0xa0, 0x60, 0xcd, 0xa9, 0xc7, 0xaa, 0x43,
	0xbf, 0x26, 0xb3, 0x6a, 0x2b, 0xe0, 0x83, 0x97, 0x9f, 0xd3, 0xec, 0x2a, 0x96, 0x58, 0xab, 0x52,
	0xac, 0x1d, 0x6c, 0x64, 0x9f, 0xd8, 0x8b, 0x93, 0x93, 0x32, 0x7b, 0x71, 0xfa, 0xba, 0x69, 0xc1,
	0xb8, 0x74, 0xbf, 0xe7, 0x32, 0xfb, 0x4d, 0xc9, 0xac, 0x8a, 0x0b, 0x74, 0x06, 0x0b, 0xbf, 0x95,
	0x0e, 0xa4, 0x39, 0x7a, 0x1e, 0x34, 0x38, 0xcd, 0xce, 0x21, 0x01, 0x8f, 0xb9, 0x8e, 0xbb, 0x0a,
	0x98, 0x61, 0x2b, 0x0a, 0xc6, 0x5b, 0x9b, 0xea, 0x04, 0xc5, 0x9c, 0xbd, 0xe9, 0x42, 0xd5, 0xa1,
	0x60, 0xcd, 0xa9, 0xc7, 0xef, 0xba, 0x4a, 0xab, 0x35, 0x83, 0xf1, 0x2b, 0x1e, 0x39, 0xc2, 0x81,
	0x3a, 0x43, 0xc1, 0x2a, 0x20, 0xa0, 0x88, 0x44, 0x7a, 0x42, 0x0a, 0x7a, 0x7b, 0xb5, 0xd5, 0x32,
	0xb2, 0xa9, 0x3a, 0xac, 0x5f, 0xaa, 0x7d, 0x3d, 0xc9, 0xe2, 0x03, 0x03, 0xbe, 0xf8, 0xb8, 0x52,
	0x3c, 0x4b, 0x4a, 0x5b, 0x79, 0x2f, 0x83, 0xa0, 0x8f, 0x88, 0x56, 0x0c, 0xf0, 0x68, 0x61, 0x20,
	0xcd, 0xbb, 0xf8, 0x5e, 0xa4, 0x16, 0x91, 0x48, 0xef, 0x90, 0x79, 0xfb, 0x82, 0x07, 0x81, 0xf0,
	0xcc, 0x55, 0xc5, 0x3f, 0xc8, 0x7d, 0x6e, 0x25, 0x14, 0x35, 0xf9, 0x6e, 0xe4, 0xfe, 0x6f, 0x15,
	0xc9, 0x9d, 0xeb, 0xa8, 0x83, 0xa2, 0x10, 0x20, 0x97, 0xc5, 0x39, 0x06, 0x1d, 0x7b, 0xc4, 0x48,
	0x5d, 0x76, 0xb2, 0x83, 0xeb, 0x90, 0xa6, 0x2c, 0x27, 0xf4, 0x97, 0xb8, 0x93, 0xdf, 0x91, 0xf5,
	0xa4, 0x78, 0x97, 0xf8, 0xf6, 0x4c, 0xa6, 0xfc, 0x87, 0x16, 0xf1, 0x68, 0x77, 0x0c, 0xa1, 0xe6,
	0x2a, 0x82, 0xe1, 0x29, 0x6c, 0xc0, 0x14, 0x0a, 0x9a, 0xac, 0x67, 0x70, 0x44, 0x08, 0x58, 0x5e,
	0x06, 0x1a, 0xb5, 0x39, 0x55, 0xa3, 0xd6, 0x86, 0x34, 0xaa, 0x7e, 0xa2, 0xfe, 0xb3, 0x16, 0x61,
	0x68, 0x4b, 0xe9, 0xd4, 0x3b, 0x24, 0x8f, 0x72, 0x22, 0x1e, 0xab, 0x14, 0xeb, 0x09, 0xa6, 0x6e,
	0x40, 0xb3, 0x80, 0x44, 0x3f, 0x20, 0xb4, 0x7b, 0x15, 0x39, 0xcc, 0xbe, 0x6e, 0x8b, 0x88, 0xd9,
	0xfc, 0x1c, 0x4c, 0x23, 0x26, 0xbb, 0x2b, 0x8a, 0x53, 0x52, 0x8c, 0x12, 0x3f, 0x57, 0xd6, 0xf1,
	0x23, 0xb2, 0x3e, 0x0a, 0x06, 0x9d, 0xdd, 0x02, 0x9d, 0x5d, 0x1d, 0x82, 0x83, 0xd1, 0xfe, 0x92,
	0x6c, 0xa6, 0x8b, 0x1e, 0xf1, 0xc0, 0x09, 0xfd, 0xf4, 0xc3, 0xb7, 0xd3, 0xba, 0xe3, 0x7a, 0x02,
	0xb1, 0x00, 0xa1, 0xd7, 0xe0, 0x4b, 0xb2, 0x35, 0x71, 0x68, 0xdb, 0x8d, 0x31, 0x8b, 0x9b, 0xb7,
	0x36, 0xc6, 0x07, 0x1e, 0xba, 0xb1, 0xa4, 0x35, 0x42, 0xde, 0x74, 0x59, 0x3b, 0x0c, 0x7a, 0x12,
	0x52, 0x61, 0xe5, 0x2d, 0xf6, 0xb5, 0xb7, 0x18, 0x39, 0xe5, 0x63, 0x84, 0xef, 0x1a, 0x87, 0x6a,
	0x9c, 0xb5, 0xf8, 0xa6, 0x7b, 0x88, 0x02, 0x94, 0x19, 0x8d, 0x78, 0x70, 0xa9, 0x82, 0xb6, 0xa0,
	0x23, 0xcc, 0x7b, 0x3b, 0xb9, 0xbd, 0x55, 0x8b, 0x28, 0x52, 0x09, 0x28, 0xf4, 0x2e, 0x59, 0xb4,
	0xb9, 0x2f, 0x22, 0xee, 0xf3, 0x00, 0xd2, 0xe3, 0x05, 0x6b, 0x40, 0xa0, 0x9f, 0x91, 0xcd, 0xac,
	0x2f, 0xe8, 0x46, 0xa1, 0xd3, 0xb3, 0x63, 0xa8, 0x91, 0x61, 0x9a, 0xbc, 0x3e, 0xf0, 0x06, 0x0d,
	0x64, 0x56, 0x1d, 0x49, 0x7f, 0x42, 0xb6, 0xd0, 0x78, 0xfb, 0xfd, 0x2e, 0xeb, 0x87, 0xb1, 0xc8,
	0x06, 0x9a, 0x58, 0x8b, 0xba, 0x0d, 0x80, 0x5a, 0xbf, 0x7b, 0x16, 0xc6, 0x62, 0x10, 0x62, 0xd6,
	0xc9, 0xaa, 0x0e, 0x17, 0x33, 0x65, 0x9e, 0x77, 0xfe, 0xe0, 0x32, 0xcf, 0x0a, 0x0e, 0x4e, 0x31,
	0x60, 0xac, 0x79, 0x5f, 0x05, 0x25, 0x02, 0x14, 0x92, 0x75, 0x55, 0x42, 0xe6, 0x40, 0xc2, 0x3e,
	0x6b, 0xd1, 0x84, 0xa7, 0x34, 0xae, 0x01, 0x9c, 0x29, 0xb5, 0xdf, 0x77, 0xa7, 0xd4, 0x7e, 0x9f,
	0x90, 0x55, 0x58, 0xdf, 0xd8, 0x15, 0x11, 0xeb, 0x75, 0x55, 0x3c, 0xee, 0x98, 0x8f, 0x00, 0xbc,
	0xa2, 0x18, 0x2d, 0x57, 0x44, 0xa7, 0x48, 0x9e, 0x5a, 0x7a, 0x7d, 0x3c, 0xb5, 0xf4, 0xba, 0x47,
	0x0c, 0x9b, 0x07, 0x4c, 0xf0, 0x28, 0x60, 0x91, 0x50, 0x96, 0x4c, 0x9a, 0xef, 0xa1, 0x17, 0xb0,
	0x79, 0x50, 0xe1, 0x51, 0x60, 0x21, 0x95, 0xbe, 0x22, 0x6b, 0x1e, 0x14, 0x12, 0xbb, 0xc2, 0x8e,
	0x79, 0x1c, 0x46, 0x78, 0xfc, 0xf6, 0xfe, 0xb8, 0xe3, 0xb7, 0xaa, 0x64, 0x34, 0x13, 0x11, 0x70,
	0x0c, 0xdf, 0x27, 0xab, 0x57, 0x5c, 0xc2, 0x46, 0x7a, 0x5c, 0xc6, 0xa0, 0x07, 0x50, 0x0d, 0x58,
	0xb0, 0x96, 0xaf, 0xb8, 0xac, 0xf5, 0xbb, 0xc7, 0x5c, 0xc6, 0x6a, 0xff, 0xe9, 0x21, 0x59, 0xee,
	0x8a, 0xc0, 0x51, 0xf1, 0x3a, 0xc7, 0xb9, 0x3e, 0x05, 0xf5, 0xbd, 0x33, 0x48, 0x75, 0x1a, 0xc8,
	0xaf, 0xf4, 0x45, 0x10, 0x83, 0x65, 0xb6, 0x0a, 0x7a, 0x48, 0x11, 0xbf, 0xe3, 0x8c, 0x6c, 0x0d,
	0xcb, 0x60, 0x61, 0xc0, 0xfa, 0xae, 0x1d, 0x87, 0xd1, 0xb5, 0xf9, 0xe1, 0x8f, 0x8b, 0xdb, 0x18,
	0x12, 0x77, 0x12, 0x9c, 0xe1, 0x50, 0xfa, 0x1b, 0xb2, 0x06, 0xfb, 0xe4, 0xfb, 0x11, 0x6b, 0x87,
	0xa1, 0xd4, 0x66, 0x71, 0x3f, 0x5b, 0xf9, 0xab, 0xa8, 0x25, 0xa9, 0xd5, 0xac, 0x43, 0xc5, 0x07,
	0x0d, 0x33, 0x2f, 0xd9, 0x18, 0x91, 0xd5, 0xc3, 0x40, 0x58, 0x86, 0x92, 0x56, 0xf3, 0xa3, 0x94,
	0x4c, 0x3f, 0x25, 0x1b, 0x98, 0x95, 0x77, 0x43, 0x37, 0x88, 0x19, 0x77, 0xbe, 0xef, 0xc9, 0xd8,
	0x17, 0x41, 0x0c, 0x85, 0x8a, 0x55, 0x6b, 0x1d, 0xb8, 0x0d, 0xc5, 0x2c, 0xa6, 0xbc, 0xed, 0x0e,
	0xd9, 0x9c, 0x72, 0x8a, 0x95, 0x03, 0x4d, 0xfb, 0x2f, 0x05, 0x0b, 0x7e, 0x2b, 0x07, 0x9a, 0x58,
	0x07, 0x70, 0xe1, 0x33, 0xd6, 0xbc, 0x3e, 0xeb, 0x98, 0xe1, 0xf6, 0x22, 0x5b, 0xb0, 0x4b, 0x71,
	0x0d, 0x9e, 0x7c, 0x56, 0x65, 0xb8, 0x8a, 0xf2, 0x8d, 0xb8, 0xde, 0xfd, 0xfb, 0x5b, 0x64, 0xb5,
	0x04, 0x6f, 0x51, 0xdb, 0x5a, 0x16, 0x31, 0x77, 0x3d, 0x39, 0x5c, 0x9a, 0xcc, 0x8d, 0x94, 0x26,
	0xb7, 0x08, 0xfc, 0x66, 0x31, 0xef, 0xe8, 0x98, 0x16, 0xf2, 0x82, 0x16, 0xef, 0x64, 0x53, 0x84,
	0xd9, 0x89, 0xb5, 0x4e, 0xa8, 0x53, 0x62, 0x90, 0x0a, 0x42, 0xa6, 0x54, 0x32, 0xe7, 0x26, 0x54,
	0x32, 0xf7, 0x88, 0xa1, 0x51, 0x81, 0x72, 0x63, 0x80, 0x9b, 0x07, 0xdc, 0x32, 0xe2, 0x14, 0x19,
	0x90, 0x0f, 0x49, 0x01, 0x53, 0xf1, 0xd0, 0xef, 0x7a, 0x22, 0x16, 0x10, 0xa1, 0x2e, 0xa0, 0xb8,
	0x92, 0xa6, 0xd1, 0x5d, 0x0d, 0x52, 0x72, 0x58, 0x2f, 0xf2, 0xcc, 0x75, 0xf8, 0x94, 0xa5, 0x64,
	0x56, 0xa7, 0x91, 0x07, 0xe5, 0x7d, 0x28, 0x11, 0xc2, 0x3a, 0x2c, 0x02, 0x60, 0x11, 0x28, 0xb0,
	0x10, 0x77, 0x08, 0x3e, 0xc0, 0x4a, 0x10, 0x5c, 0x25, 0x20, 0xa8, 0xa5, 0xd8, 0x22, 0x0b, 0x69,
	0x79, 0x11, 0xeb, 0xdc, 0xf3, 0x1d, 0x5d, 0x5a, 0x4c, 0xc5, 0xc2, 0x37, 0x60, 0xc0, 0x83, 0x92,
	0x60, 0xfa, 0x8f, 0xc9, 0x0a, 0xb2, 0x07, 0xeb, 0x51, 0x00, 0x4c, 0x01, 0xc8, 0xe9, 0x82, 0x3c,
	0x21, 0xab, 0x09, 0x6e, 0xb0, 0x22, 0xcb, 0x80, 0x5c, 0xd1, 0xc8, 0x74, 0x49, 0x28, 0x99, 0x55,
	0x9a, 0xa9, 0x63, 0x20, 0xf8, 0x3d, 0xea, 0x03, 0x8c, 0x31, 0x1f, 0xb0, 0x43, 0xf2, 0xae, 0x64,
	0x17, 0xa1, 0x8f, 0x36, 0x12, 0x02, 0x95, 0x05, 0x8b, 0xb8, 0xf2, 0x65, 0xe8, 0x83, 0x69, 0x9c,
	0x92, 0xf9, 0xd3, 0x29, 0x99, 0x7f, 0x91, 0xdc, 0x1b, 0x81, 0xb2, 0x38, 0xbc, 0x14, 0x69, 0xb9,
	0x04, 0x2a, 0xfc, 0xb3, 0xd6, 0xb6, 0x3d, 0x34, 0xac, 0xa5, 0x20, 0xda, 0x13, 0xec, 0xfe, 0x53,
	0x8e, 0x98, 0x5a, 0x5d, 0x5d, 0x5f, 0x38, 0x68, 0xe6, 0x12, 0xad, 0x7d, 0x97, 0x2c, 0xbb, 0xb1,
	0xf0, 0x33, 0x51, 0x13, 0x86, 0xb3, 0x79, 0x45, 0x4d, 0x83, 0xa6, 0xc7, 0x64, 0xc5, 0x55, 0x36,
	0xbc, 0xdb, 0xf5, 0xae, 0x99, 0x1d, 0xa9, 0x2c, 0x01, 0x03, 0xfa, 0x82, 0x2b, 0x9b, 0x40, 0x2d,
	0x29, 0xa2, 0x52, 0x10, 0x57, 0x42, 0x9a, 0xe3, 0x30, 0x27, 0x0a, 0xbb, 0x3a, 0x90, 0x5f, 0x72,
	0x25, 0xbc, 0xba, 0x1c, 0x85, 0x5d, 0xb5, 0x93, 0x19, 0x0f, 0x86, 0x59, 0xf1, 0x22, 0x4f, 0xbd,
	0xd6, 0x06, 0x99, 0x0b, 0x23, 0xb7, 0xe3, 0x06, 0xba, 0xb1, 0xa8, 0x9f, 0x76, 0xff, 0x36, 0x47,
	0xb6, 0xf1, 0x2b, 0x0e, 0xa3, 0x90, 0x3b, 0x36, 0x97, 0x71, 0x09, 0x43, 0xbf, 0x6a, 0x70, 0x1e,
	0x2a, 0xa9, 0x3a, 0x12, 0x4c, 0xf2, 0xce, 0x82, 0xb5, 0xa8, 0x29, 0x55, 0x07, 0x23, 0xa0, 0x5e,
	0x10, 0x47, 0xd7, 0xd0, 0x1e, 0x85, 0x8f, 0x5c, 0x54, 0x11, 0x10, 0xd0, 0x4a, 0xa1, 0xa3, 0x76,
	0x6e, 0xc9, 0x11, 0x58, 0xb5, 0x72, 0xc3, 0x40, 0x9f, 0xd2, 0x2c, 0x49, 0x9d, 0x91, 0xa4, 0x86,
	0x8e, 0x52, 0x66, 0x01, 0x93, 0x4f, 0x88, 0x4a, 0xcc, 0xee, 0xef, 0x3e, 0x48, 0x9b, 0x69, 0x30,
	0x5b, 0x95, 0x0f, 0xa3, 0x03, 0x1f, 0xcd, 0x87, 0x81, 0x5a, 0x55, 0xbe, 0x2c, 0xcd, 0x68, 0x67,
	0xc0, 0x2a, 0x6f, 0x4c, 0x8e, 0x51, 0x06, 0x39, 0xec, 0x97, 0x24, 0xef, 0x89, 0xf3, 0x98, 0x25,
	0xc3, 0xe6, 0xdf, 0x3a, 0x6c, 0x49, 0x61, 0x6b, 0x7a, 0xe8, 0x50, 0xe7, 0x6e, 0x69, 0xa4, 0x73,
	0x77, 0x5f, 0x65, 0xe6, 0x51, 0x1f, 0x99, 0x90, 0xf4, 0x1e, 0xe4, 0x9e, 0xa9, 0xe4, 0x5c, 0xd1,
	0xd0, 0x22, 0xa5, 0xad, 0x3b, 0x58, 0xa0, 0x82, 0xb5, 0x90, 0x74, 0xee, 0x54, 0x96, 0x95, 0xb8,
	0x9b, 0xa4, 0x4e, 0x4e, 0xa0, 0xf7, 0x97, 0x78, 0xb2, 0xa4, 0x20, 0x9e, 0x76, 0xf8, 0x66, 0x27,
	0x74, 0xf8, 0x60, 0xe2, 0xe3, 0x1d, 0x3e, 0x93, 0xcc, 0x27, 0xa9, 0xdb, 0x2d, 0x34, 0x9f, 0xfa,
	0x91, 0x96, 0x09, 0x66, 0xb2, 0xe8, 0x84, 0xf2, 0x20, 0xf2, 0xee, 0x04, 0x91, 0x78, 0x00, 0x94,
	0x27, 0x9a, 0xaf, 0xd6, 0xcf, 0x8a, 0xc7, 0xd5, 0xb2, 0xb5, 0xe8, 0x25, 0x34, 0xa5, 0x1f, 0xdc,
	0xf3, 0xc2, 0x2b, 0x66, 0x5f, 0x08, 0x1e, 0xcb, 0xa4, 0xdb, 0x0b, 0xb4, 0x12, 0x90, 0xd4, 0x49,
	0x39, 0x77, 0x3d, 0x8f, 0x5d, 0xb9, 0xf1, 0x05, 0x6b, 0x87, 0xb1, 0xd4, 0x3d, 0xdb, 0xbc, 0xa2,
	0xbe, 0x72, 0xe3, 0x8b, 0xc3, 0x30, 0x96, 0x58, 0x38, 0x88, 0xa3, 0x10, 0xd7, 0x08, 0xdb, 0xb4,
	0x8b, 0x40, 0x81, 0x45, 0x4a, 0x56, 0x10, 0x8c, 0xa3, 0xa1, 0xcd, 0x1f, 0xf7, 0x31, 0x4a, 0x3e,
	0xd0, 0xfd, 0x2b, 0x07, 0xcf, 0xa6, 0xb9, 0x0a, 0xdb, 0xaa, 0x3d, 0xea, 0x98, 0xc3, 0x41, 0xb3,
	0x9b, 0x9c, 0xe3, 0xf7, 0xc8, 0x4a, 0xdc, 0x8b, 0xc3, 0xc8, 0xe5, 0x1e, 0xf3, 0x84, 0x94, 0x61,
	0xa0, 0xd3, 0x9f, 0xe5, 0x84, 0x7c, 0x0c, 0xd4, 0xb4, 0x63, 0x9e, 0xf6, 0x0b, 0xd6, 0x32, 0x1d,
	0xf3, 0xa4, 0x4d, 0xf0, 0x94, 0xd0, 0x0c, 0x28, 0x29, 0x94, 0xac, 0x63, 0xcd, 0x70, 0xc0, 0xd1,
	0xc5, 0x92, 0xc7, 0xa4, 0xa0, 0xd5, 0x06, 0x1b, 0x15, 0x90, 0x21, 0x15, 0x94, 0xea, 0xe4, 0x91,
	0x6e, 0x01, 0x79, 0xa4, 0xcc, 0xb0, 0xf1, 0x5f, 0x2e, 0x33, 0x3c, 0x22, 0xcb, 0x41, 0xcf, 0x1f,
	0xc4, 0x69, 0x52, 0x37, 0x0b, 0x0b, 0x41, 0xcf, 0x4f, 0x23, 0x2f, 0x49, 0xef, 0xeb, 0x3e, 0x27,
	0xd4, 0x9f, 0x74, 0x13, 0x2e, 0x43, 0xa1, 0x5f, 0x91, 0x79, 0xdb, 0x67, 0x5d, 0xd7, 0xbe, 0x84,
	0xb4, 0x73, 0x38, 0xc6, 0x2b, 0xd5, 0x58, 0xa3, 0x5a, 0xfa, 0xe6, 0x60, 0x39, 0x79, 0xb2, 0x8a,
	0xf5, 0xf2, 0x49, 0xcd, 0x9a, 0xb3, 0xfd, 0x86, 0x6b, 0x5f, 0x2a, 0x97, 0x85, 0x56, 0x59, 0x77,
	0xc4, 0x66, 0xad, 0x79, 0x78, 0x86, 0x2c, 0xc9, 0x40, 0x9d, 0xd2, 0x13, 0x54, 0x99, 0xd7, 0x03,
	0xa5, 0x10, 0x07, 0xb3, 0x71, 0xd4, 0x13, 0xd6, 0x0a, 0x70, 0x9b, 0x29, 0x93, 0xb6, 0xc9, 0xc6,
	0x70, 0x37, 0x95, 0x45, 0xdc, 0x71, 0x79, 0x10, 0x43, 0xc8, 0xfc, 0x96, 0xae, 0xea, 0xda, 0x48,
	0x57, 0xf5, 0x65, 0xd1, 0x2a, 0x5b, 0xeb, 0x43, 0x2d, 0x55, 0x0b, 0x25, 0xd1, 0x3a, 0xc9, 0xc3,
	0x1e, 0xf4, 0x45, 0x24, 0xd5, 0x56, 0x3d, 0x02, 0xc9, 0xb7, 0x07, 0x92, 0xd5, 0x26, 0x9c, 0x21,
	0xf3, 0x60, 0x5d, 0xed, 0x00, 0x3b, 0xab, 0x58, 0xcd, 0xea, 0x49, 0x9d, 0x95, 0x4e, 0x2d, 0xab,
	0x52, 0x6f, 0x59, 0x4b, 0x9d, 0x01, 0x84, 0x36, 0xc8, 0x3a, 0x9a, 0x7b, 0x8c, 0xa9, 0x53, 0xdd,
	0x7d, 0x0c, 0xba, 0x7b, 0x7f, 0x48, 0x77, 0xc7, 0xbc, 0x8f, 0x45, 0xe3, 0x71, 0x8f, 0x04, 0x85,
	0x0d, 0x29, 0x21, 0xf4, 0x7a, 0x0f, 0xcf, 0xba, 0x7a, 0xfe, 0x46, 0x5c, 0xd3, 0x6d, 0xa2, 0x6c,
	0x55, 0xa7, 0x27, 0x5c, 0x47, 0xe7, 0xb0, 0xe9, 0x33, 0xfd, 0x8c, 0xdc, 0xee, 0x8a, 0x80, 0xab,
	0x55, 0x83, 0xba, 0x47, 0xba, 0x76, 0x1f, 0x24, 0xca, 0xb8, 0xa6, 0xf9, 0x50, 0x05, 0x49, 0xd6,
	0xe3, 0x23, 0x42, 0x87, 0x87, 0x39, 0x6e, 0x24, 0xb0, 0xef, 0xa6, 0xc6, 0x18, 0xd9, 0x31, 0x65,
	0x37, 0x02, 0x07, 0xef, 0x85, 0xdc, 0x49, 0x0f, 0xc5, 0x87, 0x49, 0x35, 0x8d, 0x3b, 0xfa, 0x38,
	0x40, 0x09, 0x33, 0x72, 0x85, 0x1c, 0xc4, 0xc5, 0x05, 0x8b, 0x20, 0x09, 0x8c, 0xcd, 0xbe, 0x0a,
	0xa0, 0xe1, 0xf5, 0x4c, 0x03, 0xaf, 0xdc, 0x40, 0x26, 0x4d, 0x38, 0xcd, 0x6a, 0x02, 0xe7, 0x95,
	0x1b, 0x48, 0x2c, 0x59, 0x44, 0x62, 0x08, 0x8c, 0xfd, 0xb7, 0x65, 0x45, 0xcf, 0x20, 0x1f, 0x91,
	0x65, 0x2f, 0x0c, 0x63, 0xd6, 0x11, 0x81, 0x88, 0x20, 0x7f, 0xfa, 0x58, 0x17, 0x52, 0xc2, 0x30,
	0x7e, 0x91, 0x10, 0x95, 0xb5, 0x03, 0x58, 0x52, 0xe5, 0xc1, 0x46, 0xdb, 0x92, 0xa2, 0x25, 0x35,
	0x9e, 0x07, 0x64, 0x9e, 0x7b, 0x9e, 0x7d, 0xc1, 0x63, 0x68, 0xb3, 0x2f, 0x1c, 0xdc, 0x3a, 0xe7,
	0x9e, 0x14, 0x56, 0x42, 0xa5, 0xbf, 0x24, 0x05, 0xb8, 0x0c, 0x15, 0xf7, 0x99, 0x23, 0x3c, 0x7e,
	0x0d, 0x9d, 0xf4, 0xe5, 0xc4, 0x09, 0xc1, 0x86, 0x97, 0xc3, 0x98, 0xb7, 0xce, 0xca, 0x8a, 0x7b,
	0xb0, 0x9c, 0xa1, 0xb0, 0x8f, 0x9f, 0x59, 0x4b, 0x0a, 0xd6, 0xea, 0x03, 0x13, 0x72, 0xb3, 0x4c,
	0x6a, 0x0c, 0xa6, 0xf3, 0x73, 0xd8, 0xfa, 0xe5, 0x41, 0x4e, 0x0c, 0xf6, 0x73, 0x50, 0x78, 0xf5,
	0x79, 0x17, 0xad, 0xe8, 0x17, 0x00, 0xd4, 0x85, 0xd7, 0x1a, 0xef, 0x82, 0x29, 0xfd, 0x80, 0xac,
	0x6a, 0x5c, 0xe6, 0x6e, 0x02, 0x76, 0xd3, 0xf4, 0xab, 0x32, 0xb7, 0x0d, 0x0c, 0x72, 0xd3, 0xe3,
	0x01, 0xf4, 0xcb, 0x16, 0x2c, 0xf5, 0x93, 0x9e, 0x91, 0x8d, 0x76, 0x12, 0x65, 0xb0, 0x34, 0xae,
	0x08, 0xce, 0x43, 0xf3, 0x00, 0xf4, 0x7a, 0x27, 0xab, 0xd7, 0x93, 0xe2, 0x11, 0x6b, 0xbd, 0x3d,
	0x29, 0x4a, 0xf9, 0x94, 0x6c, 0x60, 0xbd, 0x33, 0x2d, 0x77, 0x41, 0x04, 0xe2, 0x3a, 0xd0, 0x46,
	0x2b, 0x58, 0x58, 0x0d, 0x3d, 0xd6, 0x55, 0x2f, 0xcd, 0xc3, 0x82, 0x39, 0x6c, 0xbd, 0xeb, 0xe8,
	0x56, 0xda, 0x02, 0x12, 0xaa, 0x7a, 0x2f, 0x07, 0x8d, 0x04, 0xe8, 0x9d, 0x2d, 0xa8, 0xbd, 0x4c,
	0x3b, 0x08, 0xb4, 0x44, 0x96, 0xc5, 0x9b, 0x38, 0xe2, 0x2c, 0xb9, 0xcd, 0x66, 0x7e, 0x0d, 0x5f,
	0x31, 0xc9, 0x4d, 0x96, 0x2a, 0x0a, 0x59, 0x93, 0x1d, 0xab, 0x00, 0x63, 0x6a, 0x7a, 0x08, 0x7d,
	0x46, 0x16, 0x25, 0xef, 0x0b, 0x4c, 0x5a, 0x7f, 0x0e, 0x7d, 0xb7, 0xb5, 0x4c, 0xc0, 0xd1, 0xe4,
	0x7d, 0xa1, 0x76, 0xc9, 0x5a, 0x90, 0xfa, 0xd7, 0xd4, 0xe2, 0x6e, 0x71, 0x6a, 0x71, 0xf7, 0x5b,
	0x52, 0x40, 0x63, 0x1a, 0xf6, 0x62, 0x3b, 0xf4, 0x85, 0x79, 0x04, 0x3a, 0xa5, 0xdf, 0x53, 0x81,
	0xd0, 0xf6, 0x04, 0x59, 0x07, 0x9b, 0x97, 0x6c, 0x88, 0x90, 0x76, 0x9b, 0xf2, 0x7e, 0x86, 0x3a,
	0xa9, 0xf6, 0x5b, 0x9a, 0x54, 0xfb, 0x9d, 0xd0, 0x17, 0x28, 0x4f, 0xe8, 0x0b, 0x3c, 0x25, 0x34,
	0xd1, 0x3f, 0x37, 0x60, 0x5d, 0x8f, 0x5f, 0xab, 0xf8, 0xeb, 0x45, 0x56, 0xb1, 0x6a, 0x6e, 0xd0,
	0x40, 0x7a, 0x16, 0xcd, 0xdf, 0xa4, 0xe8, 0x97, 0x43, 0x68, 0xfe, 0x26, 0x41, 0x8f, 0x5e, 0x16,
	0xac, 0xfe, 0xe9, 0x97, 0x05, 0x4f, 0x09, 0xe9, 0xbb, 0xd2, 0x6d, 0xbb, 0x9e, 0x52, 0x89, 0x6f,
	0x40, 0xd0, 0x56, 0xa6, 0x3c, 0xab, 0xb6, 0xfa, 0x2c, 0x05, 0x1c, 0x6c, 0x4f, 0x20, 0xb2, 0x46,
	0xaf, 0xed, 0xb9, 0xb6, 0x95, 0x11, 0x34, 0xa9, 0xed, 0x71, 0x3c, 0xa9, 0xed, 0x71, 0x48, 0xee,
	0x67, 0x71, 0xbc, 0x17, 0x87, 0xcc, 0x8e, 0x84, 0xb2, 0x3d, 0x0c, 0x62, 0x2e, 0xb3, 0x06, 0x7b,
	0xb0, 0x3d, 0x18, 0x56, 0xec, 0xc5, 0x61, 0x09, 0x21, 0x18, 0x36, 0x4f, 0x6d, 0x9d, 0x34, 0xa6,
	0xb6, 0x4e, 0xe8, 0xe7, 0x64, 0xb3, 0x1b, 0x89, 0xbe, 0x1b, 0xf6, 0x64, 0x62, 0x2c, 0x41, 0x19,
	0x84, 0x34, 0xbf, 0xdd, 0xb9, 0xb9, 0x37, 0x6b, 0xdd, 0x4e, 0xd8, 0x68, 0x33, 0x6b, 0xc8, 0x1c,
	0x1a, 0xa7, 0x15, 0xb0, 0x2f, 0xa2, 0xc8, 0x75, 0x84, 0x69, 0x81, 0x12, 0xa4, 0xe3, 0x50, 0xe3,
	0x34, 0x93, 0x1e, 0x91, 0x9d, 0xec, 0x1c, 0x7b, 0x52, 0xc8, 0xb4, 0x3a, 0x17, 0x09, 0x3b, 0x8c,
	0x1c, 0x69, 0x36, 0xe1, 0x4b, 0xef, 0x0e, 0xa6, 0x7b, 0x2a, 0x85, 0xd4, 0xdb, 0x68, 0x21, 0x06,
	0xb2, 0x57, 0x1d, 0x18, 0x25, 0x1d, 0xf8, 0x57, 0x68, 0xb7, 0x75, 0xb0, 0xa3, 0x3b, 0xef, 0x9c,
	0x14, 0xba, 0xbc, 0x27, 0x95, 0x27, 0x88, 0x21, 0x9c, 0xf8, 0x0e, 0x76, 0xf6, 0xce, 0x88, 0xcd,
	0x6d, 0x28, 0x4c, 0x13, 0x21, 0x07, 0x0f, 0x26, 0x92, 0xd9, 0x69, 0xe0, 0xb9, 0xbe, 0x1b, 0x0b,
	0xc7, 0xca, 0x77, 0x33, 0x74, 0xfa, 0x11, 0x59, 0x1f, 0x94, 0x1b, 0x33, 0x79, 0xda, 0x6b, 0x74,
	0x4e, 0x49, 0xa5, 0x71, 0x50, 0x65, 0xfc, 0x19, 0xb9, 0x73, 0x25, 0xc4, 0xa5, 0x08, 0x1c, 0x36,
	0xe9, 0x66, 0xc9, 0xaf, 0xf0, 0x26, 0x86, 0x86, 0xb4, 0xc6, 0x2e, 0x98, 0x4c, 0x18, 0x9e, 0xbd,
	0x34, 0xf2, 0x3f, 0x26, 0x0d, 0xcf, 0xdc, 0x1d, 0x29, 0x92, 0x7b, 0xa3, 0xc3, 0x87, 0xef, 0x90,
	0xfc, 0x1a, 0x2f, 0x4d, 0x0d, 0x0b, 0x18, 0xba, 0x4a, 0xf2, 0x6b, 0xb2, 0x36, 0x12, 0x75, 0x41,
	0x08, 0xf0, 0x3f, 0xff, 0x84, 0x90, 0x6b, 0x75, 0x28, 0xe4, 0x82, 0x70, 0xe1, 0x01, 0x59, 0x52,
	0xd2, 0x93, 0x60, 0xe4, 0x7f, 0xe1, 0x95, 0xb4, 0x76, 0x18, 0x27, 0x01, 0xc8, 0x16, 0x59, 0xc0,
	0xd7, 0x47, 0xc2, 0x64, 0x18, 0x40, 0x82, 0x94, 0x48, 0xd0, 0x97, 0x64, 0x0b, 0x6f, 0xab, 0x76,
	0xa3, 0xb0, 0x13, 0x09, 0x09, 0x6b, 0xaa, 0x3b, 0x04, 0xe6, 0x6f, 0x76, 0x6e, 0xee, 0x2d, 0x3f,
	0xcf, 0x6b, 0xd3, 0x08, 0x65, 0x3b, 0x6b, 0x13, 0xe0, 0x8d, 0x01, 0xba, 0x82, 0x60, 0xfa, 0x7f,
	0x88, 0x39, 0xa8, 0x94, 0xa6, 0x3d, 0xe7, 0xa8, 0xe7, 0x09, 0x69, 0xf2, 0xec, 0x55, 0x17, 0x30,
	0xe5, 0x09, 0x32, 0x71, 0x20, 0x96, 0xc2, 0x1d, 0x3c, 0xbc, 0x64, 0xd3, 0xb9, 0xac, 0xc6, 0x83,
	0x1e, 0xf7, 0xac, 0x0d, 0x39, 0x91, 0x4d, 0x5f, 0x93, 0x27, 0xfa, 0x40, 0x66, 0x0e, 0xe8, 0xd8,
	0x84, 0x92, 0x3a, 0x58, 0x1b, 0x36, 0xed, 0x11, 0x8e, 0x68, 0xa4, 0x47, 0x76, 0x44, 0x72, 0x0b,
	0xcb, 0x64, 0xaf, 0xc8, 0xfb, 0x5a, 0xb4, 0xdd, 0x8b, 0x22, 0x01, 0x41, 0xd5, 0x54, 0xc9, 0x36,
	0x48, 0x7e, 0x17, 0x07, 0x94, 0x10, 0x3f, 0x4d, 0xf0, 0x5f, 0xe6, 0xc8, 0xc3, 0x11, 0xc9, 0xc3,
	0xf2, 0xec, 0x8b, 0xd0, 0xb5, 0x85, 0xe9, 0xc0, 0x02, 0xbe, 0xf3, 0x96, 0x05, 0x2c, 0x01, 0xf0,
	0xe0, 0xd1, 0x94, 0x15, 0x44, 0x36, 0xab, 0x06, 0x70, 0xd3, 0xd8, 0x7a, 0x30, 0x34, 0xbb, 0xec,
	0xa4, 0x10, 0x48, 0xff, 0x2a, 0x47, 0xde, 0x1b, 0x99, 0x58, 0x30, 0xf6, 0xb1, 0x7a, 0x72, 0xe2,
	0xcf, 0x3c, 0xb9, 0xdd, 0xa1, 0xc9, 0xd5, 0x87, 0x17, 0x4d, 0xcf, 0xcf, 0x21, 0xcf, 0x7e, 0x7c,
	0x47, 0x7a, 0x52, 0x38, 0xcc, 0x0e, 0xdd, 0x80, 0xc5, 0xa1, 0x94, 0xe6, 0x39, 0x98, 0xc9, 0x27,
	0x6f, 0xdf, 0x98, 0x53, 0x29, 0x9c, 0x52, 0xe8, 0x06, 0xad, 0x50, 0x4a, 0x7a, 0xa2, 0x1c, 0x44,
	0xba, 0x2d, 0x3e, 0x8f, 0xae, 0x19, 0xa8, 0xbf, 0xd9, 0x81, 0x4f, 0x1e, 0x3a, 0x19, 0x07, 0x85,
	0xca, 0x59, 0xa5, 0xde, 0x62, 0xd5, 0x32, 0x3a, 0xcb, 0x35, 0x3b, 0x5d, 0x5c, 0x35, 0x10, 0x30,
	0x2a, 0x66, 0xf4, 0xc2, 0xab, 0x6e, 0xe4, 0x32, 0x47, 0x74, 0x23, 0x61, 0x43, 0xfc, 0x7c, 0x81,
	0x75, 0x39, 0x64, 0x94, 0x53, 0xba, 0xb2, 0x5b, 0xc2, 0x17, 0x51, 0x47, 0x04, 0xf6, 0xe0, 0x16,
	0x77, 0xd2, 0xd4, 0x92, 0xa6, 0x0b, 0x1d, 0x1d, 0x33, 0x85, 0x94, 0x87, 0x5a, 0x8b, 0x72, 0xbc,
	0x19, 0xe4, 0xf6, 0x79, 0x8c, 0xe5, 0xe6, 0xef, 0xc1, 0xa3, 0x0e, 0x35, 0x83, 0x80, 0xa9, 0x12,
	0xa0, 0x11, 0xa7, 0x88, 0xc9, 0x89, 0x2b, 0xa4, 0x79, 0x89, 0xdd, 0xef, 0xcc, 0xa0, 0x84, 0x45,
	0xef, 0x92, 0x45, 0xbf, 0xa7, 0x32, 0xcc, 0x30, 0x90, 0xa6, 0x07, 0xf3, 0x1a, 0x10, 0xe8, 0x27,
	0x64, 0xc3, 0xe3, 0x01, 0xbb, 0x08, 0x65, 0x8c, 0xb7, 0xfb, 0xbd, 0xd0, 0x06, 0x96, 0xe9, 0x43,
	0x5c, 0xbd, 0xe6, 0xf1, 0xe0, 0x65, 0x28, 0xe3, 0x86, 0x1b, 0x74, 0x8e, 0x35, 0x4b, 0xc5, 0x4a,
	0x98, 0x77, 0xb1, 0x20, 0x74, 0x20, 0x56, 0x0a, 0xb0, 0x88, 0x80, 0xd4, 0x7a, 0xe8, 0xa8, 0x58,
	0xe9, 0x91, 0xbe, 0x8d, 0xca, 0x9c, 0x5e, 0x84, 0x22, 0x43, 0xdd, 0x4d, 0x86, 0x0b, 0xb0, 0x9a,
	0xa8, 0x62, 0xe2, 0xec, 0x37, 0xb5, 0xa3, 0xf0, 0x4a, 0x0a, 0xb5, 0x58, 0x66, 0x17, 0xef, 0xc4,
	0x0f, 0x3e, 0xea, 0x30, 0xe5, 0x41, 0xd8, 0x8b, 0x53, 0xe8, 0x5e, 0x70, 0x29, 0xcc, 0xdf, 0xea,
	0x14, 0x06, 0x68, 0x0d, 0x45, 0x52, 0x8b, 0x85, 0x4e, 0x58, 0x27, 0xa5, 0xc2, 0x81, 0xca, 0x83,
	0x34, 0x23, 0x5c, 0x2c, 0x64, 0x96, 0x35, 0xaf, 0xa9, 0x58, 0xba, 0xd0, 0xc9, 0x3d, 0x4f, 0xb9,
	0x62, 0x8c, 0x75, 0x65, 0x52, 0xe8, 0x2c, 0x22, 0x55, 0x4d, 0x64, 0xfb, 0x0b, 0xb2, 0x98, 0x46,
	0xca, 0x74, 0x39, 0xbd, 0x21, 0x50, 0x80, 0xbb, 0x01, 0xdb, 0x64, 0xc1, 0x0e, 0x83, 0x58, 0x04,
	0x31, 0x76, 0x16, 0xf2, 0x56, 0xfa, 0xbc, 0xeb, 0x8c, 0x5e, 0x7c, 0x5a, 0x22, 0xf3, 0x56, 0xa5,
	0x58, 0x7e, 0x7d, 0xda, 0x30, 0x66, 0xe9, 0x0a, 0x59, 0x6a, 0x56, 0x2c, 0x95, 0x70, 0x57, 0x5a,
	0xa7, 0x0d, 0x23, 0x47, 0xe7, 0xc9, 0x4d, 0xeb, 0xb4, 0x6e, 0xcc, 0xd0, 0x3c, 0x59, 0x68, 0x9c,
	0x34, 0x5b, 0x2a, 0x21, 0x37, 0x6e, 0xaa, 0xa7, 0xfa, 0x49, 0x0b, 0xc6, 0x19, 0xb7, 0xa8, 0x41,
	0xf2, 0x38, 0xaa, 0xd8, 0x6c, 0x56, 0x5f, 0xd4, 0x8d, 0xb9, 0xdd, 0x1f, 0x66, 0xc8, 0x62, 0x5a,
	0xf0, 0xa2, 0xeb, 0x24, 0x29, 0x79, 0x19, 0xff, 0x91, 0xfc, 0xcb, 0xa9, 0x51, 0xd8, 0xe9, 0xd3,
	0x57, 0xac, 0x6e, 0xc0, 0x3b, 0xac, 0x62, 0xa9, 0x55, 0x2d, 0x55, 0x8c, 0x1c, 0xa5, 0x64, 0xb9,
	0x74, 0x72, 0xd2, 0x60, 0xca, 0xd1, 0x21, 0x62, 0x96, 0xde, 0x26, 0xab, 0xc7, 0x95, 0x17, 0xc5,
	0xd2, 0x6b, 0x6c, 0x75, 0x21, 0xf9, 0x16, 0xbd, 0x43, 0x36, 0x35, 0xb9, 0x79, 0x72, 0x7c, 0xc2,
	0xbe, 0x3d, 0xad, 0x9c, 0x56, 0x34, 0x73, 0x4e, 0x8d, 0x29, 0x9d, 0xd4, 0x1a, 0x95, 0x56, 0xb5,
	0x55, 0x3d, 0x4b, 0xc8, 0xf3, 0x74, 0x9d, 0x18, 0xfa, 0xf5, 0x1f, 0x9f, 0x7d, 0xac, 0xa9, 0x0b,
	0x74, 0x8d, 0xac, 0xbc, 0xaa, 0x54, 0xbe, 0xa9, 0xd4, 0xcb, 0xac, 0x75, 0x72, 0x6a, 0xd5, 0x2b,
	0xaf, 0x8d, 0x45, 0x45, 0x3c, 0x3e, 0x29, 0x15, 0x8f, 0x33, 0x53, 0x21, 0xb4, 0x40, 0x16, 0x9b,
	0x8d, 0x4a, 0xa9, 0x55, 0x6c, 0x9d, 0x58, 0xc6, 0x92, 0x5a, 0x39, 0x3c, 0xe2, 0xc8, 0xcf, 0xef,
	0xee, 0x13, 0x13, 0xee, 0xc1, 0xa8, 0x55, 0x50, 0x11, 0x76, 0x2c, 0x64, 0x9c, 0x94, 0x18, 0x28,
	0x99, 0xfd, 0x5e, 0x86, 0x41, 0x72, 0xa7, 0x46, 0xfd, 0xde, 0xfd, 0xd7, 0x19, 0xb2, 0x3e, 0xe9,
	0x06, 0xa1, 0xca, 0x20, 0x06, 0x71, 0x19, 0x86, 0xa0, 0xb8, 0xd5, 0xcb, 0x32, 0x09, 0xcc, 0x30,
	0xfa, 0x7c, 0x9f, 0x18, 0xe7, 0x6e, 0xe0, 0xca, 0x8b, 0x0c, 0x12, 0x8b, 0xe9, 0x2b, 0x48, 0x1f,
	0x40, 0x9f, 0x91, 0x75, 0x37, 0x70, 0x63, 0x17, 0xba, 0x8b, 0x99, 0x28, 0x0b, 0x6b, 0xaa, 0x34,
	0xe5, 0x0d, 0xc2, 0xac, 0x6f, 0x48, 0x01, 0x2f, 0x3e, 0x0e, 0x5f, 0x7e, 0x7a, 0x3c, 0xfd, 0xea,
	0xe3, 0x3e, 0x10, 0x74, 0x0d, 0x38, 0x1f, 0x0d, 0x1e, 0xe4, 0xf6, 0xef, 0x72, 0x64, 0x29, 0xc3,
	0x1d, 0x29, 0xc9, 0xe7, 0x46, 0x4b, 0xf2, 0xaf, 0x08, 0x0e, 0x4f, 0xae, 0x7b, 0xcc, 0x0c, 0x75,
	0xfa, 0x46, 0xdf, 0x7b, 0x70, 0xe7, 0x92, 0x8d, 0x11, 0xd3, 0xec, 0x0c, 0xaf, 0x6f, 0x22, 0x71,
	0xf7, 0x2e, 0xd9, 0x86, 0xd6, 0x23, 0x8f, 0xe2, 0xeb, 0xc1, 0x08, 0x7d, 0x67, 0x7b, 0xf7, 0x9a,
	0xdc, 0x99, 0xc8, 0x95, 0xdd, 0x30, 0x90, 0x82, 0xfe, 0x8a, 0xcc, 0xe1, 0xdd, 0x1f, 0xfd, 0x57,
	0x55, 0xf7, 0xc7, 0xe6, 0xa3, 0x05, 0xe1, 0x35, 0xa0, 0x83, 0xdd, 0xa1, 0x69, 0x0d, 0xf1, 0x58,
	0xb3, 0x67, 0xdb, 0x42, 0x4a, 0x4b, 0x4b, 0xdc, 0xbd, 0x26, 0xf7, 0x27, 0xbc, 0xba, 0x68, 0xab,
	0x6f, 0xf0, 0x84, 0xd3, 0x11, 0x63, 0x6b, 0x92, 0xfb, 0x73, 0xad, 0xc9, 0xa7, 0x64, 0x2b, 0xd5,
	0x5b, 0xf0, 0x4b, 0x70, 0x7f, 0x54, 0x2b, 0xee, 0x26, 0x99, 0xbf, 0xec, 0xc3, 0x5f, 0x25, 0xc1,
	0x0b, 0xf3, 0xd6, 0xdc, 0x65, 0xbf, 0xcc, 0x63, 0xbe, 0xfb, 0xef, 0x39, 0x1c, 0x06, 0xf9, 0x49,
	0xe6, 0x0f, 0x52, 0xd0, 0xaa, 0x3d, 0x25, 0x94, 0xf7, 0x45, 0xc4, 0x3b, 0x42, 0xdf, 0x76, 0x86,
	0x14, 0x23, 0xa7, 0xff, 0x22, 0x05, 0x39, 0x70, 0x79, 0x37, 0xf9, 0xfb, 0x15, 0x9f, 0xbf, 0x71,
	0xfd, 0x9e, 0x9f, 0x45, 0xcf, 0x24, 0x17, 0x46, 0x81, 0x33, 0x40, 0xff, 0x90, 0x23, 0x9b, 0x6d,
	0x71, 0xc1, 0xfb, 0x6e, 0x18, 0x31, 0x69, 0x87, 0x91, 0x60, 0x7d, 0x1e, 0xb9, 0x3c, 0xb0, 0x85,
	0xbe, 0x03, 0xf5, 0x4e, 0x36, 0x7d, 0x3f, 0xd4, 0xd0, 0xa6, 0x42, 0x9e, 0x69, 0xa0, 0x0a, 0x3e,
	0xde, 0xc2, 0x4e, 0x83, 0x8f, 0xdb, 0xed, 0x49, 0xec, 0x27, 0xff, 0x90, 0x23, 0xcb, 0x95, 0xe3,
	0x6c, 0xcb, 0x9f, 0xde, 0x23, 0x5b, 0x97, 0x6c, 0x98, 0xc6, 0x9a, 0xc5, 0xa3, 0xca, 0x71, 0xb1,
	0x5e, 0x31, 0x6e, 0xd0, 0xbb, 0xc4, 0x1c, 0x63, 0x9f, 0x1c, 0x1d, 0x01, 0x37, 0x37, 0x91, 0x5b,
	0xab, 0x96, 0x81, 0x3b, 0x43, 0xdf, 0x21, 0xf7, 0xc6, 0x45, 0x9f, 0x36, 0x1a, 0x27, 0x56, 0x8b,
	0x35, 0x4f, 0x8e, 0x5a, 0xc6, 0xcd, 0xb7, 0x42, 0x54, 0xa2, 0x60, 0xcc, 0x3e, 0xf9, 0xe7, 0x19,
	0xb2, 0x36, 0x8c, 0xc0, 0x6b, 0x0a, 0xf7, 0xc9, 0xf6, 0xe8, 0x50, 0x60, 0x40, 0xab, 0xdc, 0xb8,
	0x41, 0x77, 0xc9, 0xfd, 0xc9, 0xfc, 0xf4, 0xeb, 0x72, 0x93, 0x5e, 0x8f, 0x98, 0xe4, 0x13, 0x67,
	0xa6, 0x43, 0x92, 0xef, 0x9c, 0x9d, 0x3e, 0x93, 0xd2, 0x89, 0x55, 0x31, 0xe6, 0xe9, 0x63, 0xb2,
	0x3b, 0x65, 0x26, 0xd9, 0xc5, 0x58, 0xf8, 0x71, 0x1c, 0xac, 0x88, 0x31, 0x7d, 0x4a, 0x1a, 0x67,
	0x98, 0x93, 0x76, 0x15, 0x21, 0xc5, 0xe3, 0x63, 0xe3, 0xc1, 0x13, 0x97, 0x6c, 0x54, 0xf0, 0xaa,
	0xeb, 0xe8, 0xad, 0x66, 0x94, 0x3d, 0x91, 0x97, 0x2c, 0xec, 0x53, 0xb2, 0x37, 0x15, 0x72, 0xcc,
	0xa3, 0x8e, 0xb0, 0x78, 0x70, 0xd9, 0xec, 0xaa, 0xa3, 0x6a, 0xe4, 0x9e, 0xfc, 0xcb, 0x0c, 0x59,
	0x9f, 0x74, 0x0d, 0x5a, 0x4f, 0x71, 0xf2, 0x45, 0x68, 0xe3, 0x06, 0x7d, 0x48, 0x1e, 0x8c, 0xb3,
	0x6b, 0xae, 0x94, 0x6e, 0xd0, 0xa9, 0xd5, 0xd4, 0x51, 0x36, 0x72, 0xf4, 0x11, 0x79, 0x67, 0x1c,
	0x94, 0xfc, 0x95, 0x9f, 0x06, 0x1b, 0x33, 0x7a, 0x61, 0x47, 0x65, 0x41, 0x1e, 0xe6, 0xa5, 0x01,
	0x67, 0xaa, 0x8d, 0x63, 0xef, 0x0c, 0x98, 0xce, 0x0e, 0x8d, 0x5f, 0x4c, 0x16, 0x55, 0xf4, 0x3c,
	0x2b, 0xf4, 0x84, 0x4e, 0xbc, 0x84, 0x63, 0x14, 0x27, 0x4f, 0xff, 0x54, 0xcd, 0x27, 0x99, 0x9e,
	0x71, 0x48, 0x1f, 0x90, 0x3b, 0xe3, 0xa0, 0x23, 0xfc, 0x83, 0x3b, 0xfb, 0xd2, 0x28, 0xd1, 0x1d,
	0x72, 0x77, 0x1c, 0xa0, 0x1e, 0xcb, 0xc2, 0xe7, 0x81, 0x63, 0x94, 0x9f, 0x34, 0x88, 0x31, 0x5a,
	0x41, 0x56, 0xf1, 0xc8, 0x70, 0x0d, 0xd9, 0xb8, 0x01, 0x91, 0x41, 0x96, 0xf6, 0xfc, 0x99, 0x91,
	0x1b, 0x25, 0x7e, 0xf2, 0xec, 0x99, 0x31, 0xf3, 0xe4, 0xff, 0xe6, 0xc8, 0xed, 0x89, 0x95, 0x10,
	0xf5, 0x4d, 0x3f, 0x52, 0x22, 0x31, 0x6e, 0xa8, 0x35, 0x9c, 0x0c, 0x3a, 0xd6, 0x90, 0x9c, 0x3a,
	0x99, 0x93, 0x21, 0xe9, 0x56, 0xcc, 0x3c, 0xe9, 0x91, 0xd5, 0x31, 0x37, 0xa0, 0xd7, 0x6b, 0x9a,
	0x77, 0x30, 0x6e, 0xe8, 0xf5, 0x1a, 0x03, 0xd4, 0xc3, 0x18, 0x68, 0x46, 0x4e, 0x6b, 0xdd, 0x18,
	0x02, 0xd9, 0x33, 0x4f, 0xfe, 0x2d, 0x47, 0xcc, 0x69, 0xbe, 0x4f, 0xef, 0xfd, 0x8f, 0x78, 0x46,
	0xe3, 0x06, 0x7d, 0x46, 0x9e, 0xbe, 0x05, 0x57, 0xf4, 0xc0, 0x89, 0x55, 0x83, 0xa4, 0xfa, 0x60,
	0xe4, 0xe8, 0xfb, 0xe4, 0xd1, 0x5b, 0x46, 0xd4, 0xc3, 0xb8, 0x1a, 0xc0, 0x79, 0x33, 0x66, 0xe8,
	0x1e, 0x79, 0xf7, 0x6d, 0x93, 0x10, 0x81, 0x53, 0x89, 0xa2, 0x30, 0x32, 0x6e, 0xd2, 0x0f, 0xc8,
	0x7b, 0x6f, 0x41, 0xea, 0x45, 0x43, 0xf0, 0xec, 0x93, 0x7f, 0xcc, 0x91, 0x3b, 0x6f, 0x71, 0x2c,
	0x7a, 0x86, 0x3f, 0xee, 0x79, 0x8c, 0x1b, 0xfa, 0x50, 0xbe, 0x05, 0x7a, 0x1c, 0x5e, 0x19, 0x39,
	0xfd, 0x21, 0x6f, 0x81, 0xd5, 0x84, 0xe3, 0xf6, 0xfc, 0xf4, 0xf8, 0xbe, 0x05, 0xa9, 0x4e, 0x84,
	0x71, 0xf3, 0xf0, 0xd6, 0xcb, 0xdc, 0x0f, 0xb9, 0x1b, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0x2a,
	0x4a, 0x5d, 0xd2, 0xdd, 0x3e, 0x00, 0x00,
}
