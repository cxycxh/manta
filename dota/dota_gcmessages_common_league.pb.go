// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_gcmessages_common_league.proto

package dota

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ELeagueNodeGroupType int32

const (
	ELeagueNodeGroupType_INVALID_GROUP_TYPE        ELeagueNodeGroupType = 0
	ELeagueNodeGroupType_ORGANIZATIONAL            ELeagueNodeGroupType = 1
	ELeagueNodeGroupType_ROUND_ROBIN               ELeagueNodeGroupType = 2
	ELeagueNodeGroupType_SWISS                     ELeagueNodeGroupType = 3
	ELeagueNodeGroupType_BRACKET_SINGLE            ELeagueNodeGroupType = 4
	ELeagueNodeGroupType_BRACKET_DOUBLE_SEED_LOSER ELeagueNodeGroupType = 5
	ELeagueNodeGroupType_BRACKET_DOUBLE_ALL_WINNER ELeagueNodeGroupType = 6
	ELeagueNodeGroupType_SHOWMATCH                 ELeagueNodeGroupType = 7
	ELeagueNodeGroupType_GSL                       ELeagueNodeGroupType = 8
)

var ELeagueNodeGroupType_name = map[int32]string{
	0: "INVALID_GROUP_TYPE",
	1: "ORGANIZATIONAL",
	2: "ROUND_ROBIN",
	3: "SWISS",
	4: "BRACKET_SINGLE",
	5: "BRACKET_DOUBLE_SEED_LOSER",
	6: "BRACKET_DOUBLE_ALL_WINNER",
	7: "SHOWMATCH",
	8: "GSL",
}

var ELeagueNodeGroupType_value = map[string]int32{
	"INVALID_GROUP_TYPE":        0,
	"ORGANIZATIONAL":            1,
	"ROUND_ROBIN":               2,
	"SWISS":                     3,
	"BRACKET_SINGLE":            4,
	"BRACKET_DOUBLE_SEED_LOSER": 5,
	"BRACKET_DOUBLE_ALL_WINNER": 6,
	"SHOWMATCH":                 7,
	"GSL":                       8,
}

func (x ELeagueNodeGroupType) Enum() *ELeagueNodeGroupType {
	p := new(ELeagueNodeGroupType)
	*p = x
	return p
}

func (x ELeagueNodeGroupType) String() string {
	return proto.EnumName(ELeagueNodeGroupType_name, int32(x))
}

func (x *ELeagueNodeGroupType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueNodeGroupType_value, data, "ELeagueNodeGroupType")
	if err != nil {
		return err
	}
	*x = ELeagueNodeGroupType(value)
	return nil
}

func (ELeagueNodeGroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{0}
}

type ELeagueNodeType int32

const (
	ELeagueNodeType_INVALID_NODE_TYPE ELeagueNodeType = 0
	ELeagueNodeType_BEST_OF_ONE       ELeagueNodeType = 1
	ELeagueNodeType_BEST_OF_THREE     ELeagueNodeType = 2
	ELeagueNodeType_BEST_OF_FIVE      ELeagueNodeType = 3
	ELeagueNodeType_BEST_OF_TWO       ELeagueNodeType = 4
)

var ELeagueNodeType_name = map[int32]string{
	0: "INVALID_NODE_TYPE",
	1: "BEST_OF_ONE",
	2: "BEST_OF_THREE",
	3: "BEST_OF_FIVE",
	4: "BEST_OF_TWO",
}

var ELeagueNodeType_value = map[string]int32{
	"INVALID_NODE_TYPE": 0,
	"BEST_OF_ONE":       1,
	"BEST_OF_THREE":     2,
	"BEST_OF_FIVE":      3,
	"BEST_OF_TWO":       4,
}

func (x ELeagueNodeType) Enum() *ELeagueNodeType {
	p := new(ELeagueNodeType)
	*p = x
	return p
}

func (x ELeagueNodeType) String() string {
	return proto.EnumName(ELeagueNodeType_name, int32(x))
}

func (x *ELeagueNodeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueNodeType_value, data, "ELeagueNodeType")
	if err != nil {
		return err
	}
	*x = ELeagueNodeType(value)
	return nil
}

func (ELeagueNodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{1}
}

type CMsgDOTALeagueNode struct {
	Name                 *string                            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NodeId               *uint32                            `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	NodeGroupId          *uint32                            `protobuf:"varint,3,opt,name=node_group_id,json=nodeGroupId" json:"node_group_id,omitempty"`
	WinningNodeId        *uint32                            `protobuf:"varint,4,opt,name=winning_node_id,json=winningNodeId" json:"winning_node_id,omitempty"`
	LosingNodeId         *uint32                            `protobuf:"varint,5,opt,name=losing_node_id,json=losingNodeId" json:"losing_node_id,omitempty"`
	IncomingNodeId_1     *uint32                            `protobuf:"varint,6,opt,name=incoming_node_id_1,json=incomingNodeId1" json:"incoming_node_id_1,omitempty"`
	IncomingNodeId_2     *uint32                            `protobuf:"varint,7,opt,name=incoming_node_id_2,json=incomingNodeId2" json:"incoming_node_id_2,omitempty"`
	NodeType             *ELeagueNodeType                   `protobuf:"varint,8,opt,name=node_type,json=nodeType,enum=dota.ELeagueNodeType,def=0" json:"node_type,omitempty"`
	ScheduledTime        *uint32                            `protobuf:"varint,9,opt,name=scheduled_time,json=scheduledTime" json:"scheduled_time,omitempty"`
	ActualTime           *uint32                            `protobuf:"varint,19,opt,name=actual_time,json=actualTime" json:"actual_time,omitempty"`
	SeriesId             *uint32                            `protobuf:"varint,10,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	TeamId_1             *uint32                            `protobuf:"varint,11,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	TeamId_2             *uint32                            `protobuf:"varint,12,opt,name=team_id_2,json=teamId2" json:"team_id_2,omitempty"`
	Matches              []*CMsgDOTALeagueNode_MatchDetails `protobuf:"bytes,13,rep,name=matches" json:"matches,omitempty"`
	Team_1Wins           *uint32                            `protobuf:"varint,14,opt,name=team_1_wins,json=team1Wins" json:"team_1_wins,omitempty"`
	Team_2Wins           *uint32                            `protobuf:"varint,15,opt,name=team_2_wins,json=team2Wins" json:"team_2_wins,omitempty"`
	HasStarted           *bool                              `protobuf:"varint,16,opt,name=has_started,json=hasStarted" json:"has_started,omitempty"`
	IsCompleted          *bool                              `protobuf:"varint,17,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	StreamIds            []uint32                           `protobuf:"varint,18,rep,name=stream_ids,json=streamIds" json:"stream_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CMsgDOTALeagueNode) Reset()         { *m = CMsgDOTALeagueNode{} }
func (m *CMsgDOTALeagueNode) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueNode) ProtoMessage()    {}
func (*CMsgDOTALeagueNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{0}
}

func (m *CMsgDOTALeagueNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueNode.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueNode.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueNode.Merge(m, src)
}
func (m *CMsgDOTALeagueNode) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueNode.Size(m)
}
func (m *CMsgDOTALeagueNode) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueNode.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueNode proto.InternalMessageInfo

const Default_CMsgDOTALeagueNode_NodeType ELeagueNodeType = ELeagueNodeType_INVALID_NODE_TYPE

func (m *CMsgDOTALeagueNode) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTALeagueNode) GetNodeId() uint32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetNodeGroupId() uint32 {
	if m != nil && m.NodeGroupId != nil {
		return *m.NodeGroupId
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetWinningNodeId() uint32 {
	if m != nil && m.WinningNodeId != nil {
		return *m.WinningNodeId
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetLosingNodeId() uint32 {
	if m != nil && m.LosingNodeId != nil {
		return *m.LosingNodeId
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetIncomingNodeId_1() uint32 {
	if m != nil && m.IncomingNodeId_1 != nil {
		return *m.IncomingNodeId_1
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetIncomingNodeId_2() uint32 {
	if m != nil && m.IncomingNodeId_2 != nil {
		return *m.IncomingNodeId_2
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetNodeType() ELeagueNodeType {
	if m != nil && m.NodeType != nil {
		return *m.NodeType
	}
	return Default_CMsgDOTALeagueNode_NodeType
}

func (m *CMsgDOTALeagueNode) GetScheduledTime() uint32 {
	if m != nil && m.ScheduledTime != nil {
		return *m.ScheduledTime
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetActualTime() uint32 {
	if m != nil && m.ActualTime != nil {
		return *m.ActualTime
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetTeamId_1() uint32 {
	if m != nil && m.TeamId_1 != nil {
		return *m.TeamId_1
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetTeamId_2() uint32 {
	if m != nil && m.TeamId_2 != nil {
		return *m.TeamId_2
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetMatches() []*CMsgDOTALeagueNode_MatchDetails {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *CMsgDOTALeagueNode) GetTeam_1Wins() uint32 {
	if m != nil && m.Team_1Wins != nil {
		return *m.Team_1Wins
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetTeam_2Wins() uint32 {
	if m != nil && m.Team_2Wins != nil {
		return *m.Team_2Wins
	}
	return 0
}

func (m *CMsgDOTALeagueNode) GetHasStarted() bool {
	if m != nil && m.HasStarted != nil {
		return *m.HasStarted
	}
	return false
}

func (m *CMsgDOTALeagueNode) GetIsCompleted() bool {
	if m != nil && m.IsCompleted != nil {
		return *m.IsCompleted
	}
	return false
}

func (m *CMsgDOTALeagueNode) GetStreamIds() []uint32 {
	if m != nil {
		return m.StreamIds
	}
	return nil
}

type CMsgDOTALeagueNode_MatchDetails struct {
	MatchId              *uint64  `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	WinningTeamId        *uint32  `protobuf:"varint,2,opt,name=winning_team_id,json=winningTeamId" json:"winning_team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueNode_MatchDetails) Reset()         { *m = CMsgDOTALeagueNode_MatchDetails{} }
func (m *CMsgDOTALeagueNode_MatchDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueNode_MatchDetails) ProtoMessage()    {}
func (*CMsgDOTALeagueNode_MatchDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{0, 0}
}

func (m *CMsgDOTALeagueNode_MatchDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueNode_MatchDetails.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueNode_MatchDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueNode_MatchDetails.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueNode_MatchDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueNode_MatchDetails.Merge(m, src)
}
func (m *CMsgDOTALeagueNode_MatchDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueNode_MatchDetails.Size(m)
}
func (m *CMsgDOTALeagueNode_MatchDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueNode_MatchDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueNode_MatchDetails proto.InternalMessageInfo

func (m *CMsgDOTALeagueNode_MatchDetails) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTALeagueNode_MatchDetails) GetWinningTeamId() uint32 {
	if m != nil && m.WinningTeamId != nil {
		return *m.WinningTeamId
	}
	return 0
}

type CMsgDOTALeagueNodeGroup struct {
	Name                 *string                                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NodeGroupId          *uint32                                 `protobuf:"varint,2,opt,name=node_group_id,json=nodeGroupId" json:"node_group_id,omitempty"`
	ParentNodeGroupId    *uint32                                 `protobuf:"varint,3,opt,name=parent_node_group_id,json=parentNodeGroupId" json:"parent_node_group_id,omitempty"`
	IncomingNodeGroupIds []uint32                                `protobuf:"varint,4,rep,name=incoming_node_group_ids,json=incomingNodeGroupIds" json:"incoming_node_group_ids,omitempty"`
	AdvancingNodeGroupId *uint32                                 `protobuf:"varint,5,opt,name=advancing_node_group_id,json=advancingNodeGroupId" json:"advancing_node_group_id,omitempty"`
	AdvancingTeamCount   *uint32                                 `protobuf:"varint,6,opt,name=advancing_team_count,json=advancingTeamCount" json:"advancing_team_count,omitempty"`
	TeamCount            *uint32                                 `protobuf:"varint,7,opt,name=team_count,json=teamCount" json:"team_count,omitempty"`
	NodeGroupType        *ELeagueNodeGroupType                   `protobuf:"varint,8,opt,name=node_group_type,json=nodeGroupType,enum=dota.ELeagueNodeGroupType,def=0" json:"node_group_type,omitempty"`
	DefaultNodeType      *ELeagueNodeType                        `protobuf:"varint,9,opt,name=default_node_type,json=defaultNodeType,enum=dota.ELeagueNodeType,def=0" json:"default_node_type,omitempty"`
	Round                *uint32                                 `protobuf:"varint,10,opt,name=round" json:"round,omitempty"`
	MaxRounds            *uint32                                 `protobuf:"varint,11,opt,name=max_rounds,json=maxRounds" json:"max_rounds,omitempty"`
	IsTiebreaker         *bool                                   `protobuf:"varint,12,opt,name=is_tiebreaker,json=isTiebreaker" json:"is_tiebreaker,omitempty"`
	IsFinalGroup         *bool                                   `protobuf:"varint,13,opt,name=is_final_group,json=isFinalGroup" json:"is_final_group,omitempty"`
	IsCompleted          *bool                                   `protobuf:"varint,14,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	Phase                *ELeaguePhase                           `protobuf:"varint,18,opt,name=phase,enum=dota.ELeaguePhase,def=0" json:"phase,omitempty"`
	Region               *ELeagueRegion                          `protobuf:"varint,19,opt,name=region,enum=dota.ELeagueRegion,def=0" json:"region,omitempty"`
	StartTime            *uint32                                 `protobuf:"varint,20,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime              *uint32                                 `protobuf:"varint,21,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	TeamStandings        []*CMsgDOTALeagueNodeGroup_TeamStanding `protobuf:"bytes,15,rep,name=team_standings,json=teamStandings" json:"team_standings,omitempty"`
	Nodes                []*CMsgDOTALeagueNode                   `protobuf:"bytes,16,rep,name=nodes" json:"nodes,omitempty"`
	NodeGroups           []*CMsgDOTALeagueNodeGroup              `protobuf:"bytes,17,rep,name=node_groups,json=nodeGroups" json:"node_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CMsgDOTALeagueNodeGroup) Reset()         { *m = CMsgDOTALeagueNodeGroup{} }
func (m *CMsgDOTALeagueNodeGroup) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueNodeGroup) ProtoMessage()    {}
func (*CMsgDOTALeagueNodeGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{1}
}

func (m *CMsgDOTALeagueNodeGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueNodeGroup.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueNodeGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueNodeGroup.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueNodeGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueNodeGroup.Merge(m, src)
}
func (m *CMsgDOTALeagueNodeGroup) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueNodeGroup.Size(m)
}
func (m *CMsgDOTALeagueNodeGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueNodeGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueNodeGroup proto.InternalMessageInfo

const Default_CMsgDOTALeagueNodeGroup_NodeGroupType ELeagueNodeGroupType = ELeagueNodeGroupType_INVALID_GROUP_TYPE
const Default_CMsgDOTALeagueNodeGroup_DefaultNodeType ELeagueNodeType = ELeagueNodeType_INVALID_NODE_TYPE
const Default_CMsgDOTALeagueNodeGroup_Phase ELeaguePhase = ELeaguePhase_LEAGUE_PHASE_UNSET
const Default_CMsgDOTALeagueNodeGroup_Region ELeagueRegion = ELeagueRegion_LEAGUE_REGION_UNSET

func (m *CMsgDOTALeagueNodeGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTALeagueNodeGroup) GetNodeGroupId() uint32 {
	if m != nil && m.NodeGroupId != nil {
		return *m.NodeGroupId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetParentNodeGroupId() uint32 {
	if m != nil && m.ParentNodeGroupId != nil {
		return *m.ParentNodeGroupId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetIncomingNodeGroupIds() []uint32 {
	if m != nil {
		return m.IncomingNodeGroupIds
	}
	return nil
}

func (m *CMsgDOTALeagueNodeGroup) GetAdvancingNodeGroupId() uint32 {
	if m != nil && m.AdvancingNodeGroupId != nil {
		return *m.AdvancingNodeGroupId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetAdvancingTeamCount() uint32 {
	if m != nil && m.AdvancingTeamCount != nil {
		return *m.AdvancingTeamCount
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetTeamCount() uint32 {
	if m != nil && m.TeamCount != nil {
		return *m.TeamCount
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetNodeGroupType() ELeagueNodeGroupType {
	if m != nil && m.NodeGroupType != nil {
		return *m.NodeGroupType
	}
	return Default_CMsgDOTALeagueNodeGroup_NodeGroupType
}

func (m *CMsgDOTALeagueNodeGroup) GetDefaultNodeType() ELeagueNodeType {
	if m != nil && m.DefaultNodeType != nil {
		return *m.DefaultNodeType
	}
	return Default_CMsgDOTALeagueNodeGroup_DefaultNodeType
}

func (m *CMsgDOTALeagueNodeGroup) GetRound() uint32 {
	if m != nil && m.Round != nil {
		return *m.Round
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetMaxRounds() uint32 {
	if m != nil && m.MaxRounds != nil {
		return *m.MaxRounds
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetIsTiebreaker() bool {
	if m != nil && m.IsTiebreaker != nil {
		return *m.IsTiebreaker
	}
	return false
}

func (m *CMsgDOTALeagueNodeGroup) GetIsFinalGroup() bool {
	if m != nil && m.IsFinalGroup != nil {
		return *m.IsFinalGroup
	}
	return false
}

func (m *CMsgDOTALeagueNodeGroup) GetIsCompleted() bool {
	if m != nil && m.IsCompleted != nil {
		return *m.IsCompleted
	}
	return false
}

func (m *CMsgDOTALeagueNodeGroup) GetPhase() ELeaguePhase {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return Default_CMsgDOTALeagueNodeGroup_Phase
}

func (m *CMsgDOTALeagueNodeGroup) GetRegion() ELeagueRegion {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return Default_CMsgDOTALeagueNodeGroup_Region
}

func (m *CMsgDOTALeagueNodeGroup) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup) GetTeamStandings() []*CMsgDOTALeagueNodeGroup_TeamStanding {
	if m != nil {
		return m.TeamStandings
	}
	return nil
}

func (m *CMsgDOTALeagueNodeGroup) GetNodes() []*CMsgDOTALeagueNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CMsgDOTALeagueNodeGroup) GetNodeGroups() []*CMsgDOTALeagueNodeGroup {
	if m != nil {
		return m.NodeGroups
	}
	return nil
}

type CMsgDOTALeagueNodeGroup_TeamStanding struct {
	Standing             *uint32  `protobuf:"varint,1,opt,name=standing" json:"standing,omitempty"`
	TeamId               *uint32  `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName             *string  `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag              *string  `protobuf:"bytes,4,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamLogo             *uint64  `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamLogoUrl          *string  `protobuf:"bytes,6,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	Wins                 *uint32  `protobuf:"varint,7,opt,name=wins" json:"wins,omitempty"`
	Losses               *uint32  `protobuf:"varint,8,opt,name=losses" json:"losses,omitempty"`
	Score                *int64   `protobuf:"varint,9,opt,name=score" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) Reset()         { *m = CMsgDOTALeagueNodeGroup_TeamStanding{} }
func (m *CMsgDOTALeagueNodeGroup_TeamStanding) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueNodeGroup_TeamStanding) ProtoMessage()    {}
func (*CMsgDOTALeagueNodeGroup_TeamStanding) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{1, 0}
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueNodeGroup_TeamStanding.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueNodeGroup_TeamStanding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueNodeGroup_TeamStanding.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueNodeGroup_TeamStanding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueNodeGroup_TeamStanding.Merge(m, src)
}
func (m *CMsgDOTALeagueNodeGroup_TeamStanding) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueNodeGroup_TeamStanding.Size(m)
}
func (m *CMsgDOTALeagueNodeGroup_TeamStanding) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueNodeGroup_TeamStanding.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueNodeGroup_TeamStanding proto.InternalMessageInfo

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetStanding() uint32 {
	if m != nil && m.Standing != nil {
		return *m.Standing
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetTeamLogoUrl() string {
	if m != nil && m.TeamLogoUrl != nil {
		return *m.TeamLogoUrl
	}
	return ""
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetWins() uint32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetLosses() uint32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *CMsgDOTALeagueNodeGroup_TeamStanding) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTALeague struct {
	Info                 *CMsgDOTALeague_Info         `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	PrizePool            *CMsgDOTALeague_PrizePool    `protobuf:"bytes,2,opt,name=prize_pool,json=prizePool" json:"prize_pool,omitempty"`
	Admins               []*CMsgDOTALeague_Admin      `protobuf:"bytes,3,rep,name=admins" json:"admins,omitempty"`
	Streams              []*CMsgDOTALeague_Stream     `protobuf:"bytes,4,rep,name=streams" json:"streams,omitempty"`
	NodeGroups           []*CMsgDOTALeagueNodeGroup   `protobuf:"bytes,5,rep,name=node_groups,json=nodeGroups" json:"node_groups,omitempty"`
	SeriesInfos          []*CMsgDOTALeague_SeriesInfo `protobuf:"bytes,6,rep,name=series_infos,json=seriesInfos" json:"series_infos,omitempty"`
	RegisteredPlayers    []*CMsgDOTALeague_Player     `protobuf:"bytes,7,rep,name=registered_players,json=registeredPlayers" json:"registered_players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CMsgDOTALeague) Reset()         { *m = CMsgDOTALeague{} }
func (m *CMsgDOTALeague) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeague) ProtoMessage()    {}
func (*CMsgDOTALeague) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{2}
}

func (m *CMsgDOTALeague) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeague.Unmarshal(m, b)
}
func (m *CMsgDOTALeague) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeague.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeague) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeague.Merge(m, src)
}
func (m *CMsgDOTALeague) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeague.Size(m)
}
func (m *CMsgDOTALeague) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeague.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeague proto.InternalMessageInfo

func (m *CMsgDOTALeague) GetInfo() *CMsgDOTALeague_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CMsgDOTALeague) GetPrizePool() *CMsgDOTALeague_PrizePool {
	if m != nil {
		return m.PrizePool
	}
	return nil
}

func (m *CMsgDOTALeague) GetAdmins() []*CMsgDOTALeague_Admin {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *CMsgDOTALeague) GetStreams() []*CMsgDOTALeague_Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *CMsgDOTALeague) GetNodeGroups() []*CMsgDOTALeagueNodeGroup {
	if m != nil {
		return m.NodeGroups
	}
	return nil
}

func (m *CMsgDOTALeague) GetSeriesInfos() []*CMsgDOTALeague_SeriesInfo {
	if m != nil {
		return m.SeriesInfos
	}
	return nil
}

func (m *CMsgDOTALeague) GetRegisteredPlayers() []*CMsgDOTALeague_Player {
	if m != nil {
		return m.RegisteredPlayers
	}
	return nil
}

type CMsgDOTALeague_Info struct {
	LeagueId             *uint32        `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Name                 *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tier                 *ELeagueTier   `protobuf:"varint,3,opt,name=tier,enum=dota.ELeagueTier,def=0" json:"tier,omitempty"`
	Region               *ELeagueRegion `protobuf:"varint,4,opt,name=region,enum=dota.ELeagueRegion,def=0" json:"region,omitempty"`
	Url                  *string        `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Description          *string        `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Notes                *string        `protobuf:"bytes,7,opt,name=notes" json:"notes,omitempty"`
	StartTimestamp       *uint32        `protobuf:"varint,8,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp         *uint32        `protobuf:"varint,9,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	ProCircuitPoints     *uint32        `protobuf:"varint,10,opt,name=pro_circuit_points,json=proCircuitPoints" json:"pro_circuit_points,omitempty"`
	ImageBits            *uint32        `protobuf:"varint,11,opt,name=image_bits,json=imageBits" json:"image_bits,omitempty"`
	Status               *ELeagueStatus `protobuf:"varint,12,opt,name=status,enum=dota.ELeagueStatus,def=0" json:"status,omitempty"`
	MostRecentActivity   *uint32        `protobuf:"varint,13,opt,name=most_recent_activity,json=mostRecentActivity" json:"most_recent_activity,omitempty"`
	RegistrationPeriod   *uint32        `protobuf:"varint,14,opt,name=registration_period,json=registrationPeriod" json:"registration_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CMsgDOTALeague_Info) Reset()         { *m = CMsgDOTALeague_Info{} }
func (m *CMsgDOTALeague_Info) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeague_Info) ProtoMessage()    {}
func (*CMsgDOTALeague_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{2, 0}
}

func (m *CMsgDOTALeague_Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeague_Info.Unmarshal(m, b)
}
func (m *CMsgDOTALeague_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeague_Info.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeague_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeague_Info.Merge(m, src)
}
func (m *CMsgDOTALeague_Info) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeague_Info.Size(m)
}
func (m *CMsgDOTALeague_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeague_Info.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeague_Info proto.InternalMessageInfo

const Default_CMsgDOTALeague_Info_Tier ELeagueTier = ELeagueTier_LEAGUE_TIER_UNSET
const Default_CMsgDOTALeague_Info_Region ELeagueRegion = ELeagueRegion_LEAGUE_REGION_UNSET
const Default_CMsgDOTALeague_Info_Status ELeagueStatus = ELeagueStatus_LEAGUE_STATUS_UNSET

func (m *CMsgDOTALeague_Info) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTALeague_Info) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTALeague_Info) GetTier() ELeagueTier {
	if m != nil && m.Tier != nil {
		return *m.Tier
	}
	return Default_CMsgDOTALeague_Info_Tier
}

func (m *CMsgDOTALeague_Info) GetRegion() ELeagueRegion {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return Default_CMsgDOTALeague_Info_Region
}

func (m *CMsgDOTALeague_Info) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *CMsgDOTALeague_Info) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CMsgDOTALeague_Info) GetNotes() string {
	if m != nil && m.Notes != nil {
		return *m.Notes
	}
	return ""
}

func (m *CMsgDOTALeague_Info) GetStartTimestamp() uint32 {
	if m != nil && m.StartTimestamp != nil {
		return *m.StartTimestamp
	}
	return 0
}

func (m *CMsgDOTALeague_Info) GetEndTimestamp() uint32 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *CMsgDOTALeague_Info) GetProCircuitPoints() uint32 {
	if m != nil && m.ProCircuitPoints != nil {
		return *m.ProCircuitPoints
	}
	return 0
}

func (m *CMsgDOTALeague_Info) GetImageBits() uint32 {
	if m != nil && m.ImageBits != nil {
		return *m.ImageBits
	}
	return 0
}

func (m *CMsgDOTALeague_Info) GetStatus() ELeagueStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_CMsgDOTALeague_Info_Status
}

func (m *CMsgDOTALeague_Info) GetMostRecentActivity() uint32 {
	if m != nil && m.MostRecentActivity != nil {
		return *m.MostRecentActivity
	}
	return 0
}

func (m *CMsgDOTALeague_Info) GetRegistrationPeriod() uint32 {
	if m != nil && m.RegistrationPeriod != nil {
		return *m.RegistrationPeriod
	}
	return 0
}

type CMsgDOTALeague_Admin struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IsPrimary            *bool    `protobuf:"varint,2,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	EmailAddress         *string  `protobuf:"bytes,3,opt,name=email_address,json=emailAddress" json:"email_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeague_Admin) Reset()         { *m = CMsgDOTALeague_Admin{} }
func (m *CMsgDOTALeague_Admin) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeague_Admin) ProtoMessage()    {}
func (*CMsgDOTALeague_Admin) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{2, 1}
}

func (m *CMsgDOTALeague_Admin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeague_Admin.Unmarshal(m, b)
}
func (m *CMsgDOTALeague_Admin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeague_Admin.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeague_Admin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeague_Admin.Merge(m, src)
}
func (m *CMsgDOTALeague_Admin) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeague_Admin.Size(m)
}
func (m *CMsgDOTALeague_Admin) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeague_Admin.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeague_Admin proto.InternalMessageInfo

func (m *CMsgDOTALeague_Admin) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTALeague_Admin) GetIsPrimary() bool {
	if m != nil && m.IsPrimary != nil {
		return *m.IsPrimary
	}
	return false
}

func (m *CMsgDOTALeague_Admin) GetEmailAddress() string {
	if m != nil && m.EmailAddress != nil {
		return *m.EmailAddress
	}
	return ""
}

type CMsgDOTALeague_PrizePoolItem struct {
	ItemDef              *uint32  `protobuf:"varint,1,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	SalesStopTimestamp   *uint32  `protobuf:"varint,2,opt,name=sales_stop_timestamp,json=salesStopTimestamp" json:"sales_stop_timestamp,omitempty"`
	RevenuePct           *uint32  `protobuf:"varint,3,opt,name=revenue_pct,json=revenuePct" json:"revenue_pct,omitempty"`
	RevenueCentsPerSale  *uint32  `protobuf:"varint,4,opt,name=revenue_cents_per_sale,json=revenueCentsPerSale" json:"revenue_cents_per_sale,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeague_PrizePoolItem) Reset()         { *m = CMsgDOTALeague_PrizePoolItem{} }
func (m *CMsgDOTALeague_PrizePoolItem) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeague_PrizePoolItem) ProtoMessage()    {}
func (*CMsgDOTALeague_PrizePoolItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{2, 2}
}

func (m *CMsgDOTALeague_PrizePoolItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeague_PrizePoolItem.Unmarshal(m, b)
}
func (m *CMsgDOTALeague_PrizePoolItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeague_PrizePoolItem.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeague_PrizePoolItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeague_PrizePoolItem.Merge(m, src)
}
func (m *CMsgDOTALeague_PrizePoolItem) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeague_PrizePoolItem.Size(m)
}
func (m *CMsgDOTALeague_PrizePoolItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeague_PrizePoolItem.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeague_PrizePoolItem proto.InternalMessageInfo

func (m *CMsgDOTALeague_PrizePoolItem) GetItemDef() uint32 {
	if m != nil && m.ItemDef != nil {
		return *m.ItemDef
	}
	return 0
}

func (m *CMsgDOTALeague_PrizePoolItem) GetSalesStopTimestamp() uint32 {
	if m != nil && m.SalesStopTimestamp != nil {
		return *m.SalesStopTimestamp
	}
	return 0
}

func (m *CMsgDOTALeague_PrizePoolItem) GetRevenuePct() uint32 {
	if m != nil && m.RevenuePct != nil {
		return *m.RevenuePct
	}
	return 0
}

func (m *CMsgDOTALeague_PrizePoolItem) GetRevenueCentsPerSale() uint32 {
	if m != nil && m.RevenueCentsPerSale != nil {
		return *m.RevenueCentsPerSale
	}
	return 0
}

type CMsgDOTALeague_PrizePool struct {
	BasePrizePool        *uint32                         `protobuf:"varint,1,opt,name=base_prize_pool,json=basePrizePool" json:"base_prize_pool,omitempty"`
	TotalPrizePool       *uint32                         `protobuf:"varint,2,opt,name=total_prize_pool,json=totalPrizePool" json:"total_prize_pool,omitempty"`
	PrizeSplitPctX100    []uint32                        `protobuf:"varint,3,rep,name=prize_split_pct_x100,json=prizeSplitPctX100" json:"prize_split_pct_x100,omitempty"`
	PrizePoolItems       []*CMsgDOTALeague_PrizePoolItem `protobuf:"bytes,4,rep,name=prize_pool_items,json=prizePoolItems" json:"prize_pool_items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CMsgDOTALeague_PrizePool) Reset()         { *m = CMsgDOTALeague_PrizePool{} }
func (m *CMsgDOTALeague_PrizePool) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeague_PrizePool) ProtoMessage()    {}
func (*CMsgDOTALeague_PrizePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{2, 3}
}

func (m *CMsgDOTALeague_PrizePool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeague_PrizePool.Unmarshal(m, b)
}
func (m *CMsgDOTALeague_PrizePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeague_PrizePool.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeague_PrizePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeague_PrizePool.Merge(m, src)
}
func (m *CMsgDOTALeague_PrizePool) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeague_PrizePool.Size(m)
}
func (m *CMsgDOTALeague_PrizePool) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeague_PrizePool.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeague_PrizePool proto.InternalMessageInfo

func (m *CMsgDOTALeague_PrizePool) GetBasePrizePool() uint32 {
	if m != nil && m.BasePrizePool != nil {
		return *m.BasePrizePool
	}
	return 0
}

func (m *CMsgDOTALeague_PrizePool) GetTotalPrizePool() uint32 {
	if m != nil && m.TotalPrizePool != nil {
		return *m.TotalPrizePool
	}
	return 0
}

func (m *CMsgDOTALeague_PrizePool) GetPrizeSplitPctX100() []uint32 {
	if m != nil {
		return m.PrizeSplitPctX100
	}
	return nil
}

func (m *CMsgDOTALeague_PrizePool) GetPrizePoolItems() []*CMsgDOTALeague_PrizePoolItem {
	if m != nil {
		return m.PrizePoolItems
	}
	return nil
}

type CMsgDOTALeague_Stream struct {
	StreamId             *uint32                   `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Language             *uint32                   `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
	Name                 *string                   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	BroadcastProvider    *ELeagueBroadcastProvider `protobuf:"varint,4,opt,name=broadcast_provider,json=broadcastProvider,enum=dota.ELeagueBroadcastProvider,def=0" json:"broadcast_provider,omitempty"`
	StreamUrl            *string                   `protobuf:"bytes,5,opt,name=stream_url,json=streamUrl" json:"stream_url,omitempty"`
	VodUrl               *string                   `protobuf:"bytes,6,opt,name=vod_url,json=vodUrl" json:"vod_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CMsgDOTALeague_Stream) Reset()         { *m = CMsgDOTALeague_Stream{} }
func (m *CMsgDOTALeague_Stream) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeague_Stream) ProtoMessage()    {}
func (*CMsgDOTALeague_Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{2, 4}
}

func (m *CMsgDOTALeague_Stream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeague_Stream.Unmarshal(m, b)
}
func (m *CMsgDOTALeague_Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeague_Stream.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeague_Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeague_Stream.Merge(m, src)
}
func (m *CMsgDOTALeague_Stream) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeague_Stream.Size(m)
}
func (m *CMsgDOTALeague_Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeague_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeague_Stream proto.InternalMessageInfo

const Default_CMsgDOTALeague_Stream_BroadcastProvider ELeagueBroadcastProvider = ELeagueBroadcastProvider_LEAGUE_BROADCAST_UNKNOWN

func (m *CMsgDOTALeague_Stream) GetStreamId() uint32 {
	if m != nil && m.StreamId != nil {
		return *m.StreamId
	}
	return 0
}

func (m *CMsgDOTALeague_Stream) GetLanguage() uint32 {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return 0
}

func (m *CMsgDOTALeague_Stream) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTALeague_Stream) GetBroadcastProvider() ELeagueBroadcastProvider {
	if m != nil && m.BroadcastProvider != nil {
		return *m.BroadcastProvider
	}
	return Default_CMsgDOTALeague_Stream_BroadcastProvider
}

func (m *CMsgDOTALeague_Stream) GetStreamUrl() string {
	if m != nil && m.StreamUrl != nil {
		return *m.StreamUrl
	}
	return ""
}

func (m *CMsgDOTALeague_Stream) GetVodUrl() string {
	if m != nil && m.VodUrl != nil {
		return *m.VodUrl
	}
	return ""
}

type CMsgDOTALeague_SeriesInfo struct {
	SeriesId             *uint32  `protobuf:"varint,1,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType           *uint32  `protobuf:"varint,2,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	StartTime            *uint32  `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	MatchIds             []uint64 `protobuf:"varint,4,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
	TeamId_1             *uint32  `protobuf:"varint,5,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	TeamId_2             *uint32  `protobuf:"varint,6,opt,name=team_id_2,json=teamId2" json:"team_id_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeague_SeriesInfo) Reset()         { *m = CMsgDOTALeague_SeriesInfo{} }
func (m *CMsgDOTALeague_SeriesInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeague_SeriesInfo) ProtoMessage()    {}
func (*CMsgDOTALeague_SeriesInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{2, 5}
}

func (m *CMsgDOTALeague_SeriesInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeague_SeriesInfo.Unmarshal(m, b)
}
func (m *CMsgDOTALeague_SeriesInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeague_SeriesInfo.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeague_SeriesInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeague_SeriesInfo.Merge(m, src)
}
func (m *CMsgDOTALeague_SeriesInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeague_SeriesInfo.Size(m)
}
func (m *CMsgDOTALeague_SeriesInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeague_SeriesInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeague_SeriesInfo proto.InternalMessageInfo

func (m *CMsgDOTALeague_SeriesInfo) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTALeague_SeriesInfo) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgDOTALeague_SeriesInfo) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTALeague_SeriesInfo) GetMatchIds() []uint64 {
	if m != nil {
		return m.MatchIds
	}
	return nil
}

func (m *CMsgDOTALeague_SeriesInfo) GetTeamId_1() uint32 {
	if m != nil && m.TeamId_1 != nil {
		return *m.TeamId_1
	}
	return 0
}

func (m *CMsgDOTALeague_SeriesInfo) GetTeamId_2() uint32 {
	if m != nil && m.TeamId_2 != nil {
		return *m.TeamId_2
	}
	return 0
}

type CMsgDOTALeague_Player struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	TeamId               *uint32  `protobuf:"varint,3,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeague_Player) Reset()         { *m = CMsgDOTALeague_Player{} }
func (m *CMsgDOTALeague_Player) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeague_Player) ProtoMessage()    {}
func (*CMsgDOTALeague_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{2, 6}
}

func (m *CMsgDOTALeague_Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeague_Player.Unmarshal(m, b)
}
func (m *CMsgDOTALeague_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeague_Player.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeague_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeague_Player.Merge(m, src)
}
func (m *CMsgDOTALeague_Player) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeague_Player.Size(m)
}
func (m *CMsgDOTALeague_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeague_Player.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeague_Player proto.InternalMessageInfo

func (m *CMsgDOTALeague_Player) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTALeague_Player) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTALeague_Player) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

type CMsgDOTALeagueInfo struct {
	LeagueId             *uint32        `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Name                 *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tier                 *ELeagueTier   `protobuf:"varint,3,opt,name=tier,enum=dota.ELeagueTier,def=0" json:"tier,omitempty"`
	Region               *ELeagueRegion `protobuf:"varint,4,opt,name=region,enum=dota.ELeagueRegion,def=0" json:"region,omitempty"`
	MostRecentActivity   *uint32        `protobuf:"varint,5,opt,name=most_recent_activity,json=mostRecentActivity" json:"most_recent_activity,omitempty"`
	TotalPrizePool       *uint32        `protobuf:"varint,6,opt,name=total_prize_pool,json=totalPrizePool" json:"total_prize_pool,omitempty"`
	StartTimestamp       *uint32        `protobuf:"varint,7,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp         *uint32        `protobuf:"varint,8,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	Status               *uint32        `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CMsgDOTALeagueInfo) Reset()         { *m = CMsgDOTALeagueInfo{} }
func (m *CMsgDOTALeagueInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueInfo) ProtoMessage()    {}
func (*CMsgDOTALeagueInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{3}
}

func (m *CMsgDOTALeagueInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueInfo.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueInfo.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueInfo.Merge(m, src)
}
func (m *CMsgDOTALeagueInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueInfo.Size(m)
}
func (m *CMsgDOTALeagueInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueInfo proto.InternalMessageInfo

const Default_CMsgDOTALeagueInfo_Tier ELeagueTier = ELeagueTier_LEAGUE_TIER_UNSET
const Default_CMsgDOTALeagueInfo_Region ELeagueRegion = ELeagueRegion_LEAGUE_REGION_UNSET

func (m *CMsgDOTALeagueInfo) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTALeagueInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTALeagueInfo) GetTier() ELeagueTier {
	if m != nil && m.Tier != nil {
		return *m.Tier
	}
	return Default_CMsgDOTALeagueInfo_Tier
}

func (m *CMsgDOTALeagueInfo) GetRegion() ELeagueRegion {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return Default_CMsgDOTALeagueInfo_Region
}

func (m *CMsgDOTALeagueInfo) GetMostRecentActivity() uint32 {
	if m != nil && m.MostRecentActivity != nil {
		return *m.MostRecentActivity
	}
	return 0
}

func (m *CMsgDOTALeagueInfo) GetTotalPrizePool() uint32 {
	if m != nil && m.TotalPrizePool != nil {
		return *m.TotalPrizePool
	}
	return 0
}

func (m *CMsgDOTALeagueInfo) GetStartTimestamp() uint32 {
	if m != nil && m.StartTimestamp != nil {
		return *m.StartTimestamp
	}
	return 0
}

func (m *CMsgDOTALeagueInfo) GetEndTimestamp() uint32 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

func (m *CMsgDOTALeagueInfo) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type CMsgDOTALeagueInfoList struct {
	Infos                []*CMsgDOTALeagueInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CMsgDOTALeagueInfoList) Reset()         { *m = CMsgDOTALeagueInfoList{} }
func (m *CMsgDOTALeagueInfoList) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueInfoList) ProtoMessage()    {}
func (*CMsgDOTALeagueInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{4}
}

func (m *CMsgDOTALeagueInfoList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueInfoList.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueInfoList.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueInfoList.Merge(m, src)
}
func (m *CMsgDOTALeagueInfoList) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueInfoList.Size(m)
}
func (m *CMsgDOTALeagueInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueInfoList proto.InternalMessageInfo

func (m *CMsgDOTALeagueInfoList) GetInfos() []*CMsgDOTALeagueInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type CMsgDOTALeagueLiveGames struct {
	Games                []*CMsgDOTALeagueLiveGames_LiveGame `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CMsgDOTALeagueLiveGames) Reset()         { *m = CMsgDOTALeagueLiveGames{} }
func (m *CMsgDOTALeagueLiveGames) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueLiveGames) ProtoMessage()    {}
func (*CMsgDOTALeagueLiveGames) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{5}
}

func (m *CMsgDOTALeagueLiveGames) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueLiveGames.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueLiveGames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueLiveGames.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueLiveGames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueLiveGames.Merge(m, src)
}
func (m *CMsgDOTALeagueLiveGames) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueLiveGames.Size(m)
}
func (m *CMsgDOTALeagueLiveGames) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueLiveGames.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueLiveGames proto.InternalMessageInfo

func (m *CMsgDOTALeagueLiveGames) GetGames() []*CMsgDOTALeagueLiveGames_LiveGame {
	if m != nil {
		return m.Games
	}
	return nil
}

type CMsgDOTALeagueLiveGames_LiveGame struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	ServerSteamId        *uint64  `protobuf:"varint,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	RadiantName          *string  `protobuf:"bytes,3,opt,name=radiant_name,json=radiantName" json:"radiant_name,omitempty"`
	RadiantLogo          *uint64  `protobuf:"varint,4,opt,name=radiant_logo,json=radiantLogo" json:"radiant_logo,omitempty"`
	RadiantTeamId        *uint32  `protobuf:"varint,9,opt,name=radiant_team_id,json=radiantTeamId" json:"radiant_team_id,omitempty"`
	DireName             *string  `protobuf:"bytes,5,opt,name=dire_name,json=direName" json:"dire_name,omitempty"`
	DireLogo             *uint64  `protobuf:"varint,6,opt,name=dire_logo,json=direLogo" json:"dire_logo,omitempty"`
	DireTeamId           *uint32  `protobuf:"varint,10,opt,name=dire_team_id,json=direTeamId" json:"dire_team_id,omitempty"`
	Time                 *uint32  `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
	Spectators           *uint32  `protobuf:"varint,8,opt,name=spectators" json:"spectators,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) Reset()         { *m = CMsgDOTALeagueLiveGames_LiveGame{} }
func (m *CMsgDOTALeagueLiveGames_LiveGame) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueLiveGames_LiveGame) ProtoMessage()    {}
func (*CMsgDOTALeagueLiveGames_LiveGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{5, 0}
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueLiveGames_LiveGame.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueLiveGames_LiveGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueLiveGames_LiveGame.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueLiveGames_LiveGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueLiveGames_LiveGame.Merge(m, src)
}
func (m *CMsgDOTALeagueLiveGames_LiveGame) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueLiveGames_LiveGame.Size(m)
}
func (m *CMsgDOTALeagueLiveGames_LiveGame) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueLiveGames_LiveGame.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueLiveGames_LiveGame proto.InternalMessageInfo

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetRadiantName() string {
	if m != nil && m.RadiantName != nil {
		return *m.RadiantName
	}
	return ""
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetRadiantLogo() uint64 {
	if m != nil && m.RadiantLogo != nil {
		return *m.RadiantLogo
	}
	return 0
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetRadiantTeamId() uint32 {
	if m != nil && m.RadiantTeamId != nil {
		return *m.RadiantTeamId
	}
	return 0
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetDireName() string {
	if m != nil && m.DireName != nil {
		return *m.DireName
	}
	return ""
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetDireLogo() uint64 {
	if m != nil && m.DireLogo != nil {
		return *m.DireLogo
	}
	return 0
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetDireTeamId() uint32 {
	if m != nil && m.DireTeamId != nil {
		return *m.DireTeamId
	}
	return 0
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *CMsgDOTALeagueLiveGames_LiveGame) GetSpectators() uint32 {
	if m != nil && m.Spectators != nil {
		return *m.Spectators
	}
	return 0
}

type CMsgDOTALeagueMessages struct {
	Messages             []*CMsgDOTALeagueMessages_Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CMsgDOTALeagueMessages) Reset()         { *m = CMsgDOTALeagueMessages{} }
func (m *CMsgDOTALeagueMessages) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueMessages) ProtoMessage()    {}
func (*CMsgDOTALeagueMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{6}
}

func (m *CMsgDOTALeagueMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueMessages.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueMessages.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueMessages.Merge(m, src)
}
func (m *CMsgDOTALeagueMessages) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueMessages.Size(m)
}
func (m *CMsgDOTALeagueMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueMessages.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueMessages proto.InternalMessageInfo

func (m *CMsgDOTALeagueMessages) GetMessages() []*CMsgDOTALeagueMessages_Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type CMsgDOTALeagueMessages_Message struct {
	AuthorAccountId      *uint32  `protobuf:"varint,1,opt,name=author_account_id,json=authorAccountId" json:"author_account_id,omitempty"`
	Timestamp            *uint32  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Message              *string  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueMessages_Message) Reset()         { *m = CMsgDOTALeagueMessages_Message{} }
func (m *CMsgDOTALeagueMessages_Message) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueMessages_Message) ProtoMessage()    {}
func (*CMsgDOTALeagueMessages_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{6, 0}
}

func (m *CMsgDOTALeagueMessages_Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueMessages_Message.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueMessages_Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueMessages_Message.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueMessages_Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueMessages_Message.Merge(m, src)
}
func (m *CMsgDOTALeagueMessages_Message) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueMessages_Message.Size(m)
}
func (m *CMsgDOTALeagueMessages_Message) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueMessages_Message.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueMessages_Message proto.InternalMessageInfo

func (m *CMsgDOTALeagueMessages_Message) GetAuthorAccountId() uint32 {
	if m != nil && m.AuthorAccountId != nil {
		return *m.AuthorAccountId
	}
	return 0
}

func (m *CMsgDOTALeagueMessages_Message) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTALeagueMessages_Message) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CMsgDOTALeaguePrizePool struct {
	PrizePool            *uint32  `protobuf:"varint,1,opt,name=prize_pool,json=prizePool" json:"prize_pool,omitempty"`
	IncrementPerSecond   *float32 `protobuf:"fixed32,2,opt,name=increment_per_second,json=incrementPerSecond" json:"increment_per_second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeaguePrizePool) Reset()         { *m = CMsgDOTALeaguePrizePool{} }
func (m *CMsgDOTALeaguePrizePool) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeaguePrizePool) ProtoMessage()    {}
func (*CMsgDOTALeaguePrizePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{7}
}

func (m *CMsgDOTALeaguePrizePool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeaguePrizePool.Unmarshal(m, b)
}
func (m *CMsgDOTALeaguePrizePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeaguePrizePool.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeaguePrizePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeaguePrizePool.Merge(m, src)
}
func (m *CMsgDOTALeaguePrizePool) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeaguePrizePool.Size(m)
}
func (m *CMsgDOTALeaguePrizePool) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeaguePrizePool.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeaguePrizePool proto.InternalMessageInfo

func (m *CMsgDOTALeaguePrizePool) GetPrizePool() uint32 {
	if m != nil && m.PrizePool != nil {
		return *m.PrizePool
	}
	return 0
}

func (m *CMsgDOTALeaguePrizePool) GetIncrementPerSecond() float32 {
	if m != nil && m.IncrementPerSecond != nil {
		return *m.IncrementPerSecond
	}
	return 0
}

type CMsgDOTALeagueInfoListAdminsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueInfoListAdminsRequest) Reset()         { *m = CMsgDOTALeagueInfoListAdminsRequest{} }
func (m *CMsgDOTALeagueInfoListAdminsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueInfoListAdminsRequest) ProtoMessage()    {}
func (*CMsgDOTALeagueInfoListAdminsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{8}
}

func (m *CMsgDOTALeagueInfoListAdminsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueInfoListAdminsRequest.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueInfoListAdminsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueInfoListAdminsRequest.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueInfoListAdminsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueInfoListAdminsRequest.Merge(m, src)
}
func (m *CMsgDOTALeagueInfoListAdminsRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueInfoListAdminsRequest.Size(m)
}
func (m *CMsgDOTALeagueInfoListAdminsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueInfoListAdminsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueInfoListAdminsRequest proto.InternalMessageInfo

type CMsgDOTALeagueNodeRequest struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	NodeId               *uint32  `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueNodeRequest) Reset()         { *m = CMsgDOTALeagueNodeRequest{} }
func (m *CMsgDOTALeagueNodeRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueNodeRequest) ProtoMessage()    {}
func (*CMsgDOTALeagueNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{9}
}

func (m *CMsgDOTALeagueNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueNodeRequest.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueNodeRequest.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueNodeRequest.Merge(m, src)
}
func (m *CMsgDOTALeagueNodeRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueNodeRequest.Size(m)
}
func (m *CMsgDOTALeagueNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueNodeRequest proto.InternalMessageInfo

func (m *CMsgDOTALeagueNodeRequest) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeRequest) GetNodeId() uint32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

type CMsgDOTALeagueNodeResponse struct {
	Node                 *CMsgDOTALeagueNode `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CMsgDOTALeagueNodeResponse) Reset()         { *m = CMsgDOTALeagueNodeResponse{} }
func (m *CMsgDOTALeagueNodeResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueNodeResponse) ProtoMessage()    {}
func (*CMsgDOTALeagueNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{10}
}

func (m *CMsgDOTALeagueNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueNodeResponse.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueNodeResponse.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueNodeResponse.Merge(m, src)
}
func (m *CMsgDOTALeagueNodeResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueNodeResponse.Size(m)
}
func (m *CMsgDOTALeagueNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueNodeResponse proto.InternalMessageInfo

func (m *CMsgDOTALeagueNodeResponse) GetNode() *CMsgDOTALeagueNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type CMsgDOTALeagueAvailableLobbyNodesRequest struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueAvailableLobbyNodesRequest) Reset() {
	*m = CMsgDOTALeagueAvailableLobbyNodesRequest{}
}
func (m *CMsgDOTALeagueAvailableLobbyNodesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueAvailableLobbyNodesRequest) ProtoMessage()    {}
func (*CMsgDOTALeagueAvailableLobbyNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{11}
}

func (m *CMsgDOTALeagueAvailableLobbyNodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodesRequest.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueAvailableLobbyNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodesRequest.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueAvailableLobbyNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodesRequest.Merge(m, src)
}
func (m *CMsgDOTALeagueAvailableLobbyNodesRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodesRequest.Size(m)
}
func (m *CMsgDOTALeagueAvailableLobbyNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodesRequest proto.InternalMessageInfo

func (m *CMsgDOTALeagueAvailableLobbyNodesRequest) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

type CMsgDOTALeagueAvailableLobbyNodes struct {
	NodeInfos            []*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo `protobuf:"bytes,1,rep,name=node_infos,json=nodeInfos" json:"node_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *CMsgDOTALeagueAvailableLobbyNodes) Reset()         { *m = CMsgDOTALeagueAvailableLobbyNodes{} }
func (m *CMsgDOTALeagueAvailableLobbyNodes) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueAvailableLobbyNodes) ProtoMessage()    {}
func (*CMsgDOTALeagueAvailableLobbyNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{12}
}

func (m *CMsgDOTALeagueAvailableLobbyNodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueAvailableLobbyNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueAvailableLobbyNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes.Merge(m, src)
}
func (m *CMsgDOTALeagueAvailableLobbyNodes) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes.Size(m)
}
func (m *CMsgDOTALeagueAvailableLobbyNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes proto.InternalMessageInfo

func (m *CMsgDOTALeagueAvailableLobbyNodes) GetNodeInfos() []*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo {
	if m != nil {
		return m.NodeInfos
	}
	return nil
}

type CMsgDOTALeagueAvailableLobbyNodes_NodeInfo struct {
	NodeId               *uint32  `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	NodeName             *string  `protobuf:"bytes,2,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	NodeGroupName        *string  `protobuf:"bytes,3,opt,name=node_group_name,json=nodeGroupName" json:"node_group_name,omitempty"`
	TeamId_1             *uint32  `protobuf:"varint,4,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	TeamId_2             *uint32  `protobuf:"varint,5,opt,name=team_id_2,json=teamId2" json:"team_id_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) Reset() {
	*m = CMsgDOTALeagueAvailableLobbyNodes_NodeInfo{}
}
func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) ProtoMessage() {}
func (*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{12, 0}
}

func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo.Merge(m, src)
}
func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo.Size(m)
}
func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo proto.InternalMessageInfo

func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetNodeId() uint32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetNodeName() string {
	if m != nil && m.NodeName != nil {
		return *m.NodeName
	}
	return ""
}

func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetNodeGroupName() string {
	if m != nil && m.NodeGroupName != nil {
		return *m.NodeGroupName
	}
	return ""
}

func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetTeamId_1() uint32 {
	if m != nil && m.TeamId_1 != nil {
		return *m.TeamId_1
	}
	return 0
}

func (m *CMsgDOTALeagueAvailableLobbyNodes_NodeInfo) GetTeamId_2() uint32 {
	if m != nil && m.TeamId_2 != nil {
		return *m.TeamId_2
	}
	return 0
}

type CMsgDOTALeagueNodeResults struct {
	NodeResults          []*CMsgDOTALeagueNodeResults_Result `protobuf:"bytes,1,rep,name=node_results,json=nodeResults" json:"node_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CMsgDOTALeagueNodeResults) Reset()         { *m = CMsgDOTALeagueNodeResults{} }
func (m *CMsgDOTALeagueNodeResults) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueNodeResults) ProtoMessage()    {}
func (*CMsgDOTALeagueNodeResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{13}
}

func (m *CMsgDOTALeagueNodeResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueNodeResults.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueNodeResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueNodeResults.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueNodeResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueNodeResults.Merge(m, src)
}
func (m *CMsgDOTALeagueNodeResults) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueNodeResults.Size(m)
}
func (m *CMsgDOTALeagueNodeResults) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueNodeResults.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueNodeResults proto.InternalMessageInfo

func (m *CMsgDOTALeagueNodeResults) GetNodeResults() []*CMsgDOTALeagueNodeResults_Result {
	if m != nil {
		return m.NodeResults
	}
	return nil
}

type CMsgDOTALeagueNodeResults_Result struct {
	NodeId               *uint32  `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	WinningNodeId        *uint32  `protobuf:"varint,2,opt,name=winning_node_id,json=winningNodeId" json:"winning_node_id,omitempty"`
	LosingNodeId         *uint32  `protobuf:"varint,3,opt,name=losing_node_id,json=losingNodeId" json:"losing_node_id,omitempty"`
	IncomingNodeId_1     *uint32  `protobuf:"varint,4,opt,name=incoming_node_id_1,json=incomingNodeId1" json:"incoming_node_id_1,omitempty"`
	IncomingNodeId_2     *uint32  `protobuf:"varint,5,opt,name=incoming_node_id_2,json=incomingNodeId2" json:"incoming_node_id_2,omitempty"`
	TeamId_1             *uint32  `protobuf:"varint,6,opt,name=team_id_1,json=teamId1" json:"team_id_1,omitempty"`
	TeamId_2             *uint32  `protobuf:"varint,7,opt,name=team_id_2,json=teamId2" json:"team_id_2,omitempty"`
	Team_1Name           *string  `protobuf:"bytes,8,opt,name=team_1_name,json=team1Name" json:"team_1_name,omitempty"`
	Team_2Name           *string  `protobuf:"bytes,9,opt,name=team_2_name,json=team2Name" json:"team_2_name,omitempty"`
	Team_1Wins           *uint32  `protobuf:"varint,10,opt,name=team_1_wins,json=team1Wins" json:"team_1_wins,omitempty"`
	Team_2Wins           *uint32  `protobuf:"varint,11,opt,name=team_2_wins,json=team2Wins" json:"team_2_wins,omitempty"`
	WinningTeamId        *uint32  `protobuf:"varint,12,opt,name=winning_team_id,json=winningTeamId" json:"winning_team_id,omitempty"`
	LosingTeamId         *uint32  `protobuf:"varint,13,opt,name=losing_team_id,json=losingTeamId" json:"losing_team_id,omitempty"`
	HasStarted           *bool    `protobuf:"varint,14,opt,name=has_started,json=hasStarted" json:"has_started,omitempty"`
	IsCompleted          *bool    `protobuf:"varint,15,opt,name=is_completed,json=isCompleted" json:"is_completed,omitempty"`
	ScheduledTime        *uint32  `protobuf:"varint,16,opt,name=scheduled_time,json=scheduledTime" json:"scheduled_time,omitempty"`
	MatchIds             []uint64 `protobuf:"varint,17,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTALeagueNodeResults_Result) Reset()         { *m = CMsgDOTALeagueNodeResults_Result{} }
func (m *CMsgDOTALeagueNodeResults_Result) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTALeagueNodeResults_Result) ProtoMessage()    {}
func (*CMsgDOTALeagueNodeResults_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{13, 0}
}

func (m *CMsgDOTALeagueNodeResults_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTALeagueNodeResults_Result.Unmarshal(m, b)
}
func (m *CMsgDOTALeagueNodeResults_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTALeagueNodeResults_Result.Marshal(b, m, deterministic)
}
func (m *CMsgDOTALeagueNodeResults_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTALeagueNodeResults_Result.Merge(m, src)
}
func (m *CMsgDOTALeagueNodeResults_Result) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTALeagueNodeResults_Result.Size(m)
}
func (m *CMsgDOTALeagueNodeResults_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTALeagueNodeResults_Result.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTALeagueNodeResults_Result proto.InternalMessageInfo

func (m *CMsgDOTALeagueNodeResults_Result) GetNodeId() uint32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetWinningNodeId() uint32 {
	if m != nil && m.WinningNodeId != nil {
		return *m.WinningNodeId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetLosingNodeId() uint32 {
	if m != nil && m.LosingNodeId != nil {
		return *m.LosingNodeId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetIncomingNodeId_1() uint32 {
	if m != nil && m.IncomingNodeId_1 != nil {
		return *m.IncomingNodeId_1
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetIncomingNodeId_2() uint32 {
	if m != nil && m.IncomingNodeId_2 != nil {
		return *m.IncomingNodeId_2
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetTeamId_1() uint32 {
	if m != nil && m.TeamId_1 != nil {
		return *m.TeamId_1
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetTeamId_2() uint32 {
	if m != nil && m.TeamId_2 != nil {
		return *m.TeamId_2
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetTeam_1Name() string {
	if m != nil && m.Team_1Name != nil {
		return *m.Team_1Name
	}
	return ""
}

func (m *CMsgDOTALeagueNodeResults_Result) GetTeam_2Name() string {
	if m != nil && m.Team_2Name != nil {
		return *m.Team_2Name
	}
	return ""
}

func (m *CMsgDOTALeagueNodeResults_Result) GetTeam_1Wins() uint32 {
	if m != nil && m.Team_1Wins != nil {
		return *m.Team_1Wins
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetTeam_2Wins() uint32 {
	if m != nil && m.Team_2Wins != nil {
		return *m.Team_2Wins
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetWinningTeamId() uint32 {
	if m != nil && m.WinningTeamId != nil {
		return *m.WinningTeamId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetLosingTeamId() uint32 {
	if m != nil && m.LosingTeamId != nil {
		return *m.LosingTeamId
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetHasStarted() bool {
	if m != nil && m.HasStarted != nil {
		return *m.HasStarted
	}
	return false
}

func (m *CMsgDOTALeagueNodeResults_Result) GetIsCompleted() bool {
	if m != nil && m.IsCompleted != nil {
		return *m.IsCompleted
	}
	return false
}

func (m *CMsgDOTALeagueNodeResults_Result) GetScheduledTime() uint32 {
	if m != nil && m.ScheduledTime != nil {
		return *m.ScheduledTime
	}
	return 0
}

func (m *CMsgDOTALeagueNodeResults_Result) GetMatchIds() []uint64 {
	if m != nil {
		return m.MatchIds
	}
	return nil
}

type CMsgDOTADPCLeagueResults struct {
	Results              []*CMsgDOTADPCLeagueResults_Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Points               []uint32                           `protobuf:"varint,2,rep,name=points" json:"points,omitempty"`
	Dollars              []uint32                           `protobuf:"varint,3,rep,name=dollars" json:"dollars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *CMsgDOTADPCLeagueResults) Reset()         { *m = CMsgDOTADPCLeagueResults{} }
func (m *CMsgDOTADPCLeagueResults) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCLeagueResults) ProtoMessage()    {}
func (*CMsgDOTADPCLeagueResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{14}
}

func (m *CMsgDOTADPCLeagueResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCLeagueResults.Unmarshal(m, b)
}
func (m *CMsgDOTADPCLeagueResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCLeagueResults.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCLeagueResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCLeagueResults.Merge(m, src)
}
func (m *CMsgDOTADPCLeagueResults) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCLeagueResults.Size(m)
}
func (m *CMsgDOTADPCLeagueResults) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCLeagueResults.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCLeagueResults proto.InternalMessageInfo

func (m *CMsgDOTADPCLeagueResults) GetResults() []*CMsgDOTADPCLeagueResults_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *CMsgDOTADPCLeagueResults) GetPoints() []uint32 {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *CMsgDOTADPCLeagueResults) GetDollars() []uint32 {
	if m != nil {
		return m.Dollars
	}
	return nil
}

type CMsgDOTADPCLeagueResults_Result struct {
	Standing             *uint32       `protobuf:"varint,1,opt,name=standing" json:"standing,omitempty"`
	TeamId               *uint32       `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName             *string       `protobuf:"bytes,3,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo             *uint64       `protobuf:"varint,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamLogoUrl          *string       `protobuf:"bytes,5,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	Points               *uint32       `protobuf:"varint,6,opt,name=points" json:"points,omitempty"`
	Earnings             *uint32       `protobuf:"varint,7,opt,name=earnings" json:"earnings,omitempty"`
	Timestamp            *uint32       `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	Phase                *ELeaguePhase `protobuf:"varint,9,opt,name=phase,enum=dota.ELeaguePhase,def=0" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CMsgDOTADPCLeagueResults_Result) Reset()         { *m = CMsgDOTADPCLeagueResults_Result{} }
func (m *CMsgDOTADPCLeagueResults_Result) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCLeagueResults_Result) ProtoMessage()    {}
func (*CMsgDOTADPCLeagueResults_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{14, 0}
}

func (m *CMsgDOTADPCLeagueResults_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCLeagueResults_Result.Unmarshal(m, b)
}
func (m *CMsgDOTADPCLeagueResults_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCLeagueResults_Result.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCLeagueResults_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCLeagueResults_Result.Merge(m, src)
}
func (m *CMsgDOTADPCLeagueResults_Result) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCLeagueResults_Result.Size(m)
}
func (m *CMsgDOTADPCLeagueResults_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCLeagueResults_Result.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCLeagueResults_Result proto.InternalMessageInfo

const Default_CMsgDOTADPCLeagueResults_Result_Phase ELeaguePhase = ELeaguePhase_LEAGUE_PHASE_UNSET

func (m *CMsgDOTADPCLeagueResults_Result) GetStanding() uint32 {
	if m != nil && m.Standing != nil {
		return *m.Standing
	}
	return 0
}

func (m *CMsgDOTADPCLeagueResults_Result) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTADPCLeagueResults_Result) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTADPCLeagueResults_Result) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTADPCLeagueResults_Result) GetTeamLogoUrl() string {
	if m != nil && m.TeamLogoUrl != nil {
		return *m.TeamLogoUrl
	}
	return ""
}

func (m *CMsgDOTADPCLeagueResults_Result) GetPoints() uint32 {
	if m != nil && m.Points != nil {
		return *m.Points
	}
	return 0
}

func (m *CMsgDOTADPCLeagueResults_Result) GetEarnings() uint32 {
	if m != nil && m.Earnings != nil {
		return *m.Earnings
	}
	return 0
}

func (m *CMsgDOTADPCLeagueResults_Result) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTADPCLeagueResults_Result) GetPhase() ELeaguePhase {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return Default_CMsgDOTADPCLeagueResults_Result_Phase
}

type CMsgDOTADPCTeamResults struct {
	Results              []*CMsgDOTADPCTeamResults_Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CMsgDOTADPCTeamResults) Reset()         { *m = CMsgDOTADPCTeamResults{} }
func (m *CMsgDOTADPCTeamResults) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCTeamResults) ProtoMessage()    {}
func (*CMsgDOTADPCTeamResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{15}
}

func (m *CMsgDOTADPCTeamResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCTeamResults.Unmarshal(m, b)
}
func (m *CMsgDOTADPCTeamResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCTeamResults.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCTeamResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCTeamResults.Merge(m, src)
}
func (m *CMsgDOTADPCTeamResults) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCTeamResults.Size(m)
}
func (m *CMsgDOTADPCTeamResults) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCTeamResults.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCTeamResults proto.InternalMessageInfo

func (m *CMsgDOTADPCTeamResults) GetResults() []*CMsgDOTADPCTeamResults_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type CMsgDOTADPCTeamResults_Result struct {
	LeagueId             *uint32  `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Standing             *uint32  `protobuf:"varint,2,opt,name=standing" json:"standing,omitempty"`
	Points               *uint32  `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	Earnings             *uint32  `protobuf:"varint,4,opt,name=earnings" json:"earnings,omitempty"`
	Timestamp            *uint32  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTADPCTeamResults_Result) Reset()         { *m = CMsgDOTADPCTeamResults_Result{} }
func (m *CMsgDOTADPCTeamResults_Result) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCTeamResults_Result) ProtoMessage()    {}
func (*CMsgDOTADPCTeamResults_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{15, 0}
}

func (m *CMsgDOTADPCTeamResults_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCTeamResults_Result.Unmarshal(m, b)
}
func (m *CMsgDOTADPCTeamResults_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCTeamResults_Result.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCTeamResults_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCTeamResults_Result.Merge(m, src)
}
func (m *CMsgDOTADPCTeamResults_Result) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCTeamResults_Result.Size(m)
}
func (m *CMsgDOTADPCTeamResults_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCTeamResults_Result.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCTeamResults_Result proto.InternalMessageInfo

func (m *CMsgDOTADPCTeamResults_Result) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTADPCTeamResults_Result) GetStanding() uint32 {
	if m != nil && m.Standing != nil {
		return *m.Standing
	}
	return 0
}

func (m *CMsgDOTADPCTeamResults_Result) GetPoints() uint32 {
	if m != nil && m.Points != nil {
		return *m.Points
	}
	return 0
}

func (m *CMsgDOTADPCTeamResults_Result) GetEarnings() uint32 {
	if m != nil && m.Earnings != nil {
		return *m.Earnings
	}
	return 0
}

func (m *CMsgDOTADPCTeamResults_Result) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CMsgDOTADPCSeasonResults struct {
	Results              []*CMsgDOTADPCSeasonResults_TeamResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *CMsgDOTADPCSeasonResults) Reset()         { *m = CMsgDOTADPCSeasonResults{} }
func (m *CMsgDOTADPCSeasonResults) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCSeasonResults) ProtoMessage()    {}
func (*CMsgDOTADPCSeasonResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{16}
}

func (m *CMsgDOTADPCSeasonResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults.Unmarshal(m, b)
}
func (m *CMsgDOTADPCSeasonResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCSeasonResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCSeasonResults.Merge(m, src)
}
func (m *CMsgDOTADPCSeasonResults) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults.Size(m)
}
func (m *CMsgDOTADPCSeasonResults) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCSeasonResults.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCSeasonResults proto.InternalMessageInfo

func (m *CMsgDOTADPCSeasonResults) GetResults() []*CMsgDOTADPCSeasonResults_TeamResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type CMsgDOTADPCSeasonResults_TeamLeagueResult struct {
	Timestamp            *uint32  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	LeagueId             *uint32  `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	Standing             *uint32  `protobuf:"varint,3,opt,name=standing" json:"standing,omitempty"`
	Points               *uint32  `protobuf:"varint,4,opt,name=points" json:"points,omitempty"`
	Earnings             *uint32  `protobuf:"varint,5,opt,name=earnings" json:"earnings,omitempty"`
	AuditAction          *uint32  `protobuf:"varint,6,opt,name=audit_action,json=auditAction" json:"audit_action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) Reset() {
	*m = CMsgDOTADPCSeasonResults_TeamLeagueResult{}
}
func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCSeasonResults_TeamLeagueResult) ProtoMessage()    {}
func (*CMsgDOTADPCSeasonResults_TeamLeagueResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{16, 0}
}

func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamLeagueResult.Unmarshal(m, b)
}
func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamLeagueResult.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamLeagueResult.Merge(m, src)
}
func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamLeagueResult.Size(m)
}
func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamLeagueResult.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamLeagueResult proto.InternalMessageInfo

func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetStanding() uint32 {
	if m != nil && m.Standing != nil {
		return *m.Standing
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetPoints() uint32 {
	if m != nil && m.Points != nil {
		return *m.Points
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetEarnings() uint32 {
	if m != nil && m.Earnings != nil {
		return *m.Earnings
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamLeagueResult) GetAuditAction() uint32 {
	if m != nil && m.AuditAction != nil {
		return *m.AuditAction
	}
	return 0
}

type CMsgDOTADPCSeasonResults_TeamResult struct {
	TeamId               *uint32                                      `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName             *string                                      `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo             *uint64                                      `protobuf:"varint,3,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamLogoUrl          *string                                      `protobuf:"bytes,4,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	TotalPoints          *uint32                                      `protobuf:"varint,5,opt,name=total_points,json=totalPoints" json:"total_points,omitempty"`
	TotalEarnings        *uint32                                      `protobuf:"varint,6,opt,name=total_earnings,json=totalEarnings" json:"total_earnings,omitempty"`
	LeagueResults        []*CMsgDOTADPCSeasonResults_TeamLeagueResult `protobuf:"bytes,7,rep,name=league_results,json=leagueResults" json:"league_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *CMsgDOTADPCSeasonResults_TeamResult) Reset()         { *m = CMsgDOTADPCSeasonResults_TeamResult{} }
func (m *CMsgDOTADPCSeasonResults_TeamResult) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCSeasonResults_TeamResult) ProtoMessage()    {}
func (*CMsgDOTADPCSeasonResults_TeamResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fe4457e2b9dd334, []int{16, 1}
}

func (m *CMsgDOTADPCSeasonResults_TeamResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamResult.Unmarshal(m, b)
}
func (m *CMsgDOTADPCSeasonResults_TeamResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamResult.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCSeasonResults_TeamResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamResult.Merge(m, src)
}
func (m *CMsgDOTADPCSeasonResults_TeamResult) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamResult.Size(m)
}
func (m *CMsgDOTADPCSeasonResults_TeamResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamResult.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCSeasonResults_TeamResult proto.InternalMessageInfo

func (m *CMsgDOTADPCSeasonResults_TeamResult) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamResult) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTADPCSeasonResults_TeamResult) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamResult) GetTeamLogoUrl() string {
	if m != nil && m.TeamLogoUrl != nil {
		return *m.TeamLogoUrl
	}
	return ""
}

func (m *CMsgDOTADPCSeasonResults_TeamResult) GetTotalPoints() uint32 {
	if m != nil && m.TotalPoints != nil {
		return *m.TotalPoints
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamResult) GetTotalEarnings() uint32 {
	if m != nil && m.TotalEarnings != nil {
		return *m.TotalEarnings
	}
	return 0
}

func (m *CMsgDOTADPCSeasonResults_TeamResult) GetLeagueResults() []*CMsgDOTADPCSeasonResults_TeamLeagueResult {
	if m != nil {
		return m.LeagueResults
	}
	return nil
}

func init() {
	proto.RegisterEnum("dota.ELeagueNodeGroupType", ELeagueNodeGroupType_name, ELeagueNodeGroupType_value)
	proto.RegisterEnum("dota.ELeagueNodeType", ELeagueNodeType_name, ELeagueNodeType_value)
	proto.RegisterType((*CMsgDOTALeagueNode)(nil), "dota.CMsgDOTALeagueNode")
	proto.RegisterType((*CMsgDOTALeagueNode_MatchDetails)(nil), "dota.CMsgDOTALeagueNode.MatchDetails")
	proto.RegisterType((*CMsgDOTALeagueNodeGroup)(nil), "dota.CMsgDOTALeagueNodeGroup")
	proto.RegisterType((*CMsgDOTALeagueNodeGroup_TeamStanding)(nil), "dota.CMsgDOTALeagueNodeGroup.TeamStanding")
	proto.RegisterType((*CMsgDOTALeague)(nil), "dota.CMsgDOTALeague")
	proto.RegisterType((*CMsgDOTALeague_Info)(nil), "dota.CMsgDOTALeague.Info")
	proto.RegisterType((*CMsgDOTALeague_Admin)(nil), "dota.CMsgDOTALeague.Admin")
	proto.RegisterType((*CMsgDOTALeague_PrizePoolItem)(nil), "dota.CMsgDOTALeague.PrizePoolItem")
	proto.RegisterType((*CMsgDOTALeague_PrizePool)(nil), "dota.CMsgDOTALeague.PrizePool")
	proto.RegisterType((*CMsgDOTALeague_Stream)(nil), "dota.CMsgDOTALeague.Stream")
	proto.RegisterType((*CMsgDOTALeague_SeriesInfo)(nil), "dota.CMsgDOTALeague.SeriesInfo")
	proto.RegisterType((*CMsgDOTALeague_Player)(nil), "dota.CMsgDOTALeague.Player")
	proto.RegisterType((*CMsgDOTALeagueInfo)(nil), "dota.CMsgDOTALeagueInfo")
	proto.RegisterType((*CMsgDOTALeagueInfoList)(nil), "dota.CMsgDOTALeagueInfoList")
	proto.RegisterType((*CMsgDOTALeagueLiveGames)(nil), "dota.CMsgDOTALeagueLiveGames")
	proto.RegisterType((*CMsgDOTALeagueLiveGames_LiveGame)(nil), "dota.CMsgDOTALeagueLiveGames.LiveGame")
	proto.RegisterType((*CMsgDOTALeagueMessages)(nil), "dota.CMsgDOTALeagueMessages")
	proto.RegisterType((*CMsgDOTALeagueMessages_Message)(nil), "dota.CMsgDOTALeagueMessages.Message")
	proto.RegisterType((*CMsgDOTALeaguePrizePool)(nil), "dota.CMsgDOTALeaguePrizePool")
	proto.RegisterType((*CMsgDOTALeagueInfoListAdminsRequest)(nil), "dota.CMsgDOTALeagueInfoListAdminsRequest")
	proto.RegisterType((*CMsgDOTALeagueNodeRequest)(nil), "dota.CMsgDOTALeagueNodeRequest")
	proto.RegisterType((*CMsgDOTALeagueNodeResponse)(nil), "dota.CMsgDOTALeagueNodeResponse")
	proto.RegisterType((*CMsgDOTALeagueAvailableLobbyNodesRequest)(nil), "dota.CMsgDOTALeagueAvailableLobbyNodesRequest")
	proto.RegisterType((*CMsgDOTALeagueAvailableLobbyNodes)(nil), "dota.CMsgDOTALeagueAvailableLobbyNodes")
	proto.RegisterType((*CMsgDOTALeagueAvailableLobbyNodes_NodeInfo)(nil), "dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo")
	proto.RegisterType((*CMsgDOTALeagueNodeResults)(nil), "dota.CMsgDOTALeagueNodeResults")
	proto.RegisterType((*CMsgDOTALeagueNodeResults_Result)(nil), "dota.CMsgDOTALeagueNodeResults.Result")
	proto.RegisterType((*CMsgDOTADPCLeagueResults)(nil), "dota.CMsgDOTADPCLeagueResults")
	proto.RegisterType((*CMsgDOTADPCLeagueResults_Result)(nil), "dota.CMsgDOTADPCLeagueResults.Result")
	proto.RegisterType((*CMsgDOTADPCTeamResults)(nil), "dota.CMsgDOTADPCTeamResults")
	proto.RegisterType((*CMsgDOTADPCTeamResults_Result)(nil), "dota.CMsgDOTADPCTeamResults.Result")
	proto.RegisterType((*CMsgDOTADPCSeasonResults)(nil), "dota.CMsgDOTADPCSeasonResults")
	proto.RegisterType((*CMsgDOTADPCSeasonResults_TeamLeagueResult)(nil), "dota.CMsgDOTADPCSeasonResults.TeamLeagueResult")
	proto.RegisterType((*CMsgDOTADPCSeasonResults_TeamResult)(nil), "dota.CMsgDOTADPCSeasonResults.TeamResult")
}

func init() {
	proto.RegisterFile("dota_gcmessages_common_league.proto", fileDescriptor_2fe4457e2b9dd334)
}

var fileDescriptor_2fe4457e2b9dd334 = []byte{
	// 2906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x8f, 0x1b, 0x49,
	0x15, 0x5f, 0x7f, 0xdb, 0xcf, 0x1f, 0xe3, 0xa9, 0xcc, 0x26, 0x8e, 0x43, 0x92, 0x89, 0xb3, 0x09,
	0x43, 0x58, 0x66, 0x27, 0x46, 0x2b, 0xa1, 0x88, 0x65, 0xd7, 0x33, 0xe3, 0x9d, 0x78, 0xd7, 0xb1,
	0xbd, 0x6d, 0x4f, 0x02, 0x5c, 0x5a, 0x35, 0xee, 0x1a, 0x4f, 0x2f, 0xed, 0x6e, 0xd3, 0xd5, 0x9e,
	0xdd, 0x70, 0x42, 0xe2, 0xc4, 0x0d, 0x89, 0x03, 0x57, 0x2e, 0x08, 0x24, 0x6e, 0x5c, 0x11, 0x68,
	0x8f, 0x80, 0xc4, 0x99, 0x0b, 0xff, 0x02, 0x57, 0x8e, 0x08, 0xd5, 0xab, 0xea, 0x2f, 0xbb, 0x3d,
	0xc9, 0xae, 0xb8, 0x70, 0x72, 0xd7, 0xfb, 0xa8, 0xee, 0xf7, 0xea, 0xbd, 0xdf, 0x7b, 0xf5, 0x0c,
	0xf7, 0x0d, 0xc7, 0xa3, 0xfa, 0x6c, 0x3a, 0x67, 0x9c, 0xd3, 0x19, 0xe3, 0xfa, 0xd4, 0x99, 0xcf,
	0x1d, 0x5b, 0xb7, 0x18, 0x9d, 0x2d, 0xd9, 0xfe, 0xc2, 0x75, 0x3c, 0x87, 0x64, 0x85, 0x50, 0xf3,
	0x06, 0x8a, 0xf2, 0x0b, 0xea, 0x32, 0x43, 0x67, 0xf6, 0x72, 0xce, 0x25, 0xbb, 0xf5, 0xbb, 0x3c,
	0x90, 0xa3, 0x67, 0x7c, 0x76, 0x3c, 0x9c, 0x74, 0xfa, 0xa8, 0x37, 0x70, 0x0c, 0x46, 0x08, 0x64,
	0x6d, 0x3a, 0x67, 0x8d, 0xd4, 0x6e, 0x6a, 0xaf, 0xa4, 0xe1, 0x33, 0xb9, 0x01, 0x05, 0xdb, 0x31,
	0x98, 0x6e, 0x1a, 0x8d, 0xf4, 0x6e, 0x6a, 0xaf, 0xaa, 0xe5, 0xc5, 0xb2, 0x67, 0x90, 0x16, 0x54,
	0x91, 0x31, 0x73, 0x9d, 0xe5, 0x42, 0xb0, 0x33, 0xc8, 0x2e, 0x0b, 0xe2, 0x89, 0xa0, 0xf5, 0x0c,
	0xf2, 0x10, 0xb6, 0x3e, 0x33, 0x6d, 0xdb, 0xb4, 0x67, 0xba, 0xbf, 0x49, 0x16, 0xa5, 0xaa, 0x8a,
	0x3c, 0x90, 0x7b, 0xbd, 0x05, 0x35, 0xcb, 0xe1, 0x51, 0xb1, 0x1c, 0x8a, 0x55, 0x24, 0x55, 0x49,
	0x7d, 0x13, 0x88, 0x69, 0x4f, 0x9d, 0x79, 0x44, 0x4e, 0x7f, 0xdc, 0xc8, 0xa3, 0xe4, 0x96, 0xcf,
	0x91, 0xb2, 0x8f, 0x13, 0x85, 0xdb, 0x8d, 0x42, 0x92, 0x70, 0x9b, 0x74, 0xa1, 0x84, 0x32, 0xde,
	0xcb, 0x05, 0x6b, 0x14, 0x77, 0x53, 0x7b, 0xb5, 0xf6, 0x9b, 0xfb, 0xc2, 0x79, 0xfb, 0xdd, 0xd0,
	0x3d, 0x93, 0x97, 0x0b, 0xf6, 0x64, 0xbb, 0x37, 0x78, 0xde, 0xe9, 0xf7, 0x8e, 0xf5, 0xc1, 0xf0,
	0xb8, 0xab, 0x4f, 0x7e, 0x30, 0xea, 0x6a, 0x45, 0x5b, 0x31, 0xc9, 0x03, 0xa8, 0xf1, 0xe9, 0x05,
	0x33, 0x96, 0x16, 0x33, 0x74, 0xcf, 0x9c, 0xb3, 0x46, 0x49, 0x5a, 0x1b, 0x50, 0x27, 0xe6, 0x9c,
	0x91, 0xbb, 0x50, 0xa6, 0x53, 0x6f, 0x49, 0x2d, 0x29, 0x73, 0x0d, 0x65, 0x40, 0x92, 0x50, 0xe0,
	0x16, 0x94, 0x38, 0x73, 0x4d, 0xc6, 0x85, 0x27, 0x00, 0xd9, 0x45, 0x49, 0xe8, 0x19, 0xa4, 0x09,
	0x25, 0x8f, 0xd1, 0xb9, 0x34, 0xbe, 0x8c, 0xcc, 0x82, 0x20, 0x08, 0xa3, 0x23, 0xbc, 0x76, 0xa3,
	0x12, 0xe5, 0xb5, 0xc9, 0xfb, 0x50, 0x98, 0x53, 0x6f, 0x7a, 0xc1, 0x78, 0xa3, 0xba, 0x9b, 0xd9,
	0x2b, 0xb7, 0x1f, 0x48, 0x0b, 0xd7, 0xe3, 0x60, 0xff, 0x99, 0x90, 0x3b, 0x66, 0x1e, 0x35, 0x2d,
	0xae, 0xf9, 0x5a, 0xe4, 0x0e, 0x94, 0x71, 0xf3, 0xc7, 0xfa, 0x67, 0xa6, 0xcd, 0x1b, 0x35, 0xdc,
	0x1e, 0xdf, 0xf7, 0xf8, 0x85, 0x69, 0x87, 0xfc, 0xb6, 0xe4, 0x6f, 0x85, 0xfc, 0x36, 0xf2, 0xef,
	0x42, 0xf9, 0x82, 0x72, 0x9d, 0x7b, 0xd4, 0xf5, 0x98, 0xd1, 0xa8, 0xef, 0xa6, 0xf6, 0x8a, 0x1a,
	0x5c, 0x50, 0x3e, 0x96, 0x14, 0x72, 0x0f, 0x2a, 0x26, 0x86, 0xf3, 0xc2, 0x62, 0x42, 0x62, 0x1b,
	0x25, 0xca, 0x26, 0x3f, 0xf2, 0x49, 0xe4, 0x36, 0x00, 0xf7, 0x5c, 0x69, 0x22, 0x6f, 0x90, 0xdd,
	0x8c, 0x78, 0x85, 0xa4, 0xf4, 0x0c, 0xde, 0xfc, 0x04, 0x2a, 0xd1, 0x6f, 0x27, 0x37, 0xa1, 0x88,
	0x5f, 0x2f, 0xfc, 0x28, 0x82, 0x3a, 0xab, 0xac, 0x89, 0x87, 0xa6, 0x72, 0x99, 0x8a, 0x6f, 0x3f,
	0x34, 0x27, 0xb8, 0x67, 0xeb, 0x17, 0x00, 0x37, 0xd6, 0x5d, 0x84, 0x01, 0x9e, 0x98, 0x2f, 0x6b,
	0x69, 0x91, 0x5e, 0x4f, 0x8b, 0x77, 0x60, 0x67, 0x41, 0x5d, 0x66, 0x7b, 0x7a, 0x52, 0x06, 0x6d,
	0x4b, 0xde, 0x20, 0xa2, 0xf0, 0x2e, 0xdc, 0x88, 0x07, 0xb3, 0xaf, 0xc2, 0x1b, 0x59, 0xf4, 0xc1,
	0x4e, 0x34, 0xa2, 0x95, 0x16, 0x17, 0x6a, 0xd4, 0xb8, 0xa4, 0xf6, 0x74, 0x4d, 0x4f, 0xe5, 0xd7,
	0x4e, 0xc0, 0x8e, 0xbe, 0xed, 0x00, 0x42, 0xba, 0x74, 0xce, 0xd4, 0x59, 0xda, 0x9e, 0xca, 0x34,
	0x12, 0xf0, 0x84, 0x87, 0x8e, 0x04, 0x47, 0x1c, 0x4b, 0x44, 0xae, 0x10, 0x9e, 0xbc, 0x64, 0x3f,
	0x87, 0xad, 0xc8, 0xdb, 0x23, 0x49, 0xd6, 0x5c, 0x4b, 0x32, 0xfc, 0x06, 0xcc, 0x34, 0xe2, 0x67,
	0xda, 0x89, 0x36, 0x3c, 0x1d, 0xc9, 0x54, 0xab, 0xda, 0x51, 0x11, 0x32, 0x81, 0x6d, 0x83, 0x9d,
	0xd3, 0xa5, 0xa5, 0x1c, 0x89, 0x3b, 0x97, 0xbe, 0x64, 0xfa, 0x6e, 0xa9, 0x2d, 0x7c, 0x19, 0xb2,
	0x03, 0x39, 0xd7, 0x59, 0xda, 0x7e, 0xe6, 0xc9, 0x85, 0x30, 0x71, 0x4e, 0x3f, 0xd7, 0x71, 0xc1,
	0x55, 0xde, 0x95, 0xe6, 0xf4, 0x73, 0x0d, 0x09, 0xe4, 0x3e, 0x54, 0x4d, 0xae, 0x7b, 0x26, 0x3b,
	0x73, 0x19, 0xfd, 0x11, 0x73, 0x31, 0xfb, 0x8a, 0x5a, 0xc5, 0xe4, 0x93, 0x80, 0x26, 0x60, 0xce,
	0xe4, 0xfa, 0xb9, 0x69, 0x53, 0x4b, 0xfa, 0xa2, 0x51, 0xf5, 0xa5, 0x3e, 0x14, 0x44, 0x19, 0x55,
	0xab, 0x69, 0x50, 0x5b, 0x4f, 0x83, 0xef, 0x42, 0x6e, 0x71, 0x41, 0x39, 0x6b, 0x10, 0x34, 0x96,
	0xc4, 0x8c, 0x1d, 0x09, 0xce, 0x13, 0xd2, 0xef, 0x76, 0x4e, 0x4e, 0xbb, 0xfa, 0xe8, 0x69, 0x67,
	0xdc, 0xd5, 0x4f, 0x07, 0xe3, 0xee, 0x44, 0x93, 0x4a, 0xe4, 0x03, 0xc8, 0xbb, 0x6c, 0x66, 0x3a,
	0x36, 0x42, 0x4f, 0xad, 0x7d, 0x2d, 0xa6, 0xae, 0x21, 0xeb, 0xc9, 0x35, 0xa5, 0xaf, 0x75, 0x4f,
	0x7a, 0xc3, 0x81, 0xda, 0x40, 0xe9, 0xc9, 0x34, 0xa4, 0xae, 0x27, 0x01, 0x6c, 0x47, 0x3a, 0x03,
	0x29, 0x88, 0x5f, 0x37, 0xa1, 0xc8, 0x6c, 0x85, 0x80, 0x6f, 0x4a, 0x14, 0x62, 0xb6, 0xc4, 0xbe,
	0x4f, 0xa0, 0x86, 0x91, 0xc2, 0x3d, 0x6a, 0x1b, 0xa6, 0x3d, 0x13, 0x38, 0x21, 0xc0, 0xe8, 0xd1,
	0x26, 0x30, 0x42, 0x9f, 0xec, 0x8b, 0x50, 0x1b, 0x2b, 0x15, 0xad, 0xea, 0x45, 0x56, 0x9c, 0xec,
	0x43, 0x4e, 0x9c, 0x3e, 0x6f, 0xd4, 0x71, 0xa7, 0xc6, 0xa6, 0x9d, 0x34, 0x29, 0x46, 0xbe, 0x07,
	0xe5, 0x30, 0x1a, 0x79, 0x63, 0x1b, 0xb5, 0x6e, 0x5f, 0xf9, 0x7e, 0x0d, 0x82, 0xc0, 0xe3, 0xcd,
	0xff, 0xa4, 0xa0, 0x12, 0xfd, 0x1e, 0xd2, 0x84, 0xa2, 0x6f, 0x0e, 0x42, 0x81, 0x40, 0x6b, 0x9f,
	0x77, 0x03, 0x0a, 0x71, 0x78, 0xc9, 0x4b, 0x3c, 0x16, 0x18, 0x8f, 0x0c, 0x04, 0x90, 0x0c, 0x02,
	0x48, 0x51, 0x10, 0x06, 0x54, 0x3a, 0x10, 0x99, 0x1e, 0x9d, 0x61, 0xc1, 0x2c, 0x49, 0x18, 0x9f,
	0xd0, 0x59, 0xa0, 0x67, 0x39, 0x33, 0x07, 0xb3, 0x38, 0x2b, 0xf5, 0xfa, 0xce, 0xcc, 0x11, 0xe0,
	0x13, 0x30, 0xf5, 0xa5, 0x6b, 0x61, 0xca, 0x96, 0xb4, 0xb2, 0x2f, 0x70, 0xea, 0x5a, 0x02, 0xb4,
	0x10, 0x9f, 0x65, 0x96, 0xe2, 0x33, 0xb9, 0x0e, 0x79, 0xcb, 0xe1, 0x9c, 0x71, 0xcc, 0xcb, 0xaa,
	0xa6, 0x56, 0x22, 0x15, 0xf8, 0xd4, 0x71, 0x65, 0x52, 0x65, 0x34, 0xb9, 0x68, 0xfd, 0xbc, 0x0e,
	0xb5, 0xb8, 0xa3, 0xc8, 0xb7, 0x20, 0x6b, 0xda, 0xe7, 0x0e, 0x9a, 0x5f, 0x6e, 0xdf, 0x4c, 0x72,
	0xe6, 0x7e, 0xcf, 0x3e, 0x77, 0x34, 0x14, 0x23, 0xef, 0x01, 0x2c, 0x5c, 0xf3, 0x27, 0x4c, 0x5f,
	0x38, 0x8e, 0x85, 0x8e, 0x29, 0xb7, 0xef, 0x24, 0x2a, 0x8d, 0x84, 0xd8, 0xc8, 0x71, 0x2c, 0xad,
	0xb4, 0xf0, 0x1f, 0x49, 0x1b, 0xf2, 0xd4, 0x98, 0x0b, 0x23, 0x32, 0x78, 0x78, 0xcd, 0x44, 0xd5,
	0x8e, 0x10, 0xd1, 0x94, 0x24, 0x79, 0x17, 0x0a, 0xb2, 0x4e, 0x48, 0xc8, 0x2c, 0xb7, 0x6f, 0x25,
	0x2a, 0x8d, 0x51, 0x46, 0xf3, 0x65, 0x57, 0x83, 0x25, 0xf7, 0x25, 0x83, 0x85, 0x1c, 0x42, 0xc5,
	0x2f, 0xe5, 0xf6, 0xb9, 0xc3, 0x1b, 0x79, 0xdc, 0xe0, 0x6e, 0xf2, 0xbb, 0x65, 0x89, 0x17, 0x6e,
	0x2a, 0xf3, 0xe0, 0x99, 0x93, 0x8f, 0x80, 0x88, 0xbc, 0xe3, 0x1e, 0x13, 0x7d, 0xdc, 0xc2, 0xa2,
	0x2f, 0x99, 0x2b, 0xce, 0x6f, 0xb3, 0x15, 0x23, 0x94, 0xd1, 0xb6, 0x43, 0x35, 0x49, 0xe1, 0xcd,
	0x3f, 0x65, 0x21, 0x2b, 0x76, 0x15, 0x71, 0x24, 0x3b, 0x46, 0xbf, 0x36, 0x56, 0xb5, 0xa2, 0x24,
	0xf4, 0x8c, 0xa0, 0xb0, 0xa5, 0x23, 0x85, 0xed, 0x3b, 0x90, 0xf5, 0x4c, 0xe6, 0x62, 0xac, 0xd6,
	0xda, 0xdb, 0x31, 0xcc, 0x98, 0x98, 0xcc, 0x7d, 0xb2, 0xad, 0x10, 0x63, 0xd2, 0xeb, 0x6a, 0x0a,
	0x2f, 0x50, 0x23, 0x82, 0x37, 0xd9, 0xaf, 0x88, 0x37, 0x75, 0xc8, 0x88, 0x68, 0xce, 0xe1, 0xe7,
	0x88, 0x47, 0xb2, 0x0b, 0x65, 0x83, 0xf1, 0xa9, 0x6b, 0x2e, 0x3c, 0xb1, 0xb1, 0x8a, 0xf3, 0x08,
	0x49, 0xc4, 0xae, 0xed, 0x78, 0x4c, 0x06, 0x7a, 0x49, 0x93, 0x0b, 0xf2, 0x75, 0xd8, 0x0a, 0x91,
	0x8b, 0x7b, 0x74, 0xbe, 0x50, 0x21, 0x5f, 0x0b, 0xe0, 0x0b, 0xa9, 0x02, 0xd0, 0x7d, 0x0c, 0x93,
	0x62, 0xb2, 0x95, 0xab, 0x28, 0x20, 0x93, 0x42, 0x6f, 0x03, 0x59, 0xb8, 0x8e, 0x3e, 0x35, 0xdd,
	0xe9, 0xd2, 0xf4, 0xf4, 0x85, 0x63, 0xda, 0x1e, 0x57, 0x75, 0xa3, 0xbe, 0x70, 0x9d, 0x23, 0xc9,
	0x18, 0x21, 0x5d, 0xa0, 0xa6, 0x39, 0xa7, 0x33, 0xa6, 0x9f, 0x99, 0x5e, 0x50, 0x42, 0x90, 0x72,
	0x68, 0x7a, 0x5c, 0xb8, 0x89, 0x7b, 0xd4, 0x5b, 0x72, 0xac, 0x1d, 0xab, 0x6e, 0x1a, 0x23, 0x2b,
	0x70, 0xd3, 0x78, 0xd2, 0x99, 0x9c, 0x8e, 0x7d, 0x37, 0x49, 0x3d, 0x51, 0xb8, 0xe7, 0x0e, 0xf7,
	0x74, 0x97, 0x4d, 0x45, 0x73, 0x41, 0xa7, 0x9e, 0x79, 0x69, 0x7a, 0x2f, 0xb1, 0xca, 0x54, 0x35,
	0x22, 0x78, 0x1a, 0xb2, 0x3a, 0x8a, 0x43, 0xde, 0x81, 0x6b, 0x32, 0x46, 0x5c, 0x2a, 0x9c, 0xa6,
	0x2f, 0x98, 0x6b, 0x3a, 0x86, 0xea, 0xed, 0x48, 0x94, 0x35, 0x42, 0x4e, 0xf3, 0x53, 0xc8, 0x61,
	0x5e, 0x09, 0x63, 0xe8, 0x14, 0xeb, 0x7d, 0x18, 0x40, 0x25, 0x45, 0xe9, 0x61, 0xb9, 0x34, 0xb9,
	0xbe, 0x70, 0xcd, 0x39, 0x75, 0x5f, 0x62, 0x1c, 0x15, 0xb5, 0x92, 0xc9, 0x47, 0x92, 0x80, 0xde,
	0x9d, 0x53, 0xd3, 0xd2, 0xa9, 0x61, 0xb8, 0x8c, 0x73, 0x85, 0x80, 0x15, 0x24, 0x76, 0x24, 0xad,
	0xf9, 0x87, 0x14, 0x54, 0x83, 0xfc, 0xef, 0x79, 0x6c, 0x2e, 0x70, 0xd1, 0xf4, 0xd8, 0x5c, 0x37,
	0xd8, 0xb9, 0x7a, 0x65, 0x41, 0xac, 0x8f, 0xd9, 0xb9, 0xb0, 0x9d, 0x53, 0x8b, 0x89, 0xfe, 0xd2,
	0x59, 0x44, 0x8e, 0x4d, 0xa2, 0x2e, 0x41, 0xde, 0xd8, 0x73, 0x16, 0xe1, 0xe1, 0xdd, 0x85, 0xb2,
	0xcb, 0x2e, 0x99, 0xbd, 0x64, 0xfa, 0x62, 0xea, 0xa9, 0xe6, 0x0b, 0x14, 0x69, 0x34, 0xf5, 0xc8,
	0xb7, 0xe1, 0xba, 0x2f, 0x20, 0x9c, 0xc6, 0x85, 0x77, 0x74, 0xb1, 0x91, 0xba, 0xc4, 0x5c, 0x53,
	0xdc, 0x23, 0xc1, 0x1c, 0x31, 0x77, 0x4c, 0x2d, 0xd6, 0xfc, 0x67, 0x0a, 0x4a, 0xc1, 0x47, 0x8b,
	0x2e, 0xf3, 0x8c, 0x72, 0xa6, 0x47, 0xd0, 0x4e, 0x7e, 0x77, 0x55, 0x90, 0x43, 0xb9, 0x3d, 0xa8,
	0x7b, 0x8e, 0x47, 0x2d, 0x7d, 0x05, 0x16, 0xab, 0x5a, 0x0d, 0xe9, 0xa1, 0xa4, 0xe8, 0x1d, 0x51,
	0x86, 0x2f, 0x2c, 0x11, 0x72, 0x53, 0x4f, 0xff, 0xfc, 0xf1, 0xc1, 0x01, 0x22, 0xa1, 0xe8, 0x1d,
	0x05, 0x6f, 0x2c, 0x58, 0xa3, 0xa9, 0xf7, 0xfd, 0xc7, 0x07, 0x07, 0xa4, 0x0f, 0xf5, 0x70, 0x53,
	0x5d, 0xb8, 0xcb, 0x47, 0xc0, 0xd6, 0xd5, 0x88, 0x2b, 0x3c, 0xae, 0xd5, 0x16, 0xd1, 0x25, 0x6f,
	0xfe, 0x3b, 0x05, 0x79, 0x89, 0x91, 0x78, 0x4b, 0xf1, 0x7b, 0xf1, 0xb0, 0xee, 0xc9, 0x56, 0x5c,
	0xd4, 0x44, 0x8b, 0xda, 0xb3, 0x25, 0x9d, 0x31, 0x65, 0x48, 0xb0, 0x0e, 0xd0, 0x25, 0x13, 0x41,
	0x97, 0x19, 0x90, 0x33, 0xd7, 0xa1, 0xc6, 0x94, 0x72, 0x4f, 0x5f, 0xb8, 0xce, 0xa5, 0x69, 0x30,
	0x57, 0xe1, 0xc5, 0x9d, 0x58, 0x22, 0x1c, 0xfa, 0x62, 0x23, 0x25, 0xf5, 0xa4, 0xa1, 0x72, 0xe2,
	0x50, 0x1b, 0x76, 0x8e, 0x8f, 0x3a, 0xe3, 0x89, 0x7e, 0x3a, 0xf8, 0x78, 0x30, 0x7c, 0x31, 0xd0,
	0xb6, 0xcf, 0x56, 0x85, 0x23, 0x37, 0x88, 0x10, 0x51, 0x94, 0x1d, 0xa2, 0x3a, 0xde, 0x80, 0xc2,
	0xa5, 0x63, 0x44, 0x6a, 0x67, 0xfe, 0xd2, 0x31, 0x4e, 0x5d, 0xab, 0xf9, 0xe7, 0x14, 0x40, 0x08,
	0xd0, 0xf1, 0x2b, 0x5a, 0x6a, 0xe5, 0x8a, 0x76, 0x17, 0x14, 0x7e, 0xcb, 0x8e, 0x54, 0xda, 0x0f,
	0x92, 0x84, 0x2d, 0x66, 0xbc, 0x7f, 0xca, 0xac, 0xf6, 0x4f, 0xb7, 0xa0, 0xe4, 0x5f, 0x5b, 0xe4,
	0x59, 0x65, 0xb5, 0xa2, 0xba, 0xb7, 0xf0, 0xf8, 0xfd, 0x2f, 0x77, 0xc5, 0xfd, 0x2f, 0x1f, 0xbb,
	0xff, 0x35, 0x27, 0x90, 0x97, 0x45, 0xe0, 0x55, 0xa9, 0x9b, 0x04, 0xfe, 0x91, 0x36, 0x26, 0x13,
	0x6d, 0x63, 0x5a, 0x3f, 0xcb, 0xac, 0x4e, 0x12, 0xfe, 0xff, 0xaa, 0xcb, 0x26, 0xd8, 0xcc, 0x6d,
	0x84, 0xcd, 0xa4, 0x74, 0xcd, 0x27, 0xa6, 0x6b, 0x42, 0xbd, 0x29, 0xbc, 0x5e, 0xbd, 0x29, 0x26,
	0xd4, 0x9b, 0xeb, 0x41, 0x89, 0x90, 0xd5, 0x48, 0xad, 0x5a, 0x4f, 0xe1, 0xfa, 0xfa, 0x21, 0xf4,
	0x4d, 0xee, 0x89, 0xe6, 0x58, 0x36, 0x1e, 0xa9, 0xcd, 0xcd, 0x31, 0x76, 0x1c, 0x52, 0xac, 0xf5,
	0xdb, 0xcc, 0xea, 0x75, 0xb7, 0x6f, 0x5e, 0xb2, 0x13, 0x3a, 0x67, 0x5c, 0xdc, 0x3a, 0x66, 0xe2,
	0x41, 0xed, 0xf5, 0x30, 0x69, 0xaf, 0x40, 0x7a, 0xdf, 0x7f, 0xd2, 0xa4, 0x52, 0xf3, 0xef, 0x69,
	0x28, 0xfa, 0xb4, 0xab, 0xe3, 0xe3, 0x21, 0x6c, 0x71, 0xe6, 0x5e, 0x0a, 0xb0, 0x8d, 0xf6, 0xce,
	0x59, 0xad, 0x2a, 0xc9, 0x63, 0xd5, 0x42, 0xdf, 0x83, 0x8a, 0x4b, 0x0d, 0x93, 0x8a, 0x7b, 0x74,
	0x88, 0x27, 0x65, 0x45, 0xc3, 0x46, 0x3a, 0x22, 0x82, 0x0d, 0x73, 0x16, 0xf7, 0xf1, 0x45, 0xb0,
	0x67, 0x7e, 0x08, 0x5b, 0xbe, 0x88, 0xff, 0x36, 0x35, 0xb5, 0x51, 0xe4, 0x49, 0xd0, 0xb0, 0x1b,
	0xa6, 0xcb, 0xe4, 0xab, 0x24, 0x6e, 0x14, 0x05, 0x61, 0xa0, 0xec, 0x41, 0x26, 0xbe, 0x24, 0x2f,
	0xbb, 0x72, 0x41, 0xc0, 0x37, 0xec, 0x42, 0x05, 0x99, 0xfe, 0xf6, 0xb2, 0x3f, 0x00, 0x41, 0x53,
	0x7b, 0x13, 0x11, 0xfd, 0x73, 0xe6, 0xf7, 0xe4, 0xe2, 0x99, 0xdc, 0x01, 0xe0, 0x0b, 0x36, 0xf5,
	0xa8, 0xe7, 0xb8, 0x7e, 0x5f, 0x1e, 0xa1, 0xb4, 0xfe, 0x9a, 0x5a, 0x3d, 0xf4, 0x67, 0x6a, 0x22,
	0x48, 0x3e, 0x80, 0xa2, 0x3f, 0x1d, 0x54, 0x67, 0xf5, 0x56, 0xd2, 0x59, 0xf9, 0xf2, 0xfb, 0xea,
	0x41, 0x0b, 0xb4, 0x9a, 0x73, 0x28, 0x28, 0x22, 0x79, 0x04, 0xdb, 0x74, 0xe9, 0x5d, 0x38, 0xae,
	0xbe, 0x06, 0x1a, 0x5b, 0x92, 0xd1, 0x09, 0xa0, 0xe3, 0x6b, 0x50, 0x5a, 0xad, 0xbc, 0x21, 0x81,
	0x34, 0xa0, 0xa0, 0x5e, 0xa0, 0x8e, 0xca, 0x5f, 0xb6, 0x3e, 0x5d, 0x0d, 0xba, 0x30, 0x81, 0x6e,
	0xc7, 0xae, 0x0a, 0x0a, 0xac, 0xc2, 0xab, 0xc0, 0x01, 0xec, 0x98, 0xf6, 0xd4, 0x65, 0x73, 0x91,
	0xb9, 0x58, 0x9f, 0xd9, 0xd4, 0xb1, 0x65, 0xc0, 0xa4, 0x35, 0x12, 0xf0, 0x44, 0x79, 0x46, 0x4e,
	0xeb, 0x01, 0xdc, 0x4f, 0xce, 0x15, 0xec, 0x6b, 0xb8, 0xc6, 0x7e, 0xbc, 0x64, 0xdc, 0x6b, 0x7d,
	0x02, 0x37, 0x13, 0xae, 0x90, 0x92, 0x79, 0x75, 0xf8, 0x6e, 0x9a, 0x98, 0xb6, 0x3e, 0x82, 0x66,
	0xd2, 0x96, 0x7c, 0xe1, 0xd8, 0x9c, 0x91, 0xb7, 0x21, 0x2b, 0xe4, 0xd4, 0x15, 0x6a, 0xf3, 0x2d,
	0x16, 0xa5, 0x5a, 0x27, 0xb0, 0x17, 0xe7, 0x75, 0x2e, 0xa9, 0x69, 0xd1, 0x33, 0x8b, 0xf5, 0x9d,
	0xb3, 0xb3, 0x97, 0x42, 0x92, 0xbf, 0xce, 0xd7, 0xb6, 0x7e, 0x95, 0x86, 0x7b, 0xaf, 0xdc, 0x89,
	0x0c, 0x01, 0xa4, 0x4d, 0x11, 0x2c, 0x39, 0x48, 0xfa, 0xc4, 0x04, 0xe5, 0x7d, 0x9c, 0xb2, 0x0a,
	0x8c, 0xc1, 0x21, 0x2b, 0xde, 0x69, 0x9a, 0xbf, 0x4e, 0x41, 0xd1, 0xa7, 0x47, 0x3d, 0x96, 0x8a,
	0xcd, 0x98, 0x6f, 0xa9, 0xb9, 0x6c, 0xa4, 0x5c, 0xe0, 0xb4, 0x15, 0x73, 0xee, 0x61, 0x6c, 0xaa,
	0x14, 0x41, 0x80, 0x70, 0x4a, 0x84, 0x72, 0xb1, 0x82, 0x99, 0xbd, 0xa2, 0x60, 0xc6, 0x8a, 0x69,
	0xbb, 0xf5, 0x45, 0x2e, 0x39, 0x04, 0xf8, 0xd2, 0xf2, 0x38, 0xe9, 0x41, 0x05, 0xdf, 0xee, 0xca,
	0xf5, 0x55, 0x98, 0x18, 0x51, 0xdb, 0x97, 0xbf, 0x72, 0x1c, 0xa8, 0x68, 0xcd, 0x7f, 0x64, 0x21,
	0x2f, 0x9f, 0x37, 0x7b, 0x22, 0x61, 0x92, 0x9e, 0x7e, 0xbd, 0x49, 0x7a, 0xe6, 0xb5, 0x27, 0xe9,
	0xd9, 0x2f, 0x33, 0x49, 0xcf, 0x25, 0x4f, 0xd2, 0x63, 0xce, 0xce, 0x5f, 0xe1, 0xec, 0x42, 0x7c,
	0x3a, 0x1d, 0x0e, 0x97, 0xf1, 0x20, 0x8b, 0xb2, 0x2f, 0xc3, 0xe1, 0x32, 0x1e, 0x62, 0x38, 0x5c,
	0x46, 0x7e, 0x29, 0xe4, 0xb7, 0x63, 0x7c, 0x35, 0x9c, 0x86, 0x57, 0x0c, 0xa7, 0xcb, 0xab, 0xc3,
	0xe9, 0x84, 0x71, 0x70, 0x25, 0x61, 0x1c, 0x1c, 0xf1, 0xaf, 0x2f, 0x56, 0x8d, 0xfa, 0x57, 0x49,
	0xad, 0x8c, 0xba, 0x6b, 0xaf, 0x1c, 0x75, 0x6f, 0xad, 0xcf, 0xf8, 0xd6, 0xff, 0x4c, 0xa8, 0x27,
	0xfd, 0x99, 0x10, 0xeb, 0x15, 0xb7, 0xe3, 0xbd, 0x62, 0xeb, 0x8f, 0x19, 0x68, 0xf8, 0xb1, 0x78,
	0x3c, 0x3a, 0xf2, 0x5b, 0x22, 0x19, 0xc1, 0xef, 0x43, 0x21, 0x1e, 0xbc, 0x2b, 0x7f, 0x08, 0xac,
	0x2a, 0xf8, 0xb1, 0xeb, 0x6b, 0x89, 0x6e, 0x44, 0xdd, 0x78, 0xd3, 0x78, 0xf9, 0x50, 0x2b, 0x81,
	0xf3, 0x86, 0x63, 0x59, 0xd4, 0xe5, 0xea, 0x56, 0xe2, 0x2f, 0x9b, 0xbf, 0x4f, 0x07, 0x91, 0xfe,
	0xbf, 0x1f, 0x9a, 0xc5, 0x26, 0x63, 0xd9, 0x57, 0x4d, 0xc6, 0x72, 0xeb, 0x93, 0xb1, 0xd0, 0x1e,
	0x19, 0xb8, 0xbe, 0x3d, 0x4d, 0x28, 0x32, 0xea, 0xda, 0x38, 0xad, 0x94, 0x61, 0x1b, 0xac, 0xe3,
	0x15, 0xaf, 0xb8, 0x5a, 0xf1, 0x82, 0x39, 0x6d, 0xe9, 0x2b, 0xcc, 0x69, 0x5b, 0xff, 0x8a, 0x54,
	0xf8, 0xe3, 0xd1, 0x91, 0x88, 0x2d, 0xff, 0xec, 0xde, 0x5b, 0x3d, 0xbb, 0xfb, 0x6b, 0x67, 0x17,
	0x11, 0x5f, 0x3d, 0xb9, 0xe6, 0x2f, 0x53, 0xc1, 0x39, 0x5c, 0x59, 0xca, 0xa2, 0x87, 0x94, 0x5e,
	0x39, 0xa4, 0xd0, 0x5b, 0x99, 0x8d, 0xde, 0xca, 0x5e, 0xe5, 0xad, 0xdc, 0x8a, 0xb7, 0x5a, 0x7f,
	0xcb, 0xc6, 0xa2, 0x75, 0xcc, 0x28, 0x77, 0x6c, 0xdf, 0xe2, 0xa3, 0x55, 0x8b, 0xbf, 0xb1, 0x66,
	0x71, 0x4c, 0x61, 0x3f, 0xb4, 0x3f, 0xb4, 0xfb, 0x8b, 0x14, 0xd4, 0x05, 0x3d, 0x1a, 0xd7, 0xf1,
	0x8f, 0x4a, 0xad, 0x1e, 0x61, 0xcc, 0x3f, 0xe9, 0x2b, 0xfc, 0x93, 0xd9, 0xe8, 0x9f, 0xec, 0x46,
	0xff, 0xe4, 0x56, 0xfc, 0x73, 0x0f, 0x2a, 0x74, 0x69, 0x98, 0xf2, 0x0e, 0xa2, 0xc6, 0x5a, 0x55,
	0xad, 0x8c, 0xb4, 0x0e, 0x92, 0x9a, 0xbf, 0x49, 0x03, 0x84, 0xa6, 0x45, 0x53, 0x25, 0xb5, 0x39,
	0x55, 0xd2, 0x57, 0xa5, 0x4a, 0xe6, 0x55, 0xa9, 0x92, 0x5d, 0x4f, 0x95, 0x7b, 0x50, 0x51, 0x17,
	0x20, 0x69, 0xa2, 0x34, 0xa4, 0x2c, 0x2f, 0x3f, 0xd2, 0xce, 0x07, 0x20, 0xef, 0x42, 0x7a, 0x60,
	0xad, 0xb4, 0xa6, 0x8a, 0xd4, 0xae, 0x6f, 0xf2, 0x73, 0xa8, 0x29, 0xff, 0xfa, 0xc7, 0x2b, 0x07,
	0x9b, 0xef, 0xbc, 0xc6, 0xf1, 0x46, 0x8f, 0x51, 0xab, 0x5a, 0x51, 0xb0, 0x7a, 0xf4, 0x97, 0x14,
	0xec, 0x24, 0xfd, 0xaf, 0x44, 0xae, 0x43, 0xc2, 0x3f, 0x4b, 0xf5, 0x37, 0x08, 0x81, 0xda, 0x50,
	0x3b, 0xe9, 0x0c, 0x7a, 0x3f, 0xec, 0x4c, 0x7a, 0xc3, 0x41, 0xa7, 0x5f, 0x4f, 0x91, 0x2d, 0x28,
	0x6b, 0xc3, 0xd3, 0xc1, 0xb1, 0xae, 0x0d, 0x0f, 0x7b, 0x83, 0x7a, 0x9a, 0x94, 0x20, 0x37, 0x7e,
	0xd1, 0x1b, 0x8f, 0xeb, 0x19, 0x21, 0x7f, 0xa8, 0x75, 0x8e, 0x3e, 0xee, 0x4e, 0xf4, 0x71, 0x6f,
	0x70, 0xd2, 0xef, 0xd6, 0xb3, 0xe4, 0x36, 0xdc, 0xf4, 0x69, 0xc7, 0xc3, 0xd3, 0xc3, 0x7e, 0x57,
	0x1f, 0x77, 0xbb, 0xc7, 0x7a, 0x7f, 0x38, 0xee, 0x6a, 0xf5, 0x5c, 0x02, 0xbb, 0xd3, 0xef, 0xeb,
	0x2f, 0x7a, 0x83, 0x41, 0x57, 0xab, 0xe7, 0x49, 0x15, 0x4a, 0xe3, 0xa7, 0xc3, 0x17, 0xcf, 0x3a,
	0x93, 0xa3, 0xa7, 0xf5, 0x02, 0x29, 0x40, 0xe6, 0x64, 0xdc, 0xaf, 0x17, 0x1f, 0x39, 0xb0, 0xb5,
	0xf2, 0x3f, 0x16, 0x79, 0x13, 0xd6, 0xff, 0xc9, 0xaa, 0xbf, 0x21, 0xbe, 0xf7, 0xb0, 0x3b, 0x9e,
	0xe8, 0xc3, 0x0f, 0xf5, 0xe1, 0xa0, 0x5b, 0x4f, 0x91, 0x6d, 0xa8, 0xfa, 0x84, 0xc9, 0x53, 0xad,
	0xdb, 0xad, 0xa7, 0x49, 0x1d, 0x2a, 0x3e, 0xe9, 0xc3, 0xde, 0xf3, 0x6e, 0x3d, 0x13, 0xd5, 0x9a,
	0xbc, 0x18, 0xd6, 0xb3, 0x87, 0xb9, 0xa7, 0xa9, 0x9f, 0xa6, 0xde, 0xf8, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x76, 0x0f, 0xa9, 0x20, 0x6a, 0x20, 0x00, 0x00,
}
